/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * Default is "1". Set to "0" to allow access without a password.
 */
export const RequirePasswordEnum = {
  Zero: "0",
  One: "1",
} as const;
/**
 * Default is "1". Set to "0" to allow access without a password.
 */
export type RequirePasswordEnum = ClosedEnum<typeof RequirePasswordEnum>;

export type RequirePassword = RequirePasswordEnum | boolean;

/**
 * Default is "0". Set to "1" to allow the user to share the project with others.
 */
export const CanShareEnum = {
  Zero: "0",
  One: "1",
} as const;
/**
 * Default is "0". Set to "1" to allow the user to share the project with others.
 */
export type CanShareEnum = ClosedEnum<typeof CanShareEnum>;

export type CanShare = CanShareEnum | boolean;

/**
 * Default is "0". Set to "1" to allow the user to download files from the project.
 */
export const CanDownloadEnum = {
  Zero: "0",
  One: "1",
} as const;
/**
 * Default is "0". Set to "1" to allow the user to download files from the project.
 */
export type CanDownloadEnum = ClosedEnum<typeof CanDownloadEnum>;

export type CanDownload = CanDownloadEnum | boolean;

/**
 * Default is "0". Set to "1" to allow the user to upload files to the project.
 */
export const CanUploadEnum = {
  Zero: "0",
  One: "1",
} as const;
/**
 * Default is "0". Set to "1" to allow the user to upload files to the project.
 */
export type CanUploadEnum = ClosedEnum<typeof CanUploadEnum>;

export type CanUpload = CanUploadEnum | boolean;

/**
 * Deprecated! Email notifications are always sent now.
 *
 * @deprecated enum: This will be removed in a future release, please migrate away from it as soon as possible.
 */
export const SendEmailNotification = {
  Zero: "0",
  One: "1",
} as const;
/**
 * Deprecated! Email notifications are always sent now.
 *
 * @deprecated enum: This will be removed in a future release, please migrate away from it as soon as possible.
 */
export type SendEmailNotification = ClosedEnum<typeof SendEmailNotification>;

export type CreateProjectSharingSharing = {
  /**
   * The email address of the person with whom you want to share the project.
   */
  with: string;
  requirePassword?: RequirePasswordEnum | boolean | undefined;
  canShare?: CanShareEnum | boolean | undefined;
  canDownload?: CanDownloadEnum | boolean | undefined;
  canUpload?: CanUploadEnum | boolean | undefined;
  /**
   * Deprecated! Email notifications are always sent now.
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  sendEmailNotification?: SendEmailNotification | undefined;
};

export type CreateProjectSharing = {
  sharing: CreateProjectSharingSharing;
};

/** @internal */
export const RequirePasswordEnum$inboundSchema: z.ZodNativeEnum<
  typeof RequirePasswordEnum
> = z.nativeEnum(RequirePasswordEnum);

/** @internal */
export const RequirePasswordEnum$outboundSchema: z.ZodNativeEnum<
  typeof RequirePasswordEnum
> = RequirePasswordEnum$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RequirePasswordEnum$ {
  /** @deprecated use `RequirePasswordEnum$inboundSchema` instead. */
  export const inboundSchema = RequirePasswordEnum$inboundSchema;
  /** @deprecated use `RequirePasswordEnum$outboundSchema` instead. */
  export const outboundSchema = RequirePasswordEnum$outboundSchema;
}

/** @internal */
export const RequirePassword$inboundSchema: z.ZodType<
  RequirePassword,
  z.ZodTypeDef,
  unknown
> = z.union([RequirePasswordEnum$inboundSchema, z.boolean()]);

/** @internal */
export type RequirePassword$Outbound = string | boolean;

/** @internal */
export const RequirePassword$outboundSchema: z.ZodType<
  RequirePassword$Outbound,
  z.ZodTypeDef,
  RequirePassword
> = z.union([RequirePasswordEnum$outboundSchema, z.boolean()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RequirePassword$ {
  /** @deprecated use `RequirePassword$inboundSchema` instead. */
  export const inboundSchema = RequirePassword$inboundSchema;
  /** @deprecated use `RequirePassword$outboundSchema` instead. */
  export const outboundSchema = RequirePassword$outboundSchema;
  /** @deprecated use `RequirePassword$Outbound` instead. */
  export type Outbound = RequirePassword$Outbound;
}

export function requirePasswordToJSON(
  requirePassword: RequirePassword,
): string {
  return JSON.stringify(RequirePassword$outboundSchema.parse(requirePassword));
}

export function requirePasswordFromJSON(
  jsonString: string,
): SafeParseResult<RequirePassword, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RequirePassword$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RequirePassword' from JSON`,
  );
}

/** @internal */
export const CanShareEnum$inboundSchema: z.ZodNativeEnum<typeof CanShareEnum> =
  z.nativeEnum(CanShareEnum);

/** @internal */
export const CanShareEnum$outboundSchema: z.ZodNativeEnum<typeof CanShareEnum> =
  CanShareEnum$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CanShareEnum$ {
  /** @deprecated use `CanShareEnum$inboundSchema` instead. */
  export const inboundSchema = CanShareEnum$inboundSchema;
  /** @deprecated use `CanShareEnum$outboundSchema` instead. */
  export const outboundSchema = CanShareEnum$outboundSchema;
}

/** @internal */
export const CanShare$inboundSchema: z.ZodType<
  CanShare,
  z.ZodTypeDef,
  unknown
> = z.union([CanShareEnum$inboundSchema, z.boolean()]);

/** @internal */
export type CanShare$Outbound = string | boolean;

/** @internal */
export const CanShare$outboundSchema: z.ZodType<
  CanShare$Outbound,
  z.ZodTypeDef,
  CanShare
> = z.union([CanShareEnum$outboundSchema, z.boolean()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CanShare$ {
  /** @deprecated use `CanShare$inboundSchema` instead. */
  export const inboundSchema = CanShare$inboundSchema;
  /** @deprecated use `CanShare$outboundSchema` instead. */
  export const outboundSchema = CanShare$outboundSchema;
  /** @deprecated use `CanShare$Outbound` instead. */
  export type Outbound = CanShare$Outbound;
}

export function canShareToJSON(canShare: CanShare): string {
  return JSON.stringify(CanShare$outboundSchema.parse(canShare));
}

export function canShareFromJSON(
  jsonString: string,
): SafeParseResult<CanShare, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CanShare$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CanShare' from JSON`,
  );
}

/** @internal */
export const CanDownloadEnum$inboundSchema: z.ZodNativeEnum<
  typeof CanDownloadEnum
> = z.nativeEnum(CanDownloadEnum);

/** @internal */
export const CanDownloadEnum$outboundSchema: z.ZodNativeEnum<
  typeof CanDownloadEnum
> = CanDownloadEnum$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CanDownloadEnum$ {
  /** @deprecated use `CanDownloadEnum$inboundSchema` instead. */
  export const inboundSchema = CanDownloadEnum$inboundSchema;
  /** @deprecated use `CanDownloadEnum$outboundSchema` instead. */
  export const outboundSchema = CanDownloadEnum$outboundSchema;
}

/** @internal */
export const CanDownload$inboundSchema: z.ZodType<
  CanDownload,
  z.ZodTypeDef,
  unknown
> = z.union([CanDownloadEnum$inboundSchema, z.boolean()]);

/** @internal */
export type CanDownload$Outbound = string | boolean;

/** @internal */
export const CanDownload$outboundSchema: z.ZodType<
  CanDownload$Outbound,
  z.ZodTypeDef,
  CanDownload
> = z.union([CanDownloadEnum$outboundSchema, z.boolean()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CanDownload$ {
  /** @deprecated use `CanDownload$inboundSchema` instead. */
  export const inboundSchema = CanDownload$inboundSchema;
  /** @deprecated use `CanDownload$outboundSchema` instead. */
  export const outboundSchema = CanDownload$outboundSchema;
  /** @deprecated use `CanDownload$Outbound` instead. */
  export type Outbound = CanDownload$Outbound;
}

export function canDownloadToJSON(canDownload: CanDownload): string {
  return JSON.stringify(CanDownload$outboundSchema.parse(canDownload));
}

export function canDownloadFromJSON(
  jsonString: string,
): SafeParseResult<CanDownload, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CanDownload$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CanDownload' from JSON`,
  );
}

/** @internal */
export const CanUploadEnum$inboundSchema: z.ZodNativeEnum<
  typeof CanUploadEnum
> = z.nativeEnum(CanUploadEnum);

/** @internal */
export const CanUploadEnum$outboundSchema: z.ZodNativeEnum<
  typeof CanUploadEnum
> = CanUploadEnum$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CanUploadEnum$ {
  /** @deprecated use `CanUploadEnum$inboundSchema` instead. */
  export const inboundSchema = CanUploadEnum$inboundSchema;
  /** @deprecated use `CanUploadEnum$outboundSchema` instead. */
  export const outboundSchema = CanUploadEnum$outboundSchema;
}

/** @internal */
export const CanUpload$inboundSchema: z.ZodType<
  CanUpload,
  z.ZodTypeDef,
  unknown
> = z.union([CanUploadEnum$inboundSchema, z.boolean()]);

/** @internal */
export type CanUpload$Outbound = string | boolean;

/** @internal */
export const CanUpload$outboundSchema: z.ZodType<
  CanUpload$Outbound,
  z.ZodTypeDef,
  CanUpload
> = z.union([CanUploadEnum$outboundSchema, z.boolean()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CanUpload$ {
  /** @deprecated use `CanUpload$inboundSchema` instead. */
  export const inboundSchema = CanUpload$inboundSchema;
  /** @deprecated use `CanUpload$outboundSchema` instead. */
  export const outboundSchema = CanUpload$outboundSchema;
  /** @deprecated use `CanUpload$Outbound` instead. */
  export type Outbound = CanUpload$Outbound;
}

export function canUploadToJSON(canUpload: CanUpload): string {
  return JSON.stringify(CanUpload$outboundSchema.parse(canUpload));
}

export function canUploadFromJSON(
  jsonString: string,
): SafeParseResult<CanUpload, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CanUpload$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CanUpload' from JSON`,
  );
}

/** @internal */
export const SendEmailNotification$inboundSchema: z.ZodNativeEnum<
  typeof SendEmailNotification
> = z.nativeEnum(SendEmailNotification);

/** @internal */
export const SendEmailNotification$outboundSchema: z.ZodNativeEnum<
  typeof SendEmailNotification
> = SendEmailNotification$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SendEmailNotification$ {
  /** @deprecated use `SendEmailNotification$inboundSchema` instead. */
  export const inboundSchema = SendEmailNotification$inboundSchema;
  /** @deprecated use `SendEmailNotification$outboundSchema` instead. */
  export const outboundSchema = SendEmailNotification$outboundSchema;
}

/** @internal */
export const CreateProjectSharingSharing$inboundSchema: z.ZodType<
  CreateProjectSharingSharing,
  z.ZodTypeDef,
  unknown
> = z.object({
  with: z.string(),
  requirePassword: z.union([RequirePasswordEnum$inboundSchema, z.boolean()])
    .optional(),
  canShare: z.union([CanShareEnum$inboundSchema, z.boolean()]).optional(),
  canDownload: z.union([CanDownloadEnum$inboundSchema, z.boolean()]).optional(),
  canUpload: z.union([CanUploadEnum$inboundSchema, z.boolean()]).optional(),
  sendEmailNotification: SendEmailNotification$inboundSchema.optional(),
});

/** @internal */
export type CreateProjectSharingSharing$Outbound = {
  with: string;
  requirePassword?: string | boolean | undefined;
  canShare?: string | boolean | undefined;
  canDownload?: string | boolean | undefined;
  canUpload?: string | boolean | undefined;
  sendEmailNotification?: string | undefined;
};

/** @internal */
export const CreateProjectSharingSharing$outboundSchema: z.ZodType<
  CreateProjectSharingSharing$Outbound,
  z.ZodTypeDef,
  CreateProjectSharingSharing
> = z.object({
  with: z.string(),
  requirePassword: z.union([RequirePasswordEnum$outboundSchema, z.boolean()])
    .optional(),
  canShare: z.union([CanShareEnum$outboundSchema, z.boolean()]).optional(),
  canDownload: z.union([CanDownloadEnum$outboundSchema, z.boolean()])
    .optional(),
  canUpload: z.union([CanUploadEnum$outboundSchema, z.boolean()]).optional(),
  sendEmailNotification: SendEmailNotification$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectSharingSharing$ {
  /** @deprecated use `CreateProjectSharingSharing$inboundSchema` instead. */
  export const inboundSchema = CreateProjectSharingSharing$inboundSchema;
  /** @deprecated use `CreateProjectSharingSharing$outboundSchema` instead. */
  export const outboundSchema = CreateProjectSharingSharing$outboundSchema;
  /** @deprecated use `CreateProjectSharingSharing$Outbound` instead. */
  export type Outbound = CreateProjectSharingSharing$Outbound;
}

export function createProjectSharingSharingToJSON(
  createProjectSharingSharing: CreateProjectSharingSharing,
): string {
  return JSON.stringify(
    CreateProjectSharingSharing$outboundSchema.parse(
      createProjectSharingSharing,
    ),
  );
}

export function createProjectSharingSharingFromJSON(
  jsonString: string,
): SafeParseResult<CreateProjectSharingSharing, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateProjectSharingSharing$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateProjectSharingSharing' from JSON`,
  );
}

/** @internal */
export const CreateProjectSharing$inboundSchema: z.ZodType<
  CreateProjectSharing,
  z.ZodTypeDef,
  unknown
> = z.object({
  sharing: z.lazy(() => CreateProjectSharingSharing$inboundSchema),
});

/** @internal */
export type CreateProjectSharing$Outbound = {
  sharing: CreateProjectSharingSharing$Outbound;
};

/** @internal */
export const CreateProjectSharing$outboundSchema: z.ZodType<
  CreateProjectSharing$Outbound,
  z.ZodTypeDef,
  CreateProjectSharing
> = z.object({
  sharing: z.lazy(() => CreateProjectSharingSharing$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectSharing$ {
  /** @deprecated use `CreateProjectSharing$inboundSchema` instead. */
  export const inboundSchema = CreateProjectSharing$inboundSchema;
  /** @deprecated use `CreateProjectSharing$outboundSchema` instead. */
  export const outboundSchema = CreateProjectSharing$outboundSchema;
  /** @deprecated use `CreateProjectSharing$Outbound` instead. */
  export type Outbound = CreateProjectSharing$Outbound;
}

export function createProjectSharingToJSON(
  createProjectSharing: CreateProjectSharing,
): string {
  return JSON.stringify(
    CreateProjectSharing$outboundSchema.parse(createProjectSharing),
  );
}

export function createProjectSharingFromJSON(
  jsonString: string,
): SafeParseResult<CreateProjectSharing, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateProjectSharing$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateProjectSharing' from JSON`,
  );
}
