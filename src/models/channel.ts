/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type Channel = {
  /**
   * The numeri d of the channel.
   */
  id: number;
  /**
   * The date when the channel was originally created.
   */
  created: Date;
  /**
   * The channel's description.
   */
  description: string;
  /**
   * A unique alphanumeric identifier for this channel.
   */
  hashedId: string;
  /**
   * The number of medias in the channel.
   */
  mediaCount: number;
  /**
   * The display name for the channel
   */
  name: string;
  /**
   * The date when the channel was last updated.
   */
  updated: Date;
};

/** @internal */
export const Channel$inboundSchema: z.ZodType<Channel, z.ZodTypeDef, unknown> =
  z.object({
    id: z.number().int(),
    created: z.string().datetime({ offset: true }).transform(v => new Date(v)),
    description: z.string(),
    hashedId: z.string(),
    mediaCount: z.number().int(),
    name: z.string(),
    updated: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  });

/** @internal */
export type Channel$Outbound = {
  id: number;
  created: string;
  description: string;
  hashedId: string;
  mediaCount: number;
  name: string;
  updated: string;
};

/** @internal */
export const Channel$outboundSchema: z.ZodType<
  Channel$Outbound,
  z.ZodTypeDef,
  Channel
> = z.object({
  id: z.number().int(),
  created: z.date().transform(v => v.toISOString()),
  description: z.string(),
  hashedId: z.string(),
  mediaCount: z.number().int(),
  name: z.string(),
  updated: z.date().transform(v => v.toISOString()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Channel$ {
  /** @deprecated use `Channel$inboundSchema` instead. */
  export const inboundSchema = Channel$inboundSchema;
  /** @deprecated use `Channel$outboundSchema` instead. */
  export const outboundSchema = Channel$outboundSchema;
  /** @deprecated use `Channel$Outbound` instead. */
  export type Outbound = Channel$Outbound;
}

export function channelToJSON(channel: Channel): string {
  return JSON.stringify(Channel$outboundSchema.parse(channel));
}

export function channelFromJSON(
  jsonString: string,
): SafeParseResult<Channel, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Channel$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Channel' from JSON`,
  );
}
