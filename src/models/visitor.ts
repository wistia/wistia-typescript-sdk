/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type Org = {
  name?: string | null | undefined;
  title?: string | null | undefined;
};

export type VisitorIdentity = {
  name?: string | undefined;
  email?: string | null | undefined;
  org?: Org | undefined;
};

export type VisitorUserAgentDetails = {
  browser?: string | undefined;
  browserVersion?: string | undefined;
  platform?: string | undefined;
  mobile?: boolean | undefined;
};

export type Visitor = {
  /**
   * A unique identifier for the visitor.
   */
  visitorKey?: string | undefined;
  /**
   * When the visitor was created.
   */
  createdAt?: Date | undefined;
  /**
   * The last time the visitor played a video.
   */
  lastActiveAt?: Date | undefined;
  /**
   * The event key for the last video play action.
   */
  lastEventKey?: string | undefined;
  /**
   * The total number of videos loaded by the visitor.
   */
  loadCount?: number | undefined;
  /**
   * The total number of videos played by the visitor.
   */
  playCount?: number | undefined;
  visitorIdentity?: VisitorIdentity | undefined;
  userAgentDetails?: VisitorUserAgentDetails | undefined;
};

/** @internal */
export const Org$inboundSchema: z.ZodType<Org, z.ZodTypeDef, unknown> = z
  .object({
    name: z.nullable(z.string()).optional(),
    title: z.nullable(z.string()).optional(),
  });

/** @internal */
export type Org$Outbound = {
  name?: string | null | undefined;
  title?: string | null | undefined;
};

/** @internal */
export const Org$outboundSchema: z.ZodType<Org$Outbound, z.ZodTypeDef, Org> = z
  .object({
    name: z.nullable(z.string()).optional(),
    title: z.nullable(z.string()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Org$ {
  /** @deprecated use `Org$inboundSchema` instead. */
  export const inboundSchema = Org$inboundSchema;
  /** @deprecated use `Org$outboundSchema` instead. */
  export const outboundSchema = Org$outboundSchema;
  /** @deprecated use `Org$Outbound` instead. */
  export type Outbound = Org$Outbound;
}

export function orgToJSON(org: Org): string {
  return JSON.stringify(Org$outboundSchema.parse(org));
}

export function orgFromJSON(
  jsonString: string,
): SafeParseResult<Org, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Org$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Org' from JSON`,
  );
}

/** @internal */
export const VisitorIdentity$inboundSchema: z.ZodType<
  VisitorIdentity,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string().optional(),
  email: z.nullable(z.string()).optional(),
  org: z.lazy(() => Org$inboundSchema).optional(),
});

/** @internal */
export type VisitorIdentity$Outbound = {
  name?: string | undefined;
  email?: string | null | undefined;
  org?: Org$Outbound | undefined;
};

/** @internal */
export const VisitorIdentity$outboundSchema: z.ZodType<
  VisitorIdentity$Outbound,
  z.ZodTypeDef,
  VisitorIdentity
> = z.object({
  name: z.string().optional(),
  email: z.nullable(z.string()).optional(),
  org: z.lazy(() => Org$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VisitorIdentity$ {
  /** @deprecated use `VisitorIdentity$inboundSchema` instead. */
  export const inboundSchema = VisitorIdentity$inboundSchema;
  /** @deprecated use `VisitorIdentity$outboundSchema` instead. */
  export const outboundSchema = VisitorIdentity$outboundSchema;
  /** @deprecated use `VisitorIdentity$Outbound` instead. */
  export type Outbound = VisitorIdentity$Outbound;
}

export function visitorIdentityToJSON(
  visitorIdentity: VisitorIdentity,
): string {
  return JSON.stringify(VisitorIdentity$outboundSchema.parse(visitorIdentity));
}

export function visitorIdentityFromJSON(
  jsonString: string,
): SafeParseResult<VisitorIdentity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => VisitorIdentity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'VisitorIdentity' from JSON`,
  );
}

/** @internal */
export const VisitorUserAgentDetails$inboundSchema: z.ZodType<
  VisitorUserAgentDetails,
  z.ZodTypeDef,
  unknown
> = z.object({
  browser: z.string().optional(),
  browser_version: z.string().optional(),
  platform: z.string().optional(),
  mobile: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    "browser_version": "browserVersion",
  });
});

/** @internal */
export type VisitorUserAgentDetails$Outbound = {
  browser?: string | undefined;
  browser_version?: string | undefined;
  platform?: string | undefined;
  mobile?: boolean | undefined;
};

/** @internal */
export const VisitorUserAgentDetails$outboundSchema: z.ZodType<
  VisitorUserAgentDetails$Outbound,
  z.ZodTypeDef,
  VisitorUserAgentDetails
> = z.object({
  browser: z.string().optional(),
  browserVersion: z.string().optional(),
  platform: z.string().optional(),
  mobile: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    browserVersion: "browser_version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VisitorUserAgentDetails$ {
  /** @deprecated use `VisitorUserAgentDetails$inboundSchema` instead. */
  export const inboundSchema = VisitorUserAgentDetails$inboundSchema;
  /** @deprecated use `VisitorUserAgentDetails$outboundSchema` instead. */
  export const outboundSchema = VisitorUserAgentDetails$outboundSchema;
  /** @deprecated use `VisitorUserAgentDetails$Outbound` instead. */
  export type Outbound = VisitorUserAgentDetails$Outbound;
}

export function visitorUserAgentDetailsToJSON(
  visitorUserAgentDetails: VisitorUserAgentDetails,
): string {
  return JSON.stringify(
    VisitorUserAgentDetails$outboundSchema.parse(visitorUserAgentDetails),
  );
}

export function visitorUserAgentDetailsFromJSON(
  jsonString: string,
): SafeParseResult<VisitorUserAgentDetails, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => VisitorUserAgentDetails$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'VisitorUserAgentDetails' from JSON`,
  );
}

/** @internal */
export const Visitor$inboundSchema: z.ZodType<Visitor, z.ZodTypeDef, unknown> =
  z.object({
    visitor_key: z.string().optional(),
    created_at: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ).optional(),
    last_active_at: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ).optional(),
    last_event_key: z.string().optional(),
    load_count: z.number().int().optional(),
    play_count: z.number().int().optional(),
    visitor_identity: z.lazy(() => VisitorIdentity$inboundSchema).optional(),
    user_agent_details: z.lazy(() => VisitorUserAgentDetails$inboundSchema)
      .optional(),
  }).transform((v) => {
    return remap$(v, {
      "visitor_key": "visitorKey",
      "created_at": "createdAt",
      "last_active_at": "lastActiveAt",
      "last_event_key": "lastEventKey",
      "load_count": "loadCount",
      "play_count": "playCount",
      "visitor_identity": "visitorIdentity",
      "user_agent_details": "userAgentDetails",
    });
  });

/** @internal */
export type Visitor$Outbound = {
  visitor_key?: string | undefined;
  created_at?: string | undefined;
  last_active_at?: string | undefined;
  last_event_key?: string | undefined;
  load_count?: number | undefined;
  play_count?: number | undefined;
  visitor_identity?: VisitorIdentity$Outbound | undefined;
  user_agent_details?: VisitorUserAgentDetails$Outbound | undefined;
};

/** @internal */
export const Visitor$outboundSchema: z.ZodType<
  Visitor$Outbound,
  z.ZodTypeDef,
  Visitor
> = z.object({
  visitorKey: z.string().optional(),
  createdAt: z.date().transform(v => v.toISOString()).optional(),
  lastActiveAt: z.date().transform(v => v.toISOString()).optional(),
  lastEventKey: z.string().optional(),
  loadCount: z.number().int().optional(),
  playCount: z.number().int().optional(),
  visitorIdentity: z.lazy(() => VisitorIdentity$outboundSchema).optional(),
  userAgentDetails: z.lazy(() => VisitorUserAgentDetails$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    visitorKey: "visitor_key",
    createdAt: "created_at",
    lastActiveAt: "last_active_at",
    lastEventKey: "last_event_key",
    loadCount: "load_count",
    playCount: "play_count",
    visitorIdentity: "visitor_identity",
    userAgentDetails: "user_agent_details",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Visitor$ {
  /** @deprecated use `Visitor$inboundSchema` instead. */
  export const inboundSchema = Visitor$inboundSchema;
  /** @deprecated use `Visitor$outboundSchema` instead. */
  export const outboundSchema = Visitor$outboundSchema;
  /** @deprecated use `Visitor$Outbound` instead. */
  export type Outbound = Visitor$Outbound;
}

export function visitorToJSON(visitor: Visitor): string {
  return JSON.stringify(Visitor$outboundSchema.parse(visitor));
}

export function visitorFromJSON(
  jsonString: string,
): SafeParseResult<Visitor, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Visitor$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Visitor' from JSON`,
  );
}
