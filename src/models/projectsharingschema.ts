/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type ProjectSharingSchemaShare = {
  id?: number | undefined;
  name?: string | undefined;
  type?: string | undefined;
  email?: string | undefined;
};

export type ProjectSharingSchemaProject = {
  id?: number | undefined;
  name?: string | undefined;
};

export type ProjectSharingSchema = {
  id?: number | undefined;
  isAdmin?: boolean | undefined;
  canShare?: boolean | undefined;
  canDownload?: boolean | undefined;
  canUpload?: boolean | undefined;
  share?: ProjectSharingSchemaShare | undefined;
  project?: ProjectSharingSchemaProject | undefined;
};

/** @internal */
export const ProjectSharingSchemaShare$inboundSchema: z.ZodType<
  ProjectSharingSchemaShare,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.number().int().optional(),
  name: z.string().optional(),
  type: z.string().optional(),
  email: z.string().optional(),
});

/** @internal */
export type ProjectSharingSchemaShare$Outbound = {
  id?: number | undefined;
  name?: string | undefined;
  type?: string | undefined;
  email?: string | undefined;
};

/** @internal */
export const ProjectSharingSchemaShare$outboundSchema: z.ZodType<
  ProjectSharingSchemaShare$Outbound,
  z.ZodTypeDef,
  ProjectSharingSchemaShare
> = z.object({
  id: z.number().int().optional(),
  name: z.string().optional(),
  type: z.string().optional(),
  email: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ProjectSharingSchemaShare$ {
  /** @deprecated use `ProjectSharingSchemaShare$inboundSchema` instead. */
  export const inboundSchema = ProjectSharingSchemaShare$inboundSchema;
  /** @deprecated use `ProjectSharingSchemaShare$outboundSchema` instead. */
  export const outboundSchema = ProjectSharingSchemaShare$outboundSchema;
  /** @deprecated use `ProjectSharingSchemaShare$Outbound` instead. */
  export type Outbound = ProjectSharingSchemaShare$Outbound;
}

export function projectSharingSchemaShareToJSON(
  projectSharingSchemaShare: ProjectSharingSchemaShare,
): string {
  return JSON.stringify(
    ProjectSharingSchemaShare$outboundSchema.parse(projectSharingSchemaShare),
  );
}

export function projectSharingSchemaShareFromJSON(
  jsonString: string,
): SafeParseResult<ProjectSharingSchemaShare, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ProjectSharingSchemaShare$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ProjectSharingSchemaShare' from JSON`,
  );
}

/** @internal */
export const ProjectSharingSchemaProject$inboundSchema: z.ZodType<
  ProjectSharingSchemaProject,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.number().int().optional(),
  name: z.string().optional(),
});

/** @internal */
export type ProjectSharingSchemaProject$Outbound = {
  id?: number | undefined;
  name?: string | undefined;
};

/** @internal */
export const ProjectSharingSchemaProject$outboundSchema: z.ZodType<
  ProjectSharingSchemaProject$Outbound,
  z.ZodTypeDef,
  ProjectSharingSchemaProject
> = z.object({
  id: z.number().int().optional(),
  name: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ProjectSharingSchemaProject$ {
  /** @deprecated use `ProjectSharingSchemaProject$inboundSchema` instead. */
  export const inboundSchema = ProjectSharingSchemaProject$inboundSchema;
  /** @deprecated use `ProjectSharingSchemaProject$outboundSchema` instead. */
  export const outboundSchema = ProjectSharingSchemaProject$outboundSchema;
  /** @deprecated use `ProjectSharingSchemaProject$Outbound` instead. */
  export type Outbound = ProjectSharingSchemaProject$Outbound;
}

export function projectSharingSchemaProjectToJSON(
  projectSharingSchemaProject: ProjectSharingSchemaProject,
): string {
  return JSON.stringify(
    ProjectSharingSchemaProject$outboundSchema.parse(
      projectSharingSchemaProject,
    ),
  );
}

export function projectSharingSchemaProjectFromJSON(
  jsonString: string,
): SafeParseResult<ProjectSharingSchemaProject, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ProjectSharingSchemaProject$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ProjectSharingSchemaProject' from JSON`,
  );
}

/** @internal */
export const ProjectSharingSchema$inboundSchema: z.ZodType<
  ProjectSharingSchema,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.number().int().optional(),
  isAdmin: z.boolean().optional(),
  canShare: z.boolean().optional(),
  canDownload: z.boolean().optional(),
  canUpload: z.boolean().optional(),
  share: z.lazy(() => ProjectSharingSchemaShare$inboundSchema).optional(),
  project: z.lazy(() => ProjectSharingSchemaProject$inboundSchema).optional(),
});

/** @internal */
export type ProjectSharingSchema$Outbound = {
  id?: number | undefined;
  isAdmin?: boolean | undefined;
  canShare?: boolean | undefined;
  canDownload?: boolean | undefined;
  canUpload?: boolean | undefined;
  share?: ProjectSharingSchemaShare$Outbound | undefined;
  project?: ProjectSharingSchemaProject$Outbound | undefined;
};

/** @internal */
export const ProjectSharingSchema$outboundSchema: z.ZodType<
  ProjectSharingSchema$Outbound,
  z.ZodTypeDef,
  ProjectSharingSchema
> = z.object({
  id: z.number().int().optional(),
  isAdmin: z.boolean().optional(),
  canShare: z.boolean().optional(),
  canDownload: z.boolean().optional(),
  canUpload: z.boolean().optional(),
  share: z.lazy(() => ProjectSharingSchemaShare$outboundSchema).optional(),
  project: z.lazy(() => ProjectSharingSchemaProject$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ProjectSharingSchema$ {
  /** @deprecated use `ProjectSharingSchema$inboundSchema` instead. */
  export const inboundSchema = ProjectSharingSchema$inboundSchema;
  /** @deprecated use `ProjectSharingSchema$outboundSchema` instead. */
  export const outboundSchema = ProjectSharingSchema$outboundSchema;
  /** @deprecated use `ProjectSharingSchema$Outbound` instead. */
  export type Outbound = ProjectSharingSchema$Outbound;
}

export function projectSharingSchemaToJSON(
  projectSharingSchema: ProjectSharingSchema,
): string {
  return JSON.stringify(
    ProjectSharingSchema$outboundSchema.parse(projectSharingSchema),
  );
}

export function projectSharingSchemaFromJSON(
  jsonString: string,
): SafeParseResult<ProjectSharingSchema, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ProjectSharingSchema$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ProjectSharingSchema' from JSON`,
  );
}
