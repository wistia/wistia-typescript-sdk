/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * A flag indicating whether or not the project is enabled for public access. Set to “1” to enable and “0” to disable.
 */
export const UpdateProjectPublicEnum = {
  Zero: "0",
  One: "1",
} as const;
/**
 * A flag indicating whether or not the project is enabled for public access. Set to “1” to enable and “0” to disable.
 */
export type UpdateProjectPublicEnum = ClosedEnum<
  typeof UpdateProjectPublicEnum
>;

export type UpdateProjectPublicUnion = UpdateProjectPublicEnum | boolean;

export type UpdateProject = {
  /**
   * The project’s new name.
   */
  name?: string | undefined;
  /**
   * The project’s new description.
   */
  description?: string | undefined;
  /**
   * Whether anonymous users can upload media to the project.
   */
  anonymousCanUpload?: boolean | undefined;
  /**
   * Whether anonymous users can download media from the project.
   */
  anonymousCanDownload?: boolean | undefined;
  public?: UpdateProjectPublicEnum | boolean | undefined;
};

/** @internal */
export const UpdateProjectPublicEnum$inboundSchema: z.ZodNativeEnum<
  typeof UpdateProjectPublicEnum
> = z.nativeEnum(UpdateProjectPublicEnum);

/** @internal */
export const UpdateProjectPublicEnum$outboundSchema: z.ZodNativeEnum<
  typeof UpdateProjectPublicEnum
> = UpdateProjectPublicEnum$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateProjectPublicEnum$ {
  /** @deprecated use `UpdateProjectPublicEnum$inboundSchema` instead. */
  export const inboundSchema = UpdateProjectPublicEnum$inboundSchema;
  /** @deprecated use `UpdateProjectPublicEnum$outboundSchema` instead. */
  export const outboundSchema = UpdateProjectPublicEnum$outboundSchema;
}

/** @internal */
export const UpdateProjectPublicUnion$inboundSchema: z.ZodType<
  UpdateProjectPublicUnion,
  z.ZodTypeDef,
  unknown
> = z.union([UpdateProjectPublicEnum$inboundSchema, z.boolean()]);

/** @internal */
export type UpdateProjectPublicUnion$Outbound = string | boolean;

/** @internal */
export const UpdateProjectPublicUnion$outboundSchema: z.ZodType<
  UpdateProjectPublicUnion$Outbound,
  z.ZodTypeDef,
  UpdateProjectPublicUnion
> = z.union([UpdateProjectPublicEnum$outboundSchema, z.boolean()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateProjectPublicUnion$ {
  /** @deprecated use `UpdateProjectPublicUnion$inboundSchema` instead. */
  export const inboundSchema = UpdateProjectPublicUnion$inboundSchema;
  /** @deprecated use `UpdateProjectPublicUnion$outboundSchema` instead. */
  export const outboundSchema = UpdateProjectPublicUnion$outboundSchema;
  /** @deprecated use `UpdateProjectPublicUnion$Outbound` instead. */
  export type Outbound = UpdateProjectPublicUnion$Outbound;
}

export function updateProjectPublicUnionToJSON(
  updateProjectPublicUnion: UpdateProjectPublicUnion,
): string {
  return JSON.stringify(
    UpdateProjectPublicUnion$outboundSchema.parse(updateProjectPublicUnion),
  );
}

export function updateProjectPublicUnionFromJSON(
  jsonString: string,
): SafeParseResult<UpdateProjectPublicUnion, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateProjectPublicUnion$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateProjectPublicUnion' from JSON`,
  );
}

/** @internal */
export const UpdateProject$inboundSchema: z.ZodType<
  UpdateProject,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string().optional(),
  description: z.string().optional(),
  anonymousCanUpload: z.boolean().optional(),
  anonymousCanDownload: z.boolean().optional(),
  public: z.union([UpdateProjectPublicEnum$inboundSchema, z.boolean()])
    .optional(),
});

/** @internal */
export type UpdateProject$Outbound = {
  name?: string | undefined;
  description?: string | undefined;
  anonymousCanUpload?: boolean | undefined;
  anonymousCanDownload?: boolean | undefined;
  public?: string | boolean | undefined;
};

/** @internal */
export const UpdateProject$outboundSchema: z.ZodType<
  UpdateProject$Outbound,
  z.ZodTypeDef,
  UpdateProject
> = z.object({
  name: z.string().optional(),
  description: z.string().optional(),
  anonymousCanUpload: z.boolean().optional(),
  anonymousCanDownload: z.boolean().optional(),
  public: z.union([UpdateProjectPublicEnum$outboundSchema, z.boolean()])
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateProject$ {
  /** @deprecated use `UpdateProject$inboundSchema` instead. */
  export const inboundSchema = UpdateProject$inboundSchema;
  /** @deprecated use `UpdateProject$outboundSchema` instead. */
  export const outboundSchema = UpdateProject$outboundSchema;
  /** @deprecated use `UpdateProject$Outbound` instead. */
  export type Outbound = UpdateProject$Outbound;
}

export function updateProjectToJSON(updateProject: UpdateProject): string {
  return JSON.stringify(UpdateProject$outboundSchema.parse(updateProject));
}

export function updateProjectFromJSON(
  jsonString: string,
): SafeParseResult<UpdateProject, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateProject$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateProject' from JSON`,
  );
}
