/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type Authorization = {
  /**
   * The type of object the permission is being performed on, only media is currently supported
   */
  type: string;
  /**
   * The hashed if of the object the permissions are being performed on.
   */
  id: string;
  /**
   * The types of permissions, currently only supports edit-transcripts
   */
  permissions: Array<string>;
};

export type ExpiringAccessTokenInput = {
  /**
   * an ISO8601 string of when the token will expire, defaults to two days from creation
   */
  expiresAt?: string | undefined;
  /**
   * a list of authorizations the token will have
   */
  authorizations?: Array<Authorization> | undefined;
};

/** @internal */
export const Authorization$inboundSchema: z.ZodType<
  Authorization,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.string(),
  id: z.string(),
  permissions: z.array(z.string()),
});

/** @internal */
export type Authorization$Outbound = {
  type: string;
  id: string;
  permissions: Array<string>;
};

/** @internal */
export const Authorization$outboundSchema: z.ZodType<
  Authorization$Outbound,
  z.ZodTypeDef,
  Authorization
> = z.object({
  type: z.string(),
  id: z.string(),
  permissions: z.array(z.string()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Authorization$ {
  /** @deprecated use `Authorization$inboundSchema` instead. */
  export const inboundSchema = Authorization$inboundSchema;
  /** @deprecated use `Authorization$outboundSchema` instead. */
  export const outboundSchema = Authorization$outboundSchema;
  /** @deprecated use `Authorization$Outbound` instead. */
  export type Outbound = Authorization$Outbound;
}

export function authorizationToJSON(authorization: Authorization): string {
  return JSON.stringify(Authorization$outboundSchema.parse(authorization));
}

export function authorizationFromJSON(
  jsonString: string,
): SafeParseResult<Authorization, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Authorization$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Authorization' from JSON`,
  );
}

/** @internal */
export const ExpiringAccessTokenInput$inboundSchema: z.ZodType<
  ExpiringAccessTokenInput,
  z.ZodTypeDef,
  unknown
> = z.object({
  expires_at: z.string().optional(),
  authorizations: z.array(z.lazy(() => Authorization$inboundSchema)).optional(),
}).transform((v) => {
  return remap$(v, {
    "expires_at": "expiresAt",
  });
});

/** @internal */
export type ExpiringAccessTokenInput$Outbound = {
  expires_at?: string | undefined;
  authorizations?: Array<Authorization$Outbound> | undefined;
};

/** @internal */
export const ExpiringAccessTokenInput$outboundSchema: z.ZodType<
  ExpiringAccessTokenInput$Outbound,
  z.ZodTypeDef,
  ExpiringAccessTokenInput
> = z.object({
  expiresAt: z.string().optional(),
  authorizations: z.array(z.lazy(() => Authorization$outboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    expiresAt: "expires_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ExpiringAccessTokenInput$ {
  /** @deprecated use `ExpiringAccessTokenInput$inboundSchema` instead. */
  export const inboundSchema = ExpiringAccessTokenInput$inboundSchema;
  /** @deprecated use `ExpiringAccessTokenInput$outboundSchema` instead. */
  export const outboundSchema = ExpiringAccessTokenInput$outboundSchema;
  /** @deprecated use `ExpiringAccessTokenInput$Outbound` instead. */
  export type Outbound = ExpiringAccessTokenInput$Outbound;
}

export function expiringAccessTokenInputToJSON(
  expiringAccessTokenInput: ExpiringAccessTokenInput,
): string {
  return JSON.stringify(
    ExpiringAccessTokenInput$outboundSchema.parse(expiringAccessTokenInput),
  );
}

export function expiringAccessTokenInputFromJSON(
  jsonString: string,
): SafeParseResult<ExpiringAccessTokenInput, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ExpiringAccessTokenInput$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ExpiringAccessTokenInput' from JSON`,
  );
}
