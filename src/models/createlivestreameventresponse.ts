/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type CreateLiveStreamEventResponse = {
  /**
   * The hashed ID of the created live stream event
   */
  id: string;
  /**
   * Link for the audience to join the event
   */
  audienceLink: string;
  /**
   * Link for the host to manage the event
   */
  hostLink: string;
};

/** @internal */
export const CreateLiveStreamEventResponse$inboundSchema: z.ZodType<
  CreateLiveStreamEventResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  audience_link: z.string(),
  host_link: z.string(),
}).transform((v) => {
  return remap$(v, {
    "audience_link": "audienceLink",
    "host_link": "hostLink",
  });
});

/** @internal */
export type CreateLiveStreamEventResponse$Outbound = {
  id: string;
  audience_link: string;
  host_link: string;
};

/** @internal */
export const CreateLiveStreamEventResponse$outboundSchema: z.ZodType<
  CreateLiveStreamEventResponse$Outbound,
  z.ZodTypeDef,
  CreateLiveStreamEventResponse
> = z.object({
  id: z.string(),
  audienceLink: z.string(),
  hostLink: z.string(),
}).transform((v) => {
  return remap$(v, {
    audienceLink: "audience_link",
    hostLink: "host_link",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateLiveStreamEventResponse$ {
  /** @deprecated use `CreateLiveStreamEventResponse$inboundSchema` instead. */
  export const inboundSchema = CreateLiveStreamEventResponse$inboundSchema;
  /** @deprecated use `CreateLiveStreamEventResponse$outboundSchema` instead. */
  export const outboundSchema = CreateLiveStreamEventResponse$outboundSchema;
  /** @deprecated use `CreateLiveStreamEventResponse$Outbound` instead. */
  export type Outbound = CreateLiveStreamEventResponse$Outbound;
}

export function createLiveStreamEventResponseToJSON(
  createLiveStreamEventResponse: CreateLiveStreamEventResponse,
): string {
  return JSON.stringify(
    CreateLiveStreamEventResponse$outboundSchema.parse(
      createLiveStreamEventResponse,
    ),
  );
}

export function createLiveStreamEventResponseFromJSON(
  jsonString: string,
): SafeParseResult<CreateLiveStreamEventResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateLiveStreamEventResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateLiveStreamEventResponse' from JSON`,
  );
}
