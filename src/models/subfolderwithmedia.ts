/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  Media,
  Media$inboundSchema,
  Media$Outbound,
  Media$outboundSchema,
} from "./media.js";

/**
 * A subfolder with its contained media files.
 */
export type SubfolderWithMedia = {
  /**
   * A unique alphanumeric identifier for this subfolder.
   */
  hashedId: string;
  /**
   * The display name of the subfolder.
   */
  name?: string | null | undefined;
  /**
   * A description for the subfolder.
   */
  description?: string | null | undefined;
  /**
   * The position of this subfolder within its project, used for ordering.
   */
  position: number | null;
  /**
   * The date when the subfolder was created.
   */
  created: Date | null;
  /**
   * The date when the subfolder was last modified.
   */
  updated: Date | null;
  /**
   * Array of media files contained in this subfolder.
   */
  medias?: Array<Media> | undefined;
};

/** @internal */
export const SubfolderWithMedia$inboundSchema: z.ZodType<
  SubfolderWithMedia,
  z.ZodTypeDef,
  unknown
> = z.object({
  hashed_id: z.string(),
  name: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  position: z.nullable(z.number().int()),
  created: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ),
  updated: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ),
  medias: z.array(Media$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "hashed_id": "hashedId",
  });
});

/** @internal */
export type SubfolderWithMedia$Outbound = {
  hashed_id: string;
  name?: string | null | undefined;
  description?: string | null | undefined;
  position: number | null;
  created: string | null;
  updated: string | null;
  medias?: Array<Media$Outbound> | undefined;
};

/** @internal */
export const SubfolderWithMedia$outboundSchema: z.ZodType<
  SubfolderWithMedia$Outbound,
  z.ZodTypeDef,
  SubfolderWithMedia
> = z.object({
  hashedId: z.string(),
  name: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  position: z.nullable(z.number().int()),
  created: z.nullable(z.date().transform(v => v.toISOString())),
  updated: z.nullable(z.date().transform(v => v.toISOString())),
  medias: z.array(Media$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    hashedId: "hashed_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubfolderWithMedia$ {
  /** @deprecated use `SubfolderWithMedia$inboundSchema` instead. */
  export const inboundSchema = SubfolderWithMedia$inboundSchema;
  /** @deprecated use `SubfolderWithMedia$outboundSchema` instead. */
  export const outboundSchema = SubfolderWithMedia$outboundSchema;
  /** @deprecated use `SubfolderWithMedia$Outbound` instead. */
  export type Outbound = SubfolderWithMedia$Outbound;
}

export function subfolderWithMediaToJSON(
  subfolderWithMedia: SubfolderWithMedia,
): string {
  return JSON.stringify(
    SubfolderWithMedia$outboundSchema.parse(subfolderWithMedia),
  );
}

export function subfolderWithMediaFromJSON(
  jsonString: string,
): SafeParseResult<SubfolderWithMedia, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SubfolderWithMedia$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SubfolderWithMedia' from JSON`,
  );
}
