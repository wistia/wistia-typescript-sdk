/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type ExpiringAccessTokenResponse = {
  /**
   * A token which can be used to authorize requests to Wistia. Currently only for doing transcript embeds.
   */
  token?: string | undefined;
};

/** @internal */
export const ExpiringAccessTokenResponse$inboundSchema: z.ZodType<
  ExpiringAccessTokenResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  token: z.string().optional(),
});

/** @internal */
export type ExpiringAccessTokenResponse$Outbound = {
  token?: string | undefined;
};

/** @internal */
export const ExpiringAccessTokenResponse$outboundSchema: z.ZodType<
  ExpiringAccessTokenResponse$Outbound,
  z.ZodTypeDef,
  ExpiringAccessTokenResponse
> = z.object({
  token: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ExpiringAccessTokenResponse$ {
  /** @deprecated use `ExpiringAccessTokenResponse$inboundSchema` instead. */
  export const inboundSchema = ExpiringAccessTokenResponse$inboundSchema;
  /** @deprecated use `ExpiringAccessTokenResponse$outboundSchema` instead. */
  export const outboundSchema = ExpiringAccessTokenResponse$outboundSchema;
  /** @deprecated use `ExpiringAccessTokenResponse$Outbound` instead. */
  export type Outbound = ExpiringAccessTokenResponse$Outbound;
}

export function expiringAccessTokenResponseToJSON(
  expiringAccessTokenResponse: ExpiringAccessTokenResponse,
): string {
  return JSON.stringify(
    ExpiringAccessTokenResponse$outboundSchema.parse(
      expiringAccessTokenResponse,
    ),
  );
}

export function expiringAccessTokenResponseFromJSON(
  jsonString: string,
): SafeParseResult<ExpiringAccessTokenResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ExpiringAccessTokenResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ExpiringAccessTokenResponse' from JSON`,
  );
}
