/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type ProjectSharingDetailShare = {
  id?: number | undefined;
  name?: string | undefined;
  type?: string | undefined;
  email?: string | undefined;
};

export type ProjectSharingDetailProject = {
  id?: number | undefined;
  name?: string | undefined;
};

export type ProjectSharingDetail = {
  id?: number | undefined;
  isAdmin?: boolean | undefined;
  canShare?: boolean | undefined;
  canDownload?: boolean | undefined;
  canUpload?: boolean | undefined;
  share?: ProjectSharingDetailShare | undefined;
  project?: ProjectSharingDetailProject | undefined;
};

/** @internal */
export const ProjectSharingDetailShare$inboundSchema: z.ZodType<
  ProjectSharingDetailShare,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.number().int().optional(),
  name: z.string().optional(),
  type: z.string().optional(),
  email: z.string().optional(),
});

/** @internal */
export type ProjectSharingDetailShare$Outbound = {
  id?: number | undefined;
  name?: string | undefined;
  type?: string | undefined;
  email?: string | undefined;
};

/** @internal */
export const ProjectSharingDetailShare$outboundSchema: z.ZodType<
  ProjectSharingDetailShare$Outbound,
  z.ZodTypeDef,
  ProjectSharingDetailShare
> = z.object({
  id: z.number().int().optional(),
  name: z.string().optional(),
  type: z.string().optional(),
  email: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ProjectSharingDetailShare$ {
  /** @deprecated use `ProjectSharingDetailShare$inboundSchema` instead. */
  export const inboundSchema = ProjectSharingDetailShare$inboundSchema;
  /** @deprecated use `ProjectSharingDetailShare$outboundSchema` instead. */
  export const outboundSchema = ProjectSharingDetailShare$outboundSchema;
  /** @deprecated use `ProjectSharingDetailShare$Outbound` instead. */
  export type Outbound = ProjectSharingDetailShare$Outbound;
}

export function projectSharingDetailShareToJSON(
  projectSharingDetailShare: ProjectSharingDetailShare,
): string {
  return JSON.stringify(
    ProjectSharingDetailShare$outboundSchema.parse(projectSharingDetailShare),
  );
}

export function projectSharingDetailShareFromJSON(
  jsonString: string,
): SafeParseResult<ProjectSharingDetailShare, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ProjectSharingDetailShare$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ProjectSharingDetailShare' from JSON`,
  );
}

/** @internal */
export const ProjectSharingDetailProject$inboundSchema: z.ZodType<
  ProjectSharingDetailProject,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.number().int().optional(),
  name: z.string().optional(),
});

/** @internal */
export type ProjectSharingDetailProject$Outbound = {
  id?: number | undefined;
  name?: string | undefined;
};

/** @internal */
export const ProjectSharingDetailProject$outboundSchema: z.ZodType<
  ProjectSharingDetailProject$Outbound,
  z.ZodTypeDef,
  ProjectSharingDetailProject
> = z.object({
  id: z.number().int().optional(),
  name: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ProjectSharingDetailProject$ {
  /** @deprecated use `ProjectSharingDetailProject$inboundSchema` instead. */
  export const inboundSchema = ProjectSharingDetailProject$inboundSchema;
  /** @deprecated use `ProjectSharingDetailProject$outboundSchema` instead. */
  export const outboundSchema = ProjectSharingDetailProject$outboundSchema;
  /** @deprecated use `ProjectSharingDetailProject$Outbound` instead. */
  export type Outbound = ProjectSharingDetailProject$Outbound;
}

export function projectSharingDetailProjectToJSON(
  projectSharingDetailProject: ProjectSharingDetailProject,
): string {
  return JSON.stringify(
    ProjectSharingDetailProject$outboundSchema.parse(
      projectSharingDetailProject,
    ),
  );
}

export function projectSharingDetailProjectFromJSON(
  jsonString: string,
): SafeParseResult<ProjectSharingDetailProject, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ProjectSharingDetailProject$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ProjectSharingDetailProject' from JSON`,
  );
}

/** @internal */
export const ProjectSharingDetail$inboundSchema: z.ZodType<
  ProjectSharingDetail,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.number().int().optional(),
  isAdmin: z.boolean().optional(),
  canShare: z.boolean().optional(),
  canDownload: z.boolean().optional(),
  canUpload: z.boolean().optional(),
  share: z.lazy(() => ProjectSharingDetailShare$inboundSchema).optional(),
  project: z.lazy(() => ProjectSharingDetailProject$inboundSchema).optional(),
});

/** @internal */
export type ProjectSharingDetail$Outbound = {
  id?: number | undefined;
  isAdmin?: boolean | undefined;
  canShare?: boolean | undefined;
  canDownload?: boolean | undefined;
  canUpload?: boolean | undefined;
  share?: ProjectSharingDetailShare$Outbound | undefined;
  project?: ProjectSharingDetailProject$Outbound | undefined;
};

/** @internal */
export const ProjectSharingDetail$outboundSchema: z.ZodType<
  ProjectSharingDetail$Outbound,
  z.ZodTypeDef,
  ProjectSharingDetail
> = z.object({
  id: z.number().int().optional(),
  isAdmin: z.boolean().optional(),
  canShare: z.boolean().optional(),
  canDownload: z.boolean().optional(),
  canUpload: z.boolean().optional(),
  share: z.lazy(() => ProjectSharingDetailShare$outboundSchema).optional(),
  project: z.lazy(() => ProjectSharingDetailProject$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ProjectSharingDetail$ {
  /** @deprecated use `ProjectSharingDetail$inboundSchema` instead. */
  export const inboundSchema = ProjectSharingDetail$inboundSchema;
  /** @deprecated use `ProjectSharingDetail$outboundSchema` instead. */
  export const outboundSchema = ProjectSharingDetail$outboundSchema;
  /** @deprecated use `ProjectSharingDetail$Outbound` instead. */
  export type Outbound = ProjectSharingDetail$Outbound;
}

export function projectSharingDetailToJSON(
  projectSharingDetail: ProjectSharingDetail,
): string {
  return JSON.stringify(
    ProjectSharingDetail$outboundSchema.parse(projectSharingDetail),
  );
}

export function projectSharingDetailFromJSON(
  jsonString: string,
): SafeParseResult<ProjectSharingDetail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ProjectSharingDetail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ProjectSharingDetail' from JSON`,
  );
}
