/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { WistiaError } from "./wistiaerror.js";

/**
 * Validation errors
 */
export type PutLiveStreamEventsIdUnprocessableEntityErrorData = {
  errors?: Array<string> | undefined;
};

/**
 * Validation errors
 */
export class PutLiveStreamEventsIdUnprocessableEntityError extends WistiaError {
  errors?: Array<string> | undefined;

  /** The original data that was passed to this error instance. */
  data$: PutLiveStreamEventsIdUnprocessableEntityErrorData;

  constructor(
    err: PutLiveStreamEventsIdUnprocessableEntityErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    if (err.errors != null) this.errors = err.errors;

    this.name = "PutLiveStreamEventsIdUnprocessableEntityError";
  }
}

/** @internal */
export const PutLiveStreamEventsIdUnprocessableEntityError$inboundSchema:
  z.ZodType<
    PutLiveStreamEventsIdUnprocessableEntityError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    errors: z.array(z.string()).optional(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new PutLiveStreamEventsIdUnprocessableEntityError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type PutLiveStreamEventsIdUnprocessableEntityError$Outbound = {
  errors?: Array<string> | undefined;
};

/** @internal */
export const PutLiveStreamEventsIdUnprocessableEntityError$outboundSchema:
  z.ZodType<
    PutLiveStreamEventsIdUnprocessableEntityError$Outbound,
    z.ZodTypeDef,
    PutLiveStreamEventsIdUnprocessableEntityError
  > = z.instanceof(PutLiveStreamEventsIdUnprocessableEntityError)
    .transform(v => v.data$)
    .pipe(z.object({
      errors: z.array(z.string()).optional(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutLiveStreamEventsIdUnprocessableEntityError$ {
  /** @deprecated use `PutLiveStreamEventsIdUnprocessableEntityError$inboundSchema` instead. */
  export const inboundSchema =
    PutLiveStreamEventsIdUnprocessableEntityError$inboundSchema;
  /** @deprecated use `PutLiveStreamEventsIdUnprocessableEntityError$outboundSchema` instead. */
  export const outboundSchema =
    PutLiveStreamEventsIdUnprocessableEntityError$outboundSchema;
  /** @deprecated use `PutLiveStreamEventsIdUnprocessableEntityError$Outbound` instead. */
  export type Outbound = PutLiveStreamEventsIdUnprocessableEntityError$Outbound;
}
