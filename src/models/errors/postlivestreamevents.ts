/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { WistiaError } from "./wistiaerror.js";

/**
 * Internal server error during event creation
 */
export type InternalServerErrorData = {
  errors?: Array<string> | undefined;
};

/**
 * Internal server error during event creation
 */
export class InternalServerError extends WistiaError {
  errors?: Array<string> | undefined;

  /** The original data that was passed to this error instance. */
  data$: InternalServerErrorData;

  constructor(
    err: InternalServerErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    if (err.errors != null) this.errors = err.errors;

    this.name = "InternalServerError";
  }
}

/**
 * Validation errors
 */
export type PostLiveStreamEventsUnprocessableEntityErrorData = {
  errors?: Array<string> | undefined;
};

/**
 * Validation errors
 */
export class PostLiveStreamEventsUnprocessableEntityError extends WistiaError {
  errors?: Array<string> | undefined;

  /** The original data that was passed to this error instance. */
  data$: PostLiveStreamEventsUnprocessableEntityErrorData;

  constructor(
    err: PostLiveStreamEventsUnprocessableEntityErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    if (err.errors != null) this.errors = err.errors;

    this.name = "PostLiveStreamEventsUnprocessableEntityError";
  }
}

/**
 * Live streaming feature not available
 */
export type PostLiveStreamEventsForbiddenErrorData = {
  error?: string | undefined;
};

/**
 * Live streaming feature not available
 */
export class PostLiveStreamEventsForbiddenError extends WistiaError {
  error?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: PostLiveStreamEventsForbiddenErrorData;

  constructor(
    err: PostLiveStreamEventsForbiddenErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    if (err.error != null) this.error = err.error;

    this.name = "PostLiveStreamEventsForbiddenError";
  }
}

/** @internal */
export const InternalServerError$inboundSchema: z.ZodType<
  InternalServerError,
  z.ZodTypeDef,
  unknown
> = z.object({
  errors: z.array(z.string()).optional(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new InternalServerError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type InternalServerError$Outbound = {
  errors?: Array<string> | undefined;
};

/** @internal */
export const InternalServerError$outboundSchema: z.ZodType<
  InternalServerError$Outbound,
  z.ZodTypeDef,
  InternalServerError
> = z.instanceof(InternalServerError)
  .transform(v => v.data$)
  .pipe(z.object({
    errors: z.array(z.string()).optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InternalServerError$ {
  /** @deprecated use `InternalServerError$inboundSchema` instead. */
  export const inboundSchema = InternalServerError$inboundSchema;
  /** @deprecated use `InternalServerError$outboundSchema` instead. */
  export const outboundSchema = InternalServerError$outboundSchema;
  /** @deprecated use `InternalServerError$Outbound` instead. */
  export type Outbound = InternalServerError$Outbound;
}

/** @internal */
export const PostLiveStreamEventsUnprocessableEntityError$inboundSchema:
  z.ZodType<
    PostLiveStreamEventsUnprocessableEntityError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    errors: z.array(z.string()).optional(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new PostLiveStreamEventsUnprocessableEntityError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type PostLiveStreamEventsUnprocessableEntityError$Outbound = {
  errors?: Array<string> | undefined;
};

/** @internal */
export const PostLiveStreamEventsUnprocessableEntityError$outboundSchema:
  z.ZodType<
    PostLiveStreamEventsUnprocessableEntityError$Outbound,
    z.ZodTypeDef,
    PostLiveStreamEventsUnprocessableEntityError
  > = z.instanceof(PostLiveStreamEventsUnprocessableEntityError)
    .transform(v => v.data$)
    .pipe(z.object({
      errors: z.array(z.string()).optional(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostLiveStreamEventsUnprocessableEntityError$ {
  /** @deprecated use `PostLiveStreamEventsUnprocessableEntityError$inboundSchema` instead. */
  export const inboundSchema =
    PostLiveStreamEventsUnprocessableEntityError$inboundSchema;
  /** @deprecated use `PostLiveStreamEventsUnprocessableEntityError$outboundSchema` instead. */
  export const outboundSchema =
    PostLiveStreamEventsUnprocessableEntityError$outboundSchema;
  /** @deprecated use `PostLiveStreamEventsUnprocessableEntityError$Outbound` instead. */
  export type Outbound = PostLiveStreamEventsUnprocessableEntityError$Outbound;
}

/** @internal */
export const PostLiveStreamEventsForbiddenError$inboundSchema: z.ZodType<
  PostLiveStreamEventsForbiddenError,
  z.ZodTypeDef,
  unknown
> = z.object({
  error: z.string().optional(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new PostLiveStreamEventsForbiddenError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type PostLiveStreamEventsForbiddenError$Outbound = {
  error?: string | undefined;
};

/** @internal */
export const PostLiveStreamEventsForbiddenError$outboundSchema: z.ZodType<
  PostLiveStreamEventsForbiddenError$Outbound,
  z.ZodTypeDef,
  PostLiveStreamEventsForbiddenError
> = z.instanceof(PostLiveStreamEventsForbiddenError)
  .transform(v => v.data$)
  .pipe(z.object({
    error: z.string().optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostLiveStreamEventsForbiddenError$ {
  /** @deprecated use `PostLiveStreamEventsForbiddenError$inboundSchema` instead. */
  export const inboundSchema = PostLiveStreamEventsForbiddenError$inboundSchema;
  /** @deprecated use `PostLiveStreamEventsForbiddenError$outboundSchema` instead. */
  export const outboundSchema =
    PostLiveStreamEventsForbiddenError$outboundSchema;
  /** @deprecated use `PostLiveStreamEventsForbiddenError$Outbound` instead. */
  export type Outbound = PostLiveStreamEventsForbiddenError$Outbound;
}
