/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import * as models from "../index.js";
import { WistiaError } from "./wistiaerror.js";

/**
 * Unprocessible entity, parameters provided were invalid.
 */
export type FourHundredAndTwentyTwoErrorData = {
  /**
   * Contains a summary of what fields had errors and the errors they had.
   */
  errors?: models.Errors | undefined;
};

/**
 * Unprocessible entity, parameters provided were invalid.
 */
export class FourHundredAndTwentyTwoError extends WistiaError {
  /**
   * Contains a summary of what fields had errors and the errors they had.
   */
  errors?: models.Errors | undefined;

  /** The original data that was passed to this error instance. */
  data$: FourHundredAndTwentyTwoErrorData;

  constructor(
    err: FourHundredAndTwentyTwoErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    if (err.errors != null) this.errors = err.errors;

    this.name = "FourHundredAndTwentyTwoError";
  }
}

/** @internal */
export const FourHundredAndTwentyTwoError$inboundSchema: z.ZodType<
  FourHundredAndTwentyTwoError,
  z.ZodTypeDef,
  unknown
> = z.object({
  errors: z.lazy(() => models.Errors$inboundSchema).optional(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new FourHundredAndTwentyTwoError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type FourHundredAndTwentyTwoError$Outbound = {
  errors?: models.Errors$Outbound | undefined;
};

/** @internal */
export const FourHundredAndTwentyTwoError$outboundSchema: z.ZodType<
  FourHundredAndTwentyTwoError$Outbound,
  z.ZodTypeDef,
  FourHundredAndTwentyTwoError
> = z.instanceof(FourHundredAndTwentyTwoError)
  .transform(v => v.data$)
  .pipe(z.object({
    errors: z.lazy(() => models.Errors$outboundSchema).optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FourHundredAndTwentyTwoError$ {
  /** @deprecated use `FourHundredAndTwentyTwoError$inboundSchema` instead. */
  export const inboundSchema = FourHundredAndTwentyTwoError$inboundSchema;
  /** @deprecated use `FourHundredAndTwentyTwoError$outboundSchema` instead. */
  export const outboundSchema = FourHundredAndTwentyTwoError$outboundSchema;
  /** @deprecated use `FourHundredAndTwentyTwoError$Outbound` instead. */
  export type Outbound = FourHundredAndTwentyTwoError$Outbound;
}
