/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { WistiaError } from "./wistiaerror.js";

/**
 * Method not allowed, e.g. trying to copy archived media.
 */
export type MethodNotAllowedErrorData = {
  error?: string | undefined;
};

/**
 * Method not allowed, e.g. trying to copy archived media.
 */
export class MethodNotAllowedError extends WistiaError {
  error?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: MethodNotAllowedErrorData;

  constructor(
    err: MethodNotAllowedErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    if (err.error != null) this.error = err.error;

    this.name = "MethodNotAllowedError";
  }
}

/**
 * Bad request, e.g. copy failure.
 */
export type PostMediasMediaHashedIdCopyBadRequestErrorData = {
  error?: string | undefined;
};

/**
 * Bad request, e.g. copy failure.
 */
export class PostMediasMediaHashedIdCopyBadRequestError extends WistiaError {
  error?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: PostMediasMediaHashedIdCopyBadRequestErrorData;

  constructor(
    err: PostMediasMediaHashedIdCopyBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    if (err.error != null) this.error = err.error;

    this.name = "PostMediasMediaHashedIdCopyBadRequestError";
  }
}

/** @internal */
export const MethodNotAllowedError$inboundSchema: z.ZodType<
  MethodNotAllowedError,
  z.ZodTypeDef,
  unknown
> = z.object({
  error: z.string().optional(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new MethodNotAllowedError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type MethodNotAllowedError$Outbound = {
  error?: string | undefined;
};

/** @internal */
export const MethodNotAllowedError$outboundSchema: z.ZodType<
  MethodNotAllowedError$Outbound,
  z.ZodTypeDef,
  MethodNotAllowedError
> = z.instanceof(MethodNotAllowedError)
  .transform(v => v.data$)
  .pipe(z.object({
    error: z.string().optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MethodNotAllowedError$ {
  /** @deprecated use `MethodNotAllowedError$inboundSchema` instead. */
  export const inboundSchema = MethodNotAllowedError$inboundSchema;
  /** @deprecated use `MethodNotAllowedError$outboundSchema` instead. */
  export const outboundSchema = MethodNotAllowedError$outboundSchema;
  /** @deprecated use `MethodNotAllowedError$Outbound` instead. */
  export type Outbound = MethodNotAllowedError$Outbound;
}

/** @internal */
export const PostMediasMediaHashedIdCopyBadRequestError$inboundSchema:
  z.ZodType<PostMediasMediaHashedIdCopyBadRequestError, z.ZodTypeDef, unknown> =
    z.object({
      error: z.string().optional(),
      request$: z.instanceof(Request),
      response$: z.instanceof(Response),
      body$: z.string(),
    })
      .transform((v) => {
        return new PostMediasMediaHashedIdCopyBadRequestError(v, {
          request: v.request$,
          response: v.response$,
          body: v.body$,
        });
      });

/** @internal */
export type PostMediasMediaHashedIdCopyBadRequestError$Outbound = {
  error?: string | undefined;
};

/** @internal */
export const PostMediasMediaHashedIdCopyBadRequestError$outboundSchema:
  z.ZodType<
    PostMediasMediaHashedIdCopyBadRequestError$Outbound,
    z.ZodTypeDef,
    PostMediasMediaHashedIdCopyBadRequestError
  > = z.instanceof(PostMediasMediaHashedIdCopyBadRequestError)
    .transform(v => v.data$)
    .pipe(z.object({
      error: z.string().optional(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostMediasMediaHashedIdCopyBadRequestError$ {
  /** @deprecated use `PostMediasMediaHashedIdCopyBadRequestError$inboundSchema` instead. */
  export const inboundSchema =
    PostMediasMediaHashedIdCopyBadRequestError$inboundSchema;
  /** @deprecated use `PostMediasMediaHashedIdCopyBadRequestError$outboundSchema` instead. */
  export const outboundSchema =
    PostMediasMediaHashedIdCopyBadRequestError$outboundSchema;
  /** @deprecated use `PostMediasMediaHashedIdCopyBadRequestError$Outbound` instead. */
  export type Outbound = PostMediasMediaHashedIdCopyBadRequestError$Outbound;
}
