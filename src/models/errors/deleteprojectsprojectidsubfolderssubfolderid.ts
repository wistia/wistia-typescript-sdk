/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { WistiaError } from "./wistiaerror.js";

/**
 * Project or subfolder not found
 */
export type DeleteProjectsProjectIdSubfoldersSubfolderIdNotFoundErrorData = {
  error?: string | undefined;
};

/**
 * Project or subfolder not found
 */
export class DeleteProjectsProjectIdSubfoldersSubfolderIdNotFoundError
  extends WistiaError
{
  error?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: DeleteProjectsProjectIdSubfoldersSubfolderIdNotFoundErrorData;

  constructor(
    err: DeleteProjectsProjectIdSubfoldersSubfolderIdNotFoundErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    if (err.error != null) this.error = err.error;

    this.name = "DeleteProjectsProjectIdSubfoldersSubfolderIdNotFoundError";
  }
}

/** @internal */
export const DeleteProjectsProjectIdSubfoldersSubfolderIdNotFoundError$inboundSchema:
  z.ZodType<
    DeleteProjectsProjectIdSubfoldersSubfolderIdNotFoundError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    error: z.string().optional(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new DeleteProjectsProjectIdSubfoldersSubfolderIdNotFoundError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type DeleteProjectsProjectIdSubfoldersSubfolderIdNotFoundError$Outbound =
  {
    error?: string | undefined;
  };

/** @internal */
export const DeleteProjectsProjectIdSubfoldersSubfolderIdNotFoundError$outboundSchema:
  z.ZodType<
    DeleteProjectsProjectIdSubfoldersSubfolderIdNotFoundError$Outbound,
    z.ZodTypeDef,
    DeleteProjectsProjectIdSubfoldersSubfolderIdNotFoundError
  > = z.instanceof(DeleteProjectsProjectIdSubfoldersSubfolderIdNotFoundError)
    .transform(v => v.data$)
    .pipe(z.object({
      error: z.string().optional(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteProjectsProjectIdSubfoldersSubfolderIdNotFoundError$ {
  /** @deprecated use `DeleteProjectsProjectIdSubfoldersSubfolderIdNotFoundError$inboundSchema` instead. */
  export const inboundSchema =
    DeleteProjectsProjectIdSubfoldersSubfolderIdNotFoundError$inboundSchema;
  /** @deprecated use `DeleteProjectsProjectIdSubfoldersSubfolderIdNotFoundError$outboundSchema` instead. */
  export const outboundSchema =
    DeleteProjectsProjectIdSubfoldersSubfolderIdNotFoundError$outboundSchema;
  /** @deprecated use `DeleteProjectsProjectIdSubfoldersSubfolderIdNotFoundError$Outbound` instead. */
  export type Outbound =
    DeleteProjectsProjectIdSubfoldersSubfolderIdNotFoundError$Outbound;
}
