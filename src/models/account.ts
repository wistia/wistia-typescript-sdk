/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type Account = {
  /**
   * Numeric id of the account
   */
  id: number;
  /**
   * Account name
   */
  name: string;
  /**
   * Accountâ€™s main Wistia URL (e.g. http://brendan.wistia.com)
   */
  url: string;
  /**
   * The total number of medias in this account
   */
  mediaCount: number;
  /**
   * The account's video limit
   */
  videoLimit: number;
  /**
   * The total number of projects in this account
   */
  projectCount: number;
  /**
   * The total number of channels in this account
   */
  channelCount: number;
};

/** @internal */
export const Account$inboundSchema: z.ZodType<Account, z.ZodTypeDef, unknown> =
  z.object({
    id: z.number().int(),
    name: z.string(),
    url: z.string(),
    mediaCount: z.number().int(),
    videoLimit: z.number().int(),
    projectCount: z.number().int(),
    channelCount: z.number().int(),
  });

/** @internal */
export type Account$Outbound = {
  id: number;
  name: string;
  url: string;
  mediaCount: number;
  videoLimit: number;
  projectCount: number;
  channelCount: number;
};

/** @internal */
export const Account$outboundSchema: z.ZodType<
  Account$Outbound,
  z.ZodTypeDef,
  Account
> = z.object({
  id: z.number().int(),
  name: z.string(),
  url: z.string(),
  mediaCount: z.number().int(),
  videoLimit: z.number().int(),
  projectCount: z.number().int(),
  channelCount: z.number().int(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Account$ {
  /** @deprecated use `Account$inboundSchema` instead. */
  export const inboundSchema = Account$inboundSchema;
  /** @deprecated use `Account$outboundSchema` instead. */
  export const outboundSchema = Account$outboundSchema;
  /** @deprecated use `Account$Outbound` instead. */
  export type Outbound = Account$Outbound;
}

export function accountToJSON(account: Account): string {
  return JSON.stringify(Account$outboundSchema.parse(account));
}

export function accountFromJSON(
  jsonString: string,
): SafeParseResult<Account, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Account$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Account' from JSON`,
  );
}
