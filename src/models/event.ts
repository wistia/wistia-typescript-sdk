/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type EventThumbnail = {
  url?: string | undefined;
  width?: number | undefined;
  height?: number | undefined;
  fileSize?: number | undefined;
  contentType?: string | undefined;
  type?: string | undefined;
};

/**
 * Type of conversion.
 */
export type ConversionType = number | string;

/**
 * Additional data related to the conversion.
 */
export type ConversionData = {
  email?: string | undefined;
  firstName?: string | undefined;
  isNewLead?: boolean | undefined;
  lastName?: string | undefined;
};

/**
 * Details about the user agent of the viewer.
 */
export type EventUserAgentDetails = {
  browser?: string | undefined;
  browserVersion?: string | undefined;
  platform?: string | undefined;
  mobile?: boolean | undefined;
};

export type Event = {
  /**
   * Date and time when the event occurred.
   */
  receivedAt?: Date | undefined;
  /**
   * Unique identifier for the event.
   */
  eventKey?: string | undefined;
  /**
   * Identifier for the visitor.
   */
  visitorKey?: string | undefined;
  /**
   * URL of the page where the video was viewed.
   */
  embedUrl?: string | undefined;
  /**
   * Decimal number denoting how much of the video was watched.
   */
  percentViewed?: number | undefined;
  /**
   * IP address of the viewer.
   */
  ip?: string | undefined;
  /**
   * Organization associated with the IP address.
   */
  org?: string | undefined;
  /**
   * Country based on IP.
   */
  country?: string | undefined;
  /**
   * Region based on IP.
   */
  region?: string | undefined;
  /**
   * City based on IP.
   */
  city?: string | undefined;
  /**
   * Latitude based on IP.
   */
  lat?: number | undefined;
  /**
   * Longitude based on IP.
   */
  lon?: number | undefined;
  /**
   * Email of the viewer (if available).
   */
  email?: string | null | undefined;
  /**
   * Identifier for the video that was watched.
   */
  mediaId?: string | undefined;
  /**
   * Name of the video.
   */
  mediaName?: string | undefined;
  /**
   * URL of the video in Wistia.
   */
  mediaUrl?: string | undefined;
  /**
   * URL for the heatmap of the event.
   */
  iframeHeatmapUrl?: string | undefined;
  thumbnail?: EventThumbnail | undefined;
  /**
   * Type of conversion.
   */
  conversionType?: number | string | undefined;
  /**
   * Additional data related to the conversion.
   */
  conversionData?: ConversionData | undefined;
  /**
   * Details about the user agent of the viewer.
   */
  userAgentDetails?: EventUserAgentDetails | undefined;
};

/** @internal */
export const EventThumbnail$inboundSchema: z.ZodType<
  EventThumbnail,
  z.ZodTypeDef,
  unknown
> = z.object({
  url: z.string().optional(),
  width: z.number().int().optional(),
  height: z.number().int().optional(),
  fileSize: z.number().int().optional(),
  contentType: z.string().optional(),
  type: z.string().optional(),
});

/** @internal */
export type EventThumbnail$Outbound = {
  url?: string | undefined;
  width?: number | undefined;
  height?: number | undefined;
  fileSize?: number | undefined;
  contentType?: string | undefined;
  type?: string | undefined;
};

/** @internal */
export const EventThumbnail$outboundSchema: z.ZodType<
  EventThumbnail$Outbound,
  z.ZodTypeDef,
  EventThumbnail
> = z.object({
  url: z.string().optional(),
  width: z.number().int().optional(),
  height: z.number().int().optional(),
  fileSize: z.number().int().optional(),
  contentType: z.string().optional(),
  type: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EventThumbnail$ {
  /** @deprecated use `EventThumbnail$inboundSchema` instead. */
  export const inboundSchema = EventThumbnail$inboundSchema;
  /** @deprecated use `EventThumbnail$outboundSchema` instead. */
  export const outboundSchema = EventThumbnail$outboundSchema;
  /** @deprecated use `EventThumbnail$Outbound` instead. */
  export type Outbound = EventThumbnail$Outbound;
}

export function eventThumbnailToJSON(eventThumbnail: EventThumbnail): string {
  return JSON.stringify(EventThumbnail$outboundSchema.parse(eventThumbnail));
}

export function eventThumbnailFromJSON(
  jsonString: string,
): SafeParseResult<EventThumbnail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EventThumbnail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EventThumbnail' from JSON`,
  );
}

/** @internal */
export const ConversionType$inboundSchema: z.ZodType<
  ConversionType,
  z.ZodTypeDef,
  unknown
> = z.union([z.number().int(), z.string()]);

/** @internal */
export type ConversionType$Outbound = number | string;

/** @internal */
export const ConversionType$outboundSchema: z.ZodType<
  ConversionType$Outbound,
  z.ZodTypeDef,
  ConversionType
> = z.union([z.number().int(), z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConversionType$ {
  /** @deprecated use `ConversionType$inboundSchema` instead. */
  export const inboundSchema = ConversionType$inboundSchema;
  /** @deprecated use `ConversionType$outboundSchema` instead. */
  export const outboundSchema = ConversionType$outboundSchema;
  /** @deprecated use `ConversionType$Outbound` instead. */
  export type Outbound = ConversionType$Outbound;
}

export function conversionTypeToJSON(conversionType: ConversionType): string {
  return JSON.stringify(ConversionType$outboundSchema.parse(conversionType));
}

export function conversionTypeFromJSON(
  jsonString: string,
): SafeParseResult<ConversionType, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ConversionType$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ConversionType' from JSON`,
  );
}

/** @internal */
export const ConversionData$inboundSchema: z.ZodType<
  ConversionData,
  z.ZodTypeDef,
  unknown
> = z.object({
  email: z.string().optional(),
  first_name: z.string().optional(),
  is_new_lead: z.boolean().optional(),
  last_name: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "first_name": "firstName",
    "is_new_lead": "isNewLead",
    "last_name": "lastName",
  });
});

/** @internal */
export type ConversionData$Outbound = {
  email?: string | undefined;
  first_name?: string | undefined;
  is_new_lead?: boolean | undefined;
  last_name?: string | undefined;
};

/** @internal */
export const ConversionData$outboundSchema: z.ZodType<
  ConversionData$Outbound,
  z.ZodTypeDef,
  ConversionData
> = z.object({
  email: z.string().optional(),
  firstName: z.string().optional(),
  isNewLead: z.boolean().optional(),
  lastName: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    firstName: "first_name",
    isNewLead: "is_new_lead",
    lastName: "last_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConversionData$ {
  /** @deprecated use `ConversionData$inboundSchema` instead. */
  export const inboundSchema = ConversionData$inboundSchema;
  /** @deprecated use `ConversionData$outboundSchema` instead. */
  export const outboundSchema = ConversionData$outboundSchema;
  /** @deprecated use `ConversionData$Outbound` instead. */
  export type Outbound = ConversionData$Outbound;
}

export function conversionDataToJSON(conversionData: ConversionData): string {
  return JSON.stringify(ConversionData$outboundSchema.parse(conversionData));
}

export function conversionDataFromJSON(
  jsonString: string,
): SafeParseResult<ConversionData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ConversionData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ConversionData' from JSON`,
  );
}

/** @internal */
export const EventUserAgentDetails$inboundSchema: z.ZodType<
  EventUserAgentDetails,
  z.ZodTypeDef,
  unknown
> = z.object({
  browser: z.string().optional(),
  browser_version: z.string().optional(),
  platform: z.string().optional(),
  mobile: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    "browser_version": "browserVersion",
  });
});

/** @internal */
export type EventUserAgentDetails$Outbound = {
  browser?: string | undefined;
  browser_version?: string | undefined;
  platform?: string | undefined;
  mobile?: boolean | undefined;
};

/** @internal */
export const EventUserAgentDetails$outboundSchema: z.ZodType<
  EventUserAgentDetails$Outbound,
  z.ZodTypeDef,
  EventUserAgentDetails
> = z.object({
  browser: z.string().optional(),
  browserVersion: z.string().optional(),
  platform: z.string().optional(),
  mobile: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    browserVersion: "browser_version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EventUserAgentDetails$ {
  /** @deprecated use `EventUserAgentDetails$inboundSchema` instead. */
  export const inboundSchema = EventUserAgentDetails$inboundSchema;
  /** @deprecated use `EventUserAgentDetails$outboundSchema` instead. */
  export const outboundSchema = EventUserAgentDetails$outboundSchema;
  /** @deprecated use `EventUserAgentDetails$Outbound` instead. */
  export type Outbound = EventUserAgentDetails$Outbound;
}

export function eventUserAgentDetailsToJSON(
  eventUserAgentDetails: EventUserAgentDetails,
): string {
  return JSON.stringify(
    EventUserAgentDetails$outboundSchema.parse(eventUserAgentDetails),
  );
}

export function eventUserAgentDetailsFromJSON(
  jsonString: string,
): SafeParseResult<EventUserAgentDetails, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EventUserAgentDetails$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EventUserAgentDetails' from JSON`,
  );
}

/** @internal */
export const Event$inboundSchema: z.ZodType<Event, z.ZodTypeDef, unknown> = z
  .object({
    received_at: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ).optional(),
    event_key: z.string().optional(),
    visitor_key: z.string().optional(),
    embed_url: z.string().optional(),
    percent_viewed: z.number().optional(),
    ip: z.string().optional(),
    org: z.string().optional(),
    country: z.string().optional(),
    region: z.string().optional(),
    city: z.string().optional(),
    lat: z.number().optional(),
    lon: z.number().optional(),
    email: z.nullable(z.string()).optional(),
    media_id: z.string().optional(),
    media_name: z.string().optional(),
    media_url: z.string().optional(),
    iframe_heatmap_url: z.string().optional(),
    thumbnail: z.lazy(() => EventThumbnail$inboundSchema).optional(),
    conversion_type: z.union([z.number().int(), z.string()]).optional(),
    conversion_data: z.lazy(() => ConversionData$inboundSchema).optional(),
    user_agent_details: z.lazy(() => EventUserAgentDetails$inboundSchema)
      .optional(),
  }).transform((v) => {
    return remap$(v, {
      "received_at": "receivedAt",
      "event_key": "eventKey",
      "visitor_key": "visitorKey",
      "embed_url": "embedUrl",
      "percent_viewed": "percentViewed",
      "media_id": "mediaId",
      "media_name": "mediaName",
      "media_url": "mediaUrl",
      "iframe_heatmap_url": "iframeHeatmapUrl",
      "conversion_type": "conversionType",
      "conversion_data": "conversionData",
      "user_agent_details": "userAgentDetails",
    });
  });

/** @internal */
export type Event$Outbound = {
  received_at?: string | undefined;
  event_key?: string | undefined;
  visitor_key?: string | undefined;
  embed_url?: string | undefined;
  percent_viewed?: number | undefined;
  ip?: string | undefined;
  org?: string | undefined;
  country?: string | undefined;
  region?: string | undefined;
  city?: string | undefined;
  lat?: number | undefined;
  lon?: number | undefined;
  email?: string | null | undefined;
  media_id?: string | undefined;
  media_name?: string | undefined;
  media_url?: string | undefined;
  iframe_heatmap_url?: string | undefined;
  thumbnail?: EventThumbnail$Outbound | undefined;
  conversion_type?: number | string | undefined;
  conversion_data?: ConversionData$Outbound | undefined;
  user_agent_details?: EventUserAgentDetails$Outbound | undefined;
};

/** @internal */
export const Event$outboundSchema: z.ZodType<
  Event$Outbound,
  z.ZodTypeDef,
  Event
> = z.object({
  receivedAt: z.date().transform(v => v.toISOString()).optional(),
  eventKey: z.string().optional(),
  visitorKey: z.string().optional(),
  embedUrl: z.string().optional(),
  percentViewed: z.number().optional(),
  ip: z.string().optional(),
  org: z.string().optional(),
  country: z.string().optional(),
  region: z.string().optional(),
  city: z.string().optional(),
  lat: z.number().optional(),
  lon: z.number().optional(),
  email: z.nullable(z.string()).optional(),
  mediaId: z.string().optional(),
  mediaName: z.string().optional(),
  mediaUrl: z.string().optional(),
  iframeHeatmapUrl: z.string().optional(),
  thumbnail: z.lazy(() => EventThumbnail$outboundSchema).optional(),
  conversionType: z.union([z.number().int(), z.string()]).optional(),
  conversionData: z.lazy(() => ConversionData$outboundSchema).optional(),
  userAgentDetails: z.lazy(() => EventUserAgentDetails$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    receivedAt: "received_at",
    eventKey: "event_key",
    visitorKey: "visitor_key",
    embedUrl: "embed_url",
    percentViewed: "percent_viewed",
    mediaId: "media_id",
    mediaName: "media_name",
    mediaUrl: "media_url",
    iframeHeatmapUrl: "iframe_heatmap_url",
    conversionType: "conversion_type",
    conversionData: "conversion_data",
    userAgentDetails: "user_agent_details",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Event$ {
  /** @deprecated use `Event$inboundSchema` instead. */
  export const inboundSchema = Event$inboundSchema;
  /** @deprecated use `Event$outboundSchema` instead. */
  export const outboundSchema = Event$outboundSchema;
  /** @deprecated use `Event$Outbound` instead. */
  export type Outbound = Event$Outbound;
}

export function eventToJSON(event: Event): string {
  return JSON.stringify(Event$outboundSchema.parse(event));
}

export function eventFromJSON(
  jsonString: string,
): SafeParseResult<Event, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Event$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Event' from JSON`,
  );
}
