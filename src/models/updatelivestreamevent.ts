/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type UpdateLiveStreamEventLiveStreamEvent = {
  /**
   * The title of the live stream event
   */
  title?: string | undefined;
  /**
   * The description of the live stream event
   */
  description?: string | undefined;
  /**
   * The scheduled start time in W3C format with timezone
   */
  scheduledFor?: Date | undefined;
  /**
   * Duration of the event in minutes (minimum 15)
   */
  eventDuration?: number | undefined;
};

export type UpdateLiveStreamEvent = {
  liveStreamEvent?: UpdateLiveStreamEventLiveStreamEvent | undefined;
};

/** @internal */
export const UpdateLiveStreamEventLiveStreamEvent$inboundSchema: z.ZodType<
  UpdateLiveStreamEventLiveStreamEvent,
  z.ZodTypeDef,
  unknown
> = z.object({
  title: z.string().optional(),
  description: z.string().optional(),
  scheduled_for: z.string().datetime({ offset: true }).transform(v =>
    new Date(v)
  ).optional(),
  event_duration: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    "scheduled_for": "scheduledFor",
    "event_duration": "eventDuration",
  });
});

/** @internal */
export type UpdateLiveStreamEventLiveStreamEvent$Outbound = {
  title?: string | undefined;
  description?: string | undefined;
  scheduled_for?: string | undefined;
  event_duration?: number | undefined;
};

/** @internal */
export const UpdateLiveStreamEventLiveStreamEvent$outboundSchema: z.ZodType<
  UpdateLiveStreamEventLiveStreamEvent$Outbound,
  z.ZodTypeDef,
  UpdateLiveStreamEventLiveStreamEvent
> = z.object({
  title: z.string().optional(),
  description: z.string().optional(),
  scheduledFor: z.date().transform(v => v.toISOString()).optional(),
  eventDuration: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    scheduledFor: "scheduled_for",
    eventDuration: "event_duration",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateLiveStreamEventLiveStreamEvent$ {
  /** @deprecated use `UpdateLiveStreamEventLiveStreamEvent$inboundSchema` instead. */
  export const inboundSchema =
    UpdateLiveStreamEventLiveStreamEvent$inboundSchema;
  /** @deprecated use `UpdateLiveStreamEventLiveStreamEvent$outboundSchema` instead. */
  export const outboundSchema =
    UpdateLiveStreamEventLiveStreamEvent$outboundSchema;
  /** @deprecated use `UpdateLiveStreamEventLiveStreamEvent$Outbound` instead. */
  export type Outbound = UpdateLiveStreamEventLiveStreamEvent$Outbound;
}

export function updateLiveStreamEventLiveStreamEventToJSON(
  updateLiveStreamEventLiveStreamEvent: UpdateLiveStreamEventLiveStreamEvent,
): string {
  return JSON.stringify(
    UpdateLiveStreamEventLiveStreamEvent$outboundSchema.parse(
      updateLiveStreamEventLiveStreamEvent,
    ),
  );
}

export function updateLiveStreamEventLiveStreamEventFromJSON(
  jsonString: string,
): SafeParseResult<UpdateLiveStreamEventLiveStreamEvent, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateLiveStreamEventLiveStreamEvent$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateLiveStreamEventLiveStreamEvent' from JSON`,
  );
}

/** @internal */
export const UpdateLiveStreamEvent$inboundSchema: z.ZodType<
  UpdateLiveStreamEvent,
  z.ZodTypeDef,
  unknown
> = z.object({
  live_stream_event: z.lazy(() =>
    UpdateLiveStreamEventLiveStreamEvent$inboundSchema
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "live_stream_event": "liveStreamEvent",
  });
});

/** @internal */
export type UpdateLiveStreamEvent$Outbound = {
  live_stream_event?: UpdateLiveStreamEventLiveStreamEvent$Outbound | undefined;
};

/** @internal */
export const UpdateLiveStreamEvent$outboundSchema: z.ZodType<
  UpdateLiveStreamEvent$Outbound,
  z.ZodTypeDef,
  UpdateLiveStreamEvent
> = z.object({
  liveStreamEvent: z.lazy(() =>
    UpdateLiveStreamEventLiveStreamEvent$outboundSchema
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    liveStreamEvent: "live_stream_event",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateLiveStreamEvent$ {
  /** @deprecated use `UpdateLiveStreamEvent$inboundSchema` instead. */
  export const inboundSchema = UpdateLiveStreamEvent$inboundSchema;
  /** @deprecated use `UpdateLiveStreamEvent$outboundSchema` instead. */
  export const outboundSchema = UpdateLiveStreamEvent$outboundSchema;
  /** @deprecated use `UpdateLiveStreamEvent$Outbound` instead. */
  export type Outbound = UpdateLiveStreamEvent$Outbound;
}

export function updateLiveStreamEventToJSON(
  updateLiveStreamEvent: UpdateLiveStreamEvent,
): string {
  return JSON.stringify(
    UpdateLiveStreamEvent$outboundSchema.parse(updateLiveStreamEvent),
  );
}

export function updateLiveStreamEventFromJSON(
  jsonString: string,
): SafeParseResult<UpdateLiveStreamEvent, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateLiveStreamEvent$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateLiveStreamEvent' from JSON`,
  );
}
