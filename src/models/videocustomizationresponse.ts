/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type PasswordProtectedVideo = {
  on?: string | undefined;
  src?: string | undefined;
  challenge?: string | undefined;
  async?: string | undefined;
};

export type VideoCustomizationResponseVideoThumbnail = {
  clickToPlayButton?: string | undefined;
};

export type VideoCustomizationResponseSocialbarV1 = {
  buttons?: string | undefined;
  showTweetCount?: string | undefined;
  tweetText?: string | undefined;
  height?: string | undefined;
};

export type VideoCustomizationResponseChapters = {
  visibleOnLoad?: string | undefined;
  chapterList?: string | undefined;
  on?: string | undefined;
};

export type VideoCustomizationResponseStyle = {
  /**
   * The background color of the post-roll.
   */
  backgroundColor?: string | undefined;
};

/**
 * Adds a Call To Action to your Video (response format)
 */
export type VideoCustomizationResponsePostRollV1 = {
  /**
   * String representation of whether the video can be rewatched.
   */
  rewatch?: string | undefined;
  /**
   * The URL of the text to be displayed.
   */
  text?: string | undefined;
  /**
   * The URL of the link to be displayed.
   */
  link?: string | undefined;
  /**
   * The time when the post-roll should be displayed as a string.
   */
  time?: string | undefined;
  /**
   * String representation of whether the post-roll will automatically adjust its size.
   */
  autoSize?: string | undefined;
  style?: VideoCustomizationResponseStyle | undefined;
  /**
   * The type of call-to-action to be displayed.
   */
  ctaType?: string | undefined;
  /**
   * String representation of whether the post-roll is enabled.
   */
  on?: string | undefined;
  /**
   * The key used for tracking conversion opportunities.
   */
  conversionOpportunityKey?: string | undefined;
};

/**
 * Captions plugin configuration (response format)
 */
export type VideoCustomizationResponseCaptionsV1 = {
  /**
   * String representation of whether the captions plugin is enabled ("true" or "false").
   */
  on?: string | undefined;
  /**
   * String representation of whether captions are turned on by default ("true" or "false").
   */
  onByDefault?: string | undefined;
};

export type VideoCustomizationResponsePlugin = {
  passwordProtectedVideo?: PasswordProtectedVideo | undefined;
  videoThumbnail?: VideoCustomizationResponseVideoThumbnail | undefined;
  socialbarV1?: VideoCustomizationResponseSocialbarV1 | undefined;
  chapters?: VideoCustomizationResponseChapters | undefined;
  /**
   * Adds a Call To Action to your Video (response format)
   */
  postRollV1?: VideoCustomizationResponsePostRollV1 | undefined;
  /**
   * Captions plugin configuration (response format)
   */
  captionsV1?: VideoCustomizationResponseCaptionsV1 | undefined;
};

export type Private = {
  passwordProtectOn?: string | undefined;
  showComments?: string | undefined;
};

export type Encrypted = {
  passwordProtectPassword?: string | undefined;
};

export type VideoCustomizationResponse = {
  /**
   * The color of the video player.
   */
  playerColor?: string | undefined;
  stillUrl?: string | undefined;
  /**
   * Whether the video should auto play or not.
   */
  autoPlay?: string | undefined;
  bpbTime?: string | undefined;
  controlsVisibleOnLoad?: string | undefined;
  /**
   * Behavior of the video at the end.
   */
  endVideoBehavior?: string | undefined;
  fullscreenButton?: string | undefined;
  branding?: string | undefined;
  playbar?: string | undefined;
  /**
   * Indicates if the play button is visible.
   */
  playButton?: string | undefined;
  settingsControl?: string | undefined;
  showCustomerLogo?: string | undefined;
  qualityControl?: string | undefined;
  playbackRateControl?: string | undefined;
  smallPlayButton?: string | undefined;
  spherical?: string | undefined;
  volumeControl?: string | undefined;
  copyLinkAndThumbnailEnabled?: string | undefined;
  doNotTrack?: string | undefined;
  email?: string | undefined;
  fitStrategy?: string | undefined;
  fullscreenOnRotateToLandscape?: string | undefined;
  muted?: string | undefined;
  playlistLinks?: string | undefined;
  playlistLoop?: string | undefined;
  playsinline?: string | undefined;
  playPauseNotifier?: string | undefined;
  playSuspendedOffScreen?: string | undefined;
  preload?: string | undefined;
  qualityMax?: string | undefined;
  qualityMin?: string | undefined;
  resumable?: string | undefined;
  seo?: string | undefined;
  silentAutoPlay?: string | undefined;
  time?: string | undefined;
  thumbnailAltText?: string | undefined;
  videoFoam?: string | undefined;
  volume?: string | undefined;
  wmode?: string | undefined;
  /**
   * String representation of whether the key moments feature is enabled.
   */
  keyMoments?: string | undefined;
  plugin?: VideoCustomizationResponsePlugin | undefined;
  private?: Private | undefined;
  encrypted?: Encrypted | undefined;
};

/** @internal */
export const PasswordProtectedVideo$inboundSchema: z.ZodType<
  PasswordProtectedVideo,
  z.ZodTypeDef,
  unknown
> = z.object({
  on: z.string().optional(),
  src: z.string().optional(),
  challenge: z.string().optional(),
  async: z.string().optional(),
});

/** @internal */
export type PasswordProtectedVideo$Outbound = {
  on?: string | undefined;
  src?: string | undefined;
  challenge?: string | undefined;
  async?: string | undefined;
};

/** @internal */
export const PasswordProtectedVideo$outboundSchema: z.ZodType<
  PasswordProtectedVideo$Outbound,
  z.ZodTypeDef,
  PasswordProtectedVideo
> = z.object({
  on: z.string().optional(),
  src: z.string().optional(),
  challenge: z.string().optional(),
  async: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PasswordProtectedVideo$ {
  /** @deprecated use `PasswordProtectedVideo$inboundSchema` instead. */
  export const inboundSchema = PasswordProtectedVideo$inboundSchema;
  /** @deprecated use `PasswordProtectedVideo$outboundSchema` instead. */
  export const outboundSchema = PasswordProtectedVideo$outboundSchema;
  /** @deprecated use `PasswordProtectedVideo$Outbound` instead. */
  export type Outbound = PasswordProtectedVideo$Outbound;
}

export function passwordProtectedVideoToJSON(
  passwordProtectedVideo: PasswordProtectedVideo,
): string {
  return JSON.stringify(
    PasswordProtectedVideo$outboundSchema.parse(passwordProtectedVideo),
  );
}

export function passwordProtectedVideoFromJSON(
  jsonString: string,
): SafeParseResult<PasswordProtectedVideo, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PasswordProtectedVideo$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PasswordProtectedVideo' from JSON`,
  );
}

/** @internal */
export const VideoCustomizationResponseVideoThumbnail$inboundSchema: z.ZodType<
  VideoCustomizationResponseVideoThumbnail,
  z.ZodTypeDef,
  unknown
> = z.object({
  clickToPlayButton: z.string().optional(),
});

/** @internal */
export type VideoCustomizationResponseVideoThumbnail$Outbound = {
  clickToPlayButton?: string | undefined;
};

/** @internal */
export const VideoCustomizationResponseVideoThumbnail$outboundSchema: z.ZodType<
  VideoCustomizationResponseVideoThumbnail$Outbound,
  z.ZodTypeDef,
  VideoCustomizationResponseVideoThumbnail
> = z.object({
  clickToPlayButton: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VideoCustomizationResponseVideoThumbnail$ {
  /** @deprecated use `VideoCustomizationResponseVideoThumbnail$inboundSchema` instead. */
  export const inboundSchema =
    VideoCustomizationResponseVideoThumbnail$inboundSchema;
  /** @deprecated use `VideoCustomizationResponseVideoThumbnail$outboundSchema` instead. */
  export const outboundSchema =
    VideoCustomizationResponseVideoThumbnail$outboundSchema;
  /** @deprecated use `VideoCustomizationResponseVideoThumbnail$Outbound` instead. */
  export type Outbound = VideoCustomizationResponseVideoThumbnail$Outbound;
}

export function videoCustomizationResponseVideoThumbnailToJSON(
  videoCustomizationResponseVideoThumbnail:
    VideoCustomizationResponseVideoThumbnail,
): string {
  return JSON.stringify(
    VideoCustomizationResponseVideoThumbnail$outboundSchema.parse(
      videoCustomizationResponseVideoThumbnail,
    ),
  );
}

export function videoCustomizationResponseVideoThumbnailFromJSON(
  jsonString: string,
): SafeParseResult<
  VideoCustomizationResponseVideoThumbnail,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      VideoCustomizationResponseVideoThumbnail$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'VideoCustomizationResponseVideoThumbnail' from JSON`,
  );
}

/** @internal */
export const VideoCustomizationResponseSocialbarV1$inboundSchema: z.ZodType<
  VideoCustomizationResponseSocialbarV1,
  z.ZodTypeDef,
  unknown
> = z.object({
  buttons: z.string().optional(),
  showTweetCount: z.string().optional(),
  tweetText: z.string().optional(),
  height: z.string().optional(),
});

/** @internal */
export type VideoCustomizationResponseSocialbarV1$Outbound = {
  buttons?: string | undefined;
  showTweetCount?: string | undefined;
  tweetText?: string | undefined;
  height?: string | undefined;
};

/** @internal */
export const VideoCustomizationResponseSocialbarV1$outboundSchema: z.ZodType<
  VideoCustomizationResponseSocialbarV1$Outbound,
  z.ZodTypeDef,
  VideoCustomizationResponseSocialbarV1
> = z.object({
  buttons: z.string().optional(),
  showTweetCount: z.string().optional(),
  tweetText: z.string().optional(),
  height: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VideoCustomizationResponseSocialbarV1$ {
  /** @deprecated use `VideoCustomizationResponseSocialbarV1$inboundSchema` instead. */
  export const inboundSchema =
    VideoCustomizationResponseSocialbarV1$inboundSchema;
  /** @deprecated use `VideoCustomizationResponseSocialbarV1$outboundSchema` instead. */
  export const outboundSchema =
    VideoCustomizationResponseSocialbarV1$outboundSchema;
  /** @deprecated use `VideoCustomizationResponseSocialbarV1$Outbound` instead. */
  export type Outbound = VideoCustomizationResponseSocialbarV1$Outbound;
}

export function videoCustomizationResponseSocialbarV1ToJSON(
  videoCustomizationResponseSocialbarV1: VideoCustomizationResponseSocialbarV1,
): string {
  return JSON.stringify(
    VideoCustomizationResponseSocialbarV1$outboundSchema.parse(
      videoCustomizationResponseSocialbarV1,
    ),
  );
}

export function videoCustomizationResponseSocialbarV1FromJSON(
  jsonString: string,
): SafeParseResult<VideoCustomizationResponseSocialbarV1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      VideoCustomizationResponseSocialbarV1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'VideoCustomizationResponseSocialbarV1' from JSON`,
  );
}

/** @internal */
export const VideoCustomizationResponseChapters$inboundSchema: z.ZodType<
  VideoCustomizationResponseChapters,
  z.ZodTypeDef,
  unknown
> = z.object({
  visibleOnLoad: z.string().optional(),
  chapterList: z.string().optional(),
  on: z.string().optional(),
});

/** @internal */
export type VideoCustomizationResponseChapters$Outbound = {
  visibleOnLoad?: string | undefined;
  chapterList?: string | undefined;
  on?: string | undefined;
};

/** @internal */
export const VideoCustomizationResponseChapters$outboundSchema: z.ZodType<
  VideoCustomizationResponseChapters$Outbound,
  z.ZodTypeDef,
  VideoCustomizationResponseChapters
> = z.object({
  visibleOnLoad: z.string().optional(),
  chapterList: z.string().optional(),
  on: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VideoCustomizationResponseChapters$ {
  /** @deprecated use `VideoCustomizationResponseChapters$inboundSchema` instead. */
  export const inboundSchema = VideoCustomizationResponseChapters$inboundSchema;
  /** @deprecated use `VideoCustomizationResponseChapters$outboundSchema` instead. */
  export const outboundSchema =
    VideoCustomizationResponseChapters$outboundSchema;
  /** @deprecated use `VideoCustomizationResponseChapters$Outbound` instead. */
  export type Outbound = VideoCustomizationResponseChapters$Outbound;
}

export function videoCustomizationResponseChaptersToJSON(
  videoCustomizationResponseChapters: VideoCustomizationResponseChapters,
): string {
  return JSON.stringify(
    VideoCustomizationResponseChapters$outboundSchema.parse(
      videoCustomizationResponseChapters,
    ),
  );
}

export function videoCustomizationResponseChaptersFromJSON(
  jsonString: string,
): SafeParseResult<VideoCustomizationResponseChapters, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      VideoCustomizationResponseChapters$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'VideoCustomizationResponseChapters' from JSON`,
  );
}

/** @internal */
export const VideoCustomizationResponseStyle$inboundSchema: z.ZodType<
  VideoCustomizationResponseStyle,
  z.ZodTypeDef,
  unknown
> = z.object({
  backgroundColor: z.string().optional(),
});

/** @internal */
export type VideoCustomizationResponseStyle$Outbound = {
  backgroundColor?: string | undefined;
};

/** @internal */
export const VideoCustomizationResponseStyle$outboundSchema: z.ZodType<
  VideoCustomizationResponseStyle$Outbound,
  z.ZodTypeDef,
  VideoCustomizationResponseStyle
> = z.object({
  backgroundColor: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VideoCustomizationResponseStyle$ {
  /** @deprecated use `VideoCustomizationResponseStyle$inboundSchema` instead. */
  export const inboundSchema = VideoCustomizationResponseStyle$inboundSchema;
  /** @deprecated use `VideoCustomizationResponseStyle$outboundSchema` instead. */
  export const outboundSchema = VideoCustomizationResponseStyle$outboundSchema;
  /** @deprecated use `VideoCustomizationResponseStyle$Outbound` instead. */
  export type Outbound = VideoCustomizationResponseStyle$Outbound;
}

export function videoCustomizationResponseStyleToJSON(
  videoCustomizationResponseStyle: VideoCustomizationResponseStyle,
): string {
  return JSON.stringify(
    VideoCustomizationResponseStyle$outboundSchema.parse(
      videoCustomizationResponseStyle,
    ),
  );
}

export function videoCustomizationResponseStyleFromJSON(
  jsonString: string,
): SafeParseResult<VideoCustomizationResponseStyle, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => VideoCustomizationResponseStyle$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'VideoCustomizationResponseStyle' from JSON`,
  );
}

/** @internal */
export const VideoCustomizationResponsePostRollV1$inboundSchema: z.ZodType<
  VideoCustomizationResponsePostRollV1,
  z.ZodTypeDef,
  unknown
> = z.object({
  rewatch: z.string().optional(),
  text: z.string().optional(),
  link: z.string().optional(),
  time: z.string().optional(),
  autoSize: z.string().optional(),
  style: z.lazy(() => VideoCustomizationResponseStyle$inboundSchema).optional(),
  ctaType: z.string().optional(),
  on: z.string().optional(),
  conversionOpportunityKey: z.string().optional(),
});

/** @internal */
export type VideoCustomizationResponsePostRollV1$Outbound = {
  rewatch?: string | undefined;
  text?: string | undefined;
  link?: string | undefined;
  time?: string | undefined;
  autoSize?: string | undefined;
  style?: VideoCustomizationResponseStyle$Outbound | undefined;
  ctaType?: string | undefined;
  on?: string | undefined;
  conversionOpportunityKey?: string | undefined;
};

/** @internal */
export const VideoCustomizationResponsePostRollV1$outboundSchema: z.ZodType<
  VideoCustomizationResponsePostRollV1$Outbound,
  z.ZodTypeDef,
  VideoCustomizationResponsePostRollV1
> = z.object({
  rewatch: z.string().optional(),
  text: z.string().optional(),
  link: z.string().optional(),
  time: z.string().optional(),
  autoSize: z.string().optional(),
  style: z.lazy(() => VideoCustomizationResponseStyle$outboundSchema)
    .optional(),
  ctaType: z.string().optional(),
  on: z.string().optional(),
  conversionOpportunityKey: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VideoCustomizationResponsePostRollV1$ {
  /** @deprecated use `VideoCustomizationResponsePostRollV1$inboundSchema` instead. */
  export const inboundSchema =
    VideoCustomizationResponsePostRollV1$inboundSchema;
  /** @deprecated use `VideoCustomizationResponsePostRollV1$outboundSchema` instead. */
  export const outboundSchema =
    VideoCustomizationResponsePostRollV1$outboundSchema;
  /** @deprecated use `VideoCustomizationResponsePostRollV1$Outbound` instead. */
  export type Outbound = VideoCustomizationResponsePostRollV1$Outbound;
}

export function videoCustomizationResponsePostRollV1ToJSON(
  videoCustomizationResponsePostRollV1: VideoCustomizationResponsePostRollV1,
): string {
  return JSON.stringify(
    VideoCustomizationResponsePostRollV1$outboundSchema.parse(
      videoCustomizationResponsePostRollV1,
    ),
  );
}

export function videoCustomizationResponsePostRollV1FromJSON(
  jsonString: string,
): SafeParseResult<VideoCustomizationResponsePostRollV1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      VideoCustomizationResponsePostRollV1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'VideoCustomizationResponsePostRollV1' from JSON`,
  );
}

/** @internal */
export const VideoCustomizationResponseCaptionsV1$inboundSchema: z.ZodType<
  VideoCustomizationResponseCaptionsV1,
  z.ZodTypeDef,
  unknown
> = z.object({
  on: z.string().optional(),
  onByDefault: z.string().optional(),
});

/** @internal */
export type VideoCustomizationResponseCaptionsV1$Outbound = {
  on?: string | undefined;
  onByDefault?: string | undefined;
};

/** @internal */
export const VideoCustomizationResponseCaptionsV1$outboundSchema: z.ZodType<
  VideoCustomizationResponseCaptionsV1$Outbound,
  z.ZodTypeDef,
  VideoCustomizationResponseCaptionsV1
> = z.object({
  on: z.string().optional(),
  onByDefault: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VideoCustomizationResponseCaptionsV1$ {
  /** @deprecated use `VideoCustomizationResponseCaptionsV1$inboundSchema` instead. */
  export const inboundSchema =
    VideoCustomizationResponseCaptionsV1$inboundSchema;
  /** @deprecated use `VideoCustomizationResponseCaptionsV1$outboundSchema` instead. */
  export const outboundSchema =
    VideoCustomizationResponseCaptionsV1$outboundSchema;
  /** @deprecated use `VideoCustomizationResponseCaptionsV1$Outbound` instead. */
  export type Outbound = VideoCustomizationResponseCaptionsV1$Outbound;
}

export function videoCustomizationResponseCaptionsV1ToJSON(
  videoCustomizationResponseCaptionsV1: VideoCustomizationResponseCaptionsV1,
): string {
  return JSON.stringify(
    VideoCustomizationResponseCaptionsV1$outboundSchema.parse(
      videoCustomizationResponseCaptionsV1,
    ),
  );
}

export function videoCustomizationResponseCaptionsV1FromJSON(
  jsonString: string,
): SafeParseResult<VideoCustomizationResponseCaptionsV1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      VideoCustomizationResponseCaptionsV1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'VideoCustomizationResponseCaptionsV1' from JSON`,
  );
}

/** @internal */
export const VideoCustomizationResponsePlugin$inboundSchema: z.ZodType<
  VideoCustomizationResponsePlugin,
  z.ZodTypeDef,
  unknown
> = z.object({
  passwordProtectedVideo: z.lazy(() => PasswordProtectedVideo$inboundSchema)
    .optional(),
  videoThumbnail: z.lazy(() =>
    VideoCustomizationResponseVideoThumbnail$inboundSchema
  ).optional(),
  "socialbar-v1": z.lazy(() =>
    VideoCustomizationResponseSocialbarV1$inboundSchema
  ).optional(),
  chapters: z.lazy(() => VideoCustomizationResponseChapters$inboundSchema)
    .optional(),
  "postRoll-v1": z.lazy(() =>
    VideoCustomizationResponsePostRollV1$inboundSchema
  ).optional(),
  "captions-v1": z.lazy(() =>
    VideoCustomizationResponseCaptionsV1$inboundSchema
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "socialbar-v1": "socialbarV1",
    "postRoll-v1": "postRollV1",
    "captions-v1": "captionsV1",
  });
});

/** @internal */
export type VideoCustomizationResponsePlugin$Outbound = {
  passwordProtectedVideo?: PasswordProtectedVideo$Outbound | undefined;
  videoThumbnail?:
    | VideoCustomizationResponseVideoThumbnail$Outbound
    | undefined;
  "socialbar-v1"?: VideoCustomizationResponseSocialbarV1$Outbound | undefined;
  chapters?: VideoCustomizationResponseChapters$Outbound | undefined;
  "postRoll-v1"?: VideoCustomizationResponsePostRollV1$Outbound | undefined;
  "captions-v1"?: VideoCustomizationResponseCaptionsV1$Outbound | undefined;
};

/** @internal */
export const VideoCustomizationResponsePlugin$outboundSchema: z.ZodType<
  VideoCustomizationResponsePlugin$Outbound,
  z.ZodTypeDef,
  VideoCustomizationResponsePlugin
> = z.object({
  passwordProtectedVideo: z.lazy(() => PasswordProtectedVideo$outboundSchema)
    .optional(),
  videoThumbnail: z.lazy(() =>
    VideoCustomizationResponseVideoThumbnail$outboundSchema
  ).optional(),
  socialbarV1: z.lazy(() =>
    VideoCustomizationResponseSocialbarV1$outboundSchema
  ).optional(),
  chapters: z.lazy(() => VideoCustomizationResponseChapters$outboundSchema)
    .optional(),
  postRollV1: z.lazy(() => VideoCustomizationResponsePostRollV1$outboundSchema)
    .optional(),
  captionsV1: z.lazy(() => VideoCustomizationResponseCaptionsV1$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    socialbarV1: "socialbar-v1",
    postRollV1: "postRoll-v1",
    captionsV1: "captions-v1",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VideoCustomizationResponsePlugin$ {
  /** @deprecated use `VideoCustomizationResponsePlugin$inboundSchema` instead. */
  export const inboundSchema = VideoCustomizationResponsePlugin$inboundSchema;
  /** @deprecated use `VideoCustomizationResponsePlugin$outboundSchema` instead. */
  export const outboundSchema = VideoCustomizationResponsePlugin$outboundSchema;
  /** @deprecated use `VideoCustomizationResponsePlugin$Outbound` instead. */
  export type Outbound = VideoCustomizationResponsePlugin$Outbound;
}

export function videoCustomizationResponsePluginToJSON(
  videoCustomizationResponsePlugin: VideoCustomizationResponsePlugin,
): string {
  return JSON.stringify(
    VideoCustomizationResponsePlugin$outboundSchema.parse(
      videoCustomizationResponsePlugin,
    ),
  );
}

export function videoCustomizationResponsePluginFromJSON(
  jsonString: string,
): SafeParseResult<VideoCustomizationResponsePlugin, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => VideoCustomizationResponsePlugin$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'VideoCustomizationResponsePlugin' from JSON`,
  );
}

/** @internal */
export const Private$inboundSchema: z.ZodType<Private, z.ZodTypeDef, unknown> =
  z.object({
    password_protect_on: z.string().optional(),
    show_comments: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      "password_protect_on": "passwordProtectOn",
      "show_comments": "showComments",
    });
  });

/** @internal */
export type Private$Outbound = {
  password_protect_on?: string | undefined;
  show_comments?: string | undefined;
};

/** @internal */
export const Private$outboundSchema: z.ZodType<
  Private$Outbound,
  z.ZodTypeDef,
  Private
> = z.object({
  passwordProtectOn: z.string().optional(),
  showComments: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    passwordProtectOn: "password_protect_on",
    showComments: "show_comments",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Private$ {
  /** @deprecated use `Private$inboundSchema` instead. */
  export const inboundSchema = Private$inboundSchema;
  /** @deprecated use `Private$outboundSchema` instead. */
  export const outboundSchema = Private$outboundSchema;
  /** @deprecated use `Private$Outbound` instead. */
  export type Outbound = Private$Outbound;
}

export function privateToJSON(value: Private): string {
  return JSON.stringify(Private$outboundSchema.parse(value));
}

export function privateFromJSON(
  jsonString: string,
): SafeParseResult<Private, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Private$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Private' from JSON`,
  );
}

/** @internal */
export const Encrypted$inboundSchema: z.ZodType<
  Encrypted,
  z.ZodTypeDef,
  unknown
> = z.object({
  password_protect_password: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "password_protect_password": "passwordProtectPassword",
  });
});

/** @internal */
export type Encrypted$Outbound = {
  password_protect_password?: string | undefined;
};

/** @internal */
export const Encrypted$outboundSchema: z.ZodType<
  Encrypted$Outbound,
  z.ZodTypeDef,
  Encrypted
> = z.object({
  passwordProtectPassword: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    passwordProtectPassword: "password_protect_password",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Encrypted$ {
  /** @deprecated use `Encrypted$inboundSchema` instead. */
  export const inboundSchema = Encrypted$inboundSchema;
  /** @deprecated use `Encrypted$outboundSchema` instead. */
  export const outboundSchema = Encrypted$outboundSchema;
  /** @deprecated use `Encrypted$Outbound` instead. */
  export type Outbound = Encrypted$Outbound;
}

export function encryptedToJSON(encrypted: Encrypted): string {
  return JSON.stringify(Encrypted$outboundSchema.parse(encrypted));
}

export function encryptedFromJSON(
  jsonString: string,
): SafeParseResult<Encrypted, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Encrypted$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Encrypted' from JSON`,
  );
}

/** @internal */
export const VideoCustomizationResponse$inboundSchema: z.ZodType<
  VideoCustomizationResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  playerColor: z.string().optional(),
  stillUrl: z.string().optional(),
  autoPlay: z.string().optional(),
  bpbTime: z.string().optional(),
  controlsVisibleOnLoad: z.string().optional(),
  endVideoBehavior: z.string().optional(),
  fullscreenButton: z.string().optional(),
  branding: z.string().optional(),
  playbar: z.string().optional(),
  playButton: z.string().optional(),
  settingsControl: z.string().optional(),
  showCustomerLogo: z.string().optional(),
  qualityControl: z.string().optional(),
  playbackRateControl: z.string().optional(),
  smallPlayButton: z.string().optional(),
  spherical: z.string().optional(),
  volumeControl: z.string().optional(),
  copyLinkAndThumbnailEnabled: z.string().optional(),
  doNotTrack: z.string().optional(),
  email: z.string().optional(),
  fitStrategy: z.string().optional(),
  fullscreenOnRotateToLandscape: z.string().optional(),
  muted: z.string().optional(),
  playlistLinks: z.string().optional(),
  playlistLoop: z.string().optional(),
  playsinline: z.string().optional(),
  playPauseNotifier: z.string().optional(),
  playSuspendedOffScreen: z.string().optional(),
  preload: z.string().optional(),
  qualityMax: z.string().optional(),
  qualityMin: z.string().optional(),
  resumable: z.string().optional(),
  seo: z.string().optional(),
  silentAutoPlay: z.string().optional(),
  time: z.string().optional(),
  thumbnailAltText: z.string().optional(),
  videoFoam: z.string().optional(),
  volume: z.string().optional(),
  wmode: z.string().optional(),
  keyMoments: z.string().optional(),
  plugin: z.lazy(() => VideoCustomizationResponsePlugin$inboundSchema)
    .optional(),
  private: z.lazy(() => Private$inboundSchema).optional(),
  encrypted: z.lazy(() => Encrypted$inboundSchema).optional(),
});

/** @internal */
export type VideoCustomizationResponse$Outbound = {
  playerColor?: string | undefined;
  stillUrl?: string | undefined;
  autoPlay?: string | undefined;
  bpbTime?: string | undefined;
  controlsVisibleOnLoad?: string | undefined;
  endVideoBehavior?: string | undefined;
  fullscreenButton?: string | undefined;
  branding?: string | undefined;
  playbar?: string | undefined;
  playButton?: string | undefined;
  settingsControl?: string | undefined;
  showCustomerLogo?: string | undefined;
  qualityControl?: string | undefined;
  playbackRateControl?: string | undefined;
  smallPlayButton?: string | undefined;
  spherical?: string | undefined;
  volumeControl?: string | undefined;
  copyLinkAndThumbnailEnabled?: string | undefined;
  doNotTrack?: string | undefined;
  email?: string | undefined;
  fitStrategy?: string | undefined;
  fullscreenOnRotateToLandscape?: string | undefined;
  muted?: string | undefined;
  playlistLinks?: string | undefined;
  playlistLoop?: string | undefined;
  playsinline?: string | undefined;
  playPauseNotifier?: string | undefined;
  playSuspendedOffScreen?: string | undefined;
  preload?: string | undefined;
  qualityMax?: string | undefined;
  qualityMin?: string | undefined;
  resumable?: string | undefined;
  seo?: string | undefined;
  silentAutoPlay?: string | undefined;
  time?: string | undefined;
  thumbnailAltText?: string | undefined;
  videoFoam?: string | undefined;
  volume?: string | undefined;
  wmode?: string | undefined;
  keyMoments?: string | undefined;
  plugin?: VideoCustomizationResponsePlugin$Outbound | undefined;
  private?: Private$Outbound | undefined;
  encrypted?: Encrypted$Outbound | undefined;
};

/** @internal */
export const VideoCustomizationResponse$outboundSchema: z.ZodType<
  VideoCustomizationResponse$Outbound,
  z.ZodTypeDef,
  VideoCustomizationResponse
> = z.object({
  playerColor: z.string().optional(),
  stillUrl: z.string().optional(),
  autoPlay: z.string().optional(),
  bpbTime: z.string().optional(),
  controlsVisibleOnLoad: z.string().optional(),
  endVideoBehavior: z.string().optional(),
  fullscreenButton: z.string().optional(),
  branding: z.string().optional(),
  playbar: z.string().optional(),
  playButton: z.string().optional(),
  settingsControl: z.string().optional(),
  showCustomerLogo: z.string().optional(),
  qualityControl: z.string().optional(),
  playbackRateControl: z.string().optional(),
  smallPlayButton: z.string().optional(),
  spherical: z.string().optional(),
  volumeControl: z.string().optional(),
  copyLinkAndThumbnailEnabled: z.string().optional(),
  doNotTrack: z.string().optional(),
  email: z.string().optional(),
  fitStrategy: z.string().optional(),
  fullscreenOnRotateToLandscape: z.string().optional(),
  muted: z.string().optional(),
  playlistLinks: z.string().optional(),
  playlistLoop: z.string().optional(),
  playsinline: z.string().optional(),
  playPauseNotifier: z.string().optional(),
  playSuspendedOffScreen: z.string().optional(),
  preload: z.string().optional(),
  qualityMax: z.string().optional(),
  qualityMin: z.string().optional(),
  resumable: z.string().optional(),
  seo: z.string().optional(),
  silentAutoPlay: z.string().optional(),
  time: z.string().optional(),
  thumbnailAltText: z.string().optional(),
  videoFoam: z.string().optional(),
  volume: z.string().optional(),
  wmode: z.string().optional(),
  keyMoments: z.string().optional(),
  plugin: z.lazy(() => VideoCustomizationResponsePlugin$outboundSchema)
    .optional(),
  private: z.lazy(() => Private$outboundSchema).optional(),
  encrypted: z.lazy(() => Encrypted$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VideoCustomizationResponse$ {
  /** @deprecated use `VideoCustomizationResponse$inboundSchema` instead. */
  export const inboundSchema = VideoCustomizationResponse$inboundSchema;
  /** @deprecated use `VideoCustomizationResponse$outboundSchema` instead. */
  export const outboundSchema = VideoCustomizationResponse$outboundSchema;
  /** @deprecated use `VideoCustomizationResponse$Outbound` instead. */
  export type Outbound = VideoCustomizationResponse$Outbound;
}

export function videoCustomizationResponseToJSON(
  videoCustomizationResponse: VideoCustomizationResponse,
): string {
  return JSON.stringify(
    VideoCustomizationResponse$outboundSchema.parse(videoCustomizationResponse),
  );
}

export function videoCustomizationResponseFromJSON(
  jsonString: string,
): SafeParseResult<VideoCustomizationResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => VideoCustomizationResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'VideoCustomizationResponse' from JSON`,
  );
}
