/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type SlimProjectSchemaProject = {
  /**
   * A unique numeric identifier for the project within the system.
   */
  id?: number | undefined;
  /**
   * The projectâ€™s display name.
   */
  name?: string | undefined;
  /**
   * A private hashed id, uniquely identifying the project within the system.
   */
  hashedId?: string | undefined;
};

/** @internal */
export const SlimProjectSchemaProject$inboundSchema: z.ZodType<
  SlimProjectSchemaProject,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.number().int().optional(),
  name: z.string().optional(),
  hashedId: z.string().optional(),
});

/** @internal */
export type SlimProjectSchemaProject$Outbound = {
  id?: number | undefined;
  name?: string | undefined;
  hashedId?: string | undefined;
};

/** @internal */
export const SlimProjectSchemaProject$outboundSchema: z.ZodType<
  SlimProjectSchemaProject$Outbound,
  z.ZodTypeDef,
  SlimProjectSchemaProject
> = z.object({
  id: z.number().int().optional(),
  name: z.string().optional(),
  hashedId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SlimProjectSchemaProject$ {
  /** @deprecated use `SlimProjectSchemaProject$inboundSchema` instead. */
  export const inboundSchema = SlimProjectSchemaProject$inboundSchema;
  /** @deprecated use `SlimProjectSchemaProject$outboundSchema` instead. */
  export const outboundSchema = SlimProjectSchemaProject$outboundSchema;
  /** @deprecated use `SlimProjectSchemaProject$Outbound` instead. */
  export type Outbound = SlimProjectSchemaProject$Outbound;
}

export function slimProjectSchemaProjectToJSON(
  slimProjectSchemaProject: SlimProjectSchemaProject,
): string {
  return JSON.stringify(
    SlimProjectSchemaProject$outboundSchema.parse(slimProjectSchemaProject),
  );
}

export function slimProjectSchemaProjectFromJSON(
  jsonString: string,
): SafeParseResult<SlimProjectSchemaProject, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SlimProjectSchemaProject$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SlimProjectSchemaProject' from JSON`,
  );
}
