/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export const PutMediasMoveServerList = [
  "https://api.wistia.com/v1",
] as const;

export type PutMediasMoveRequest = {
  /**
   * An array of the media hashed IDs to be moved.
   */
  hashedIds: Array<string>;
  /**
   * The hashed ID of the project where you want the media moved.
   */
  projectId: string;
  /**
   * Optional. The hashed ID of the subfolder where you want the media moved. If not provided, media will be moved to the project's default subfolder. The subfolder must belong to the specified project.
   */
  subfolderId?: string | undefined;
};

export type PartialError = {
  mediaId?: string | undefined;
  error?: string | undefined;
};

/**
 * Successfully queued move of at least one media. Other provided hashed_ids failed.
 */
export type PutMediasMoveResponseBody2 = {
  message?: string | undefined;
  /**
   * Status of the background job.
   */
  backgroundJobStatus?: models.BackgroundJobStatus | undefined;
  partialErrors?: Array<PartialError> | undefined;
};

/**
 * Successfully queued move of all the media.
 */
export type PutMediasMoveResponseBody1 = {
  message?: string | undefined;
  /**
   * Status of the background job.
   */
  backgroundJobStatus?: models.BackgroundJobStatus | undefined;
};

export type PutMediasMoveResponse =
  | PutMediasMoveResponseBody1
  | PutMediasMoveResponseBody2;

/** @internal */
export const PutMediasMoveRequest$inboundSchema: z.ZodType<
  PutMediasMoveRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  hashed_ids: z.array(z.string()),
  project_id: z.string(),
  subfolder_id: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "hashed_ids": "hashedIds",
    "project_id": "projectId",
    "subfolder_id": "subfolderId",
  });
});

/** @internal */
export type PutMediasMoveRequest$Outbound = {
  hashed_ids: Array<string>;
  project_id: string;
  subfolder_id?: string | undefined;
};

/** @internal */
export const PutMediasMoveRequest$outboundSchema: z.ZodType<
  PutMediasMoveRequest$Outbound,
  z.ZodTypeDef,
  PutMediasMoveRequest
> = z.object({
  hashedIds: z.array(z.string()),
  projectId: z.string(),
  subfolderId: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    hashedIds: "hashed_ids",
    projectId: "project_id",
    subfolderId: "subfolder_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutMediasMoveRequest$ {
  /** @deprecated use `PutMediasMoveRequest$inboundSchema` instead. */
  export const inboundSchema = PutMediasMoveRequest$inboundSchema;
  /** @deprecated use `PutMediasMoveRequest$outboundSchema` instead. */
  export const outboundSchema = PutMediasMoveRequest$outboundSchema;
  /** @deprecated use `PutMediasMoveRequest$Outbound` instead. */
  export type Outbound = PutMediasMoveRequest$Outbound;
}

export function putMediasMoveRequestToJSON(
  putMediasMoveRequest: PutMediasMoveRequest,
): string {
  return JSON.stringify(
    PutMediasMoveRequest$outboundSchema.parse(putMediasMoveRequest),
  );
}

export function putMediasMoveRequestFromJSON(
  jsonString: string,
): SafeParseResult<PutMediasMoveRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PutMediasMoveRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PutMediasMoveRequest' from JSON`,
  );
}

/** @internal */
export const PartialError$inboundSchema: z.ZodType<
  PartialError,
  z.ZodTypeDef,
  unknown
> = z.object({
  media_id: z.string().optional(),
  error: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "media_id": "mediaId",
  });
});

/** @internal */
export type PartialError$Outbound = {
  media_id?: string | undefined;
  error?: string | undefined;
};

/** @internal */
export const PartialError$outboundSchema: z.ZodType<
  PartialError$Outbound,
  z.ZodTypeDef,
  PartialError
> = z.object({
  mediaId: z.string().optional(),
  error: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    mediaId: "media_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PartialError$ {
  /** @deprecated use `PartialError$inboundSchema` instead. */
  export const inboundSchema = PartialError$inboundSchema;
  /** @deprecated use `PartialError$outboundSchema` instead. */
  export const outboundSchema = PartialError$outboundSchema;
  /** @deprecated use `PartialError$Outbound` instead. */
  export type Outbound = PartialError$Outbound;
}

export function partialErrorToJSON(partialError: PartialError): string {
  return JSON.stringify(PartialError$outboundSchema.parse(partialError));
}

export function partialErrorFromJSON(
  jsonString: string,
): SafeParseResult<PartialError, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PartialError$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PartialError' from JSON`,
  );
}

/** @internal */
export const PutMediasMoveResponseBody2$inboundSchema: z.ZodType<
  PutMediasMoveResponseBody2,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string().optional(),
  background_job_status: models.BackgroundJobStatus$inboundSchema.optional(),
  partial_errors: z.array(z.lazy(() => PartialError$inboundSchema)).optional(),
}).transform((v) => {
  return remap$(v, {
    "background_job_status": "backgroundJobStatus",
    "partial_errors": "partialErrors",
  });
});

/** @internal */
export type PutMediasMoveResponseBody2$Outbound = {
  message?: string | undefined;
  background_job_status?: models.BackgroundJobStatus$Outbound | undefined;
  partial_errors?: Array<PartialError$Outbound> | undefined;
};

/** @internal */
export const PutMediasMoveResponseBody2$outboundSchema: z.ZodType<
  PutMediasMoveResponseBody2$Outbound,
  z.ZodTypeDef,
  PutMediasMoveResponseBody2
> = z.object({
  message: z.string().optional(),
  backgroundJobStatus: models.BackgroundJobStatus$outboundSchema.optional(),
  partialErrors: z.array(z.lazy(() => PartialError$outboundSchema)).optional(),
}).transform((v) => {
  return remap$(v, {
    backgroundJobStatus: "background_job_status",
    partialErrors: "partial_errors",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutMediasMoveResponseBody2$ {
  /** @deprecated use `PutMediasMoveResponseBody2$inboundSchema` instead. */
  export const inboundSchema = PutMediasMoveResponseBody2$inboundSchema;
  /** @deprecated use `PutMediasMoveResponseBody2$outboundSchema` instead. */
  export const outboundSchema = PutMediasMoveResponseBody2$outboundSchema;
  /** @deprecated use `PutMediasMoveResponseBody2$Outbound` instead. */
  export type Outbound = PutMediasMoveResponseBody2$Outbound;
}

export function putMediasMoveResponseBody2ToJSON(
  putMediasMoveResponseBody2: PutMediasMoveResponseBody2,
): string {
  return JSON.stringify(
    PutMediasMoveResponseBody2$outboundSchema.parse(putMediasMoveResponseBody2),
  );
}

export function putMediasMoveResponseBody2FromJSON(
  jsonString: string,
): SafeParseResult<PutMediasMoveResponseBody2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PutMediasMoveResponseBody2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PutMediasMoveResponseBody2' from JSON`,
  );
}

/** @internal */
export const PutMediasMoveResponseBody1$inboundSchema: z.ZodType<
  PutMediasMoveResponseBody1,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string().optional(),
  background_job_status: models.BackgroundJobStatus$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "background_job_status": "backgroundJobStatus",
  });
});

/** @internal */
export type PutMediasMoveResponseBody1$Outbound = {
  message?: string | undefined;
  background_job_status?: models.BackgroundJobStatus$Outbound | undefined;
};

/** @internal */
export const PutMediasMoveResponseBody1$outboundSchema: z.ZodType<
  PutMediasMoveResponseBody1$Outbound,
  z.ZodTypeDef,
  PutMediasMoveResponseBody1
> = z.object({
  message: z.string().optional(),
  backgroundJobStatus: models.BackgroundJobStatus$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    backgroundJobStatus: "background_job_status",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutMediasMoveResponseBody1$ {
  /** @deprecated use `PutMediasMoveResponseBody1$inboundSchema` instead. */
  export const inboundSchema = PutMediasMoveResponseBody1$inboundSchema;
  /** @deprecated use `PutMediasMoveResponseBody1$outboundSchema` instead. */
  export const outboundSchema = PutMediasMoveResponseBody1$outboundSchema;
  /** @deprecated use `PutMediasMoveResponseBody1$Outbound` instead. */
  export type Outbound = PutMediasMoveResponseBody1$Outbound;
}

export function putMediasMoveResponseBody1ToJSON(
  putMediasMoveResponseBody1: PutMediasMoveResponseBody1,
): string {
  return JSON.stringify(
    PutMediasMoveResponseBody1$outboundSchema.parse(putMediasMoveResponseBody1),
  );
}

export function putMediasMoveResponseBody1FromJSON(
  jsonString: string,
): SafeParseResult<PutMediasMoveResponseBody1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PutMediasMoveResponseBody1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PutMediasMoveResponseBody1' from JSON`,
  );
}

/** @internal */
export const PutMediasMoveResponse$inboundSchema: z.ZodType<
  PutMediasMoveResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => PutMediasMoveResponseBody1$inboundSchema),
  z.lazy(() => PutMediasMoveResponseBody2$inboundSchema),
]);

/** @internal */
export type PutMediasMoveResponse$Outbound =
  | PutMediasMoveResponseBody1$Outbound
  | PutMediasMoveResponseBody2$Outbound;

/** @internal */
export const PutMediasMoveResponse$outboundSchema: z.ZodType<
  PutMediasMoveResponse$Outbound,
  z.ZodTypeDef,
  PutMediasMoveResponse
> = z.union([
  z.lazy(() => PutMediasMoveResponseBody1$outboundSchema),
  z.lazy(() => PutMediasMoveResponseBody2$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutMediasMoveResponse$ {
  /** @deprecated use `PutMediasMoveResponse$inboundSchema` instead. */
  export const inboundSchema = PutMediasMoveResponse$inboundSchema;
  /** @deprecated use `PutMediasMoveResponse$outboundSchema` instead. */
  export const outboundSchema = PutMediasMoveResponse$outboundSchema;
  /** @deprecated use `PutMediasMoveResponse$Outbound` instead. */
  export type Outbound = PutMediasMoveResponse$Outbound;
}

export function putMediasMoveResponseToJSON(
  putMediasMoveResponse: PutMediasMoveResponse,
): string {
  return JSON.stringify(
    PutMediasMoveResponse$outboundSchema.parse(putMediasMoveResponse),
  );
}

export function putMediasMoveResponseFromJSON(
  jsonString: string,
): SafeParseResult<PutMediasMoveResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PutMediasMoveResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PutMediasMoveResponse' from JSON`,
  );
}
