/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type GetChannelEpisodesRequest = {
  /**
   * Find episodes for a particular channel by providing the channel hashed ID
   */
  channelId?: string | undefined;
  /**
   * Ordering. Default is ID ASC.
   */
  sortBy?: models.SortBy | undefined;
  /**
   * Ordering Sort Direction (0 = desc, 1 = asc; default is 1)
   */
  sortDirection?: models.SortDirection | undefined;
  /**
   * Page number to retrieve
   */
  page?: number | undefined;
  /**
   * Number of channels per page
   */
  perPage?: number | undefined;
  /**
   * Filter by media id
   */
  mediaId?: Array<string> | undefined;
  /**
   * Filter by hashed id
   */
  hashedId?: models.HashedId | undefined;
  /**
   * Filter by published status.
   */
  published?: boolean | undefined;
  /**
   * Filter by channel episode name/title.
   */
  title?: string | undefined;
};

/** @internal */
export const GetChannelEpisodesRequest$inboundSchema: z.ZodType<
  GetChannelEpisodesRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  channel_id: z.string().optional(),
  sort_by: models.SortBy$inboundSchema.optional(),
  sort_direction: models.SortDirection$inboundSchema.optional(),
  page: z.number().int().optional(),
  per_page: z.number().int().optional(),
  media_id: z.array(z.string()).optional(),
  hashed_id: models.HashedId$inboundSchema.optional(),
  published: z.boolean().optional(),
  title: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "channel_id": "channelId",
    "sort_by": "sortBy",
    "sort_direction": "sortDirection",
    "per_page": "perPage",
    "media_id": "mediaId",
    "hashed_id": "hashedId",
  });
});

/** @internal */
export type GetChannelEpisodesRequest$Outbound = {
  channel_id?: string | undefined;
  sort_by?: string | undefined;
  sort_direction?: number | undefined;
  page?: number | undefined;
  per_page?: number | undefined;
  media_id?: Array<string> | undefined;
  hashed_id?: models.HashedId$Outbound | undefined;
  published?: boolean | undefined;
  title?: string | undefined;
};

/** @internal */
export const GetChannelEpisodesRequest$outboundSchema: z.ZodType<
  GetChannelEpisodesRequest$Outbound,
  z.ZodTypeDef,
  GetChannelEpisodesRequest
> = z.object({
  channelId: z.string().optional(),
  sortBy: models.SortBy$outboundSchema.optional(),
  sortDirection: models.SortDirection$outboundSchema.optional(),
  page: z.number().int().optional(),
  perPage: z.number().int().optional(),
  mediaId: z.array(z.string()).optional(),
  hashedId: models.HashedId$outboundSchema.optional(),
  published: z.boolean().optional(),
  title: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    channelId: "channel_id",
    sortBy: "sort_by",
    sortDirection: "sort_direction",
    perPage: "per_page",
    mediaId: "media_id",
    hashedId: "hashed_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetChannelEpisodesRequest$ {
  /** @deprecated use `GetChannelEpisodesRequest$inboundSchema` instead. */
  export const inboundSchema = GetChannelEpisodesRequest$inboundSchema;
  /** @deprecated use `GetChannelEpisodesRequest$outboundSchema` instead. */
  export const outboundSchema = GetChannelEpisodesRequest$outboundSchema;
  /** @deprecated use `GetChannelEpisodesRequest$Outbound` instead. */
  export type Outbound = GetChannelEpisodesRequest$Outbound;
}

export function getChannelEpisodesRequestToJSON(
  getChannelEpisodesRequest: GetChannelEpisodesRequest,
): string {
  return JSON.stringify(
    GetChannelEpisodesRequest$outboundSchema.parse(getChannelEpisodesRequest),
  );
}

export function getChannelEpisodesRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetChannelEpisodesRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetChannelEpisodesRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetChannelEpisodesRequest' from JSON`,
  );
}
