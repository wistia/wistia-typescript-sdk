/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DeleteProjectsProjectIdSubfoldersSubfolderIdRequest = {
  /**
   * The hashed ID of the project
   */
  projectId: string;
  /**
   * The hashed ID of the subfolder
   */
  subfolderId: string;
};

/** @internal */
export const DeleteProjectsProjectIdSubfoldersSubfolderIdRequest$inboundSchema:
  z.ZodType<
    DeleteProjectsProjectIdSubfoldersSubfolderIdRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    "project-id": z.string(),
    "subfolder-id": z.string(),
  }).transform((v) => {
    return remap$(v, {
      "project-id": "projectId",
      "subfolder-id": "subfolderId",
    });
  });

/** @internal */
export type DeleteProjectsProjectIdSubfoldersSubfolderIdRequest$Outbound = {
  "project-id": string;
  "subfolder-id": string;
};

/** @internal */
export const DeleteProjectsProjectIdSubfoldersSubfolderIdRequest$outboundSchema:
  z.ZodType<
    DeleteProjectsProjectIdSubfoldersSubfolderIdRequest$Outbound,
    z.ZodTypeDef,
    DeleteProjectsProjectIdSubfoldersSubfolderIdRequest
  > = z.object({
    projectId: z.string(),
    subfolderId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      projectId: "project-id",
      subfolderId: "subfolder-id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteProjectsProjectIdSubfoldersSubfolderIdRequest$ {
  /** @deprecated use `DeleteProjectsProjectIdSubfoldersSubfolderIdRequest$inboundSchema` instead. */
  export const inboundSchema =
    DeleteProjectsProjectIdSubfoldersSubfolderIdRequest$inboundSchema;
  /** @deprecated use `DeleteProjectsProjectIdSubfoldersSubfolderIdRequest$outboundSchema` instead. */
  export const outboundSchema =
    DeleteProjectsProjectIdSubfoldersSubfolderIdRequest$outboundSchema;
  /** @deprecated use `DeleteProjectsProjectIdSubfoldersSubfolderIdRequest$Outbound` instead. */
  export type Outbound =
    DeleteProjectsProjectIdSubfoldersSubfolderIdRequest$Outbound;
}

export function deleteProjectsProjectIdSubfoldersSubfolderIdRequestToJSON(
  deleteProjectsProjectIdSubfoldersSubfolderIdRequest:
    DeleteProjectsProjectIdSubfoldersSubfolderIdRequest,
): string {
  return JSON.stringify(
    DeleteProjectsProjectIdSubfoldersSubfolderIdRequest$outboundSchema.parse(
      deleteProjectsProjectIdSubfoldersSubfolderIdRequest,
    ),
  );
}

export function deleteProjectsProjectIdSubfoldersSubfolderIdRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  DeleteProjectsProjectIdSubfoldersSubfolderIdRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      DeleteProjectsProjectIdSubfoldersSubfolderIdRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'DeleteProjectsProjectIdSubfoldersSubfolderIdRequest' from JSON`,
  );
}
