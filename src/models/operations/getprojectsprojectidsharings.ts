/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const GetProjectsProjectIdSharingsServerList = [
  "https://api.wistia.com/v1",
] as const;

export type GetProjectsProjectIdSharingsRequest = {
  /**
   * Project Hashed ID
   */
  projectId: string;
  /**
   * Page number to retrieve
   */
  page?: number | undefined;
  /**
   * Number of projects per page
   */
  perPage?: number | undefined;
};

/** @internal */
export const GetProjectsProjectIdSharingsRequest$inboundSchema: z.ZodType<
  GetProjectsProjectIdSharingsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "project-id": z.string(),
  page: z.number().int().optional(),
  per_page: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    "project-id": "projectId",
    "per_page": "perPage",
  });
});

/** @internal */
export type GetProjectsProjectIdSharingsRequest$Outbound = {
  "project-id": string;
  page?: number | undefined;
  per_page?: number | undefined;
};

/** @internal */
export const GetProjectsProjectIdSharingsRequest$outboundSchema: z.ZodType<
  GetProjectsProjectIdSharingsRequest$Outbound,
  z.ZodTypeDef,
  GetProjectsProjectIdSharingsRequest
> = z.object({
  projectId: z.string(),
  page: z.number().int().optional(),
  perPage: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    projectId: "project-id",
    perPage: "per_page",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetProjectsProjectIdSharingsRequest$ {
  /** @deprecated use `GetProjectsProjectIdSharingsRequest$inboundSchema` instead. */
  export const inboundSchema =
    GetProjectsProjectIdSharingsRequest$inboundSchema;
  /** @deprecated use `GetProjectsProjectIdSharingsRequest$outboundSchema` instead. */
  export const outboundSchema =
    GetProjectsProjectIdSharingsRequest$outboundSchema;
  /** @deprecated use `GetProjectsProjectIdSharingsRequest$Outbound` instead. */
  export type Outbound = GetProjectsProjectIdSharingsRequest$Outbound;
}

export function getProjectsProjectIdSharingsRequestToJSON(
  getProjectsProjectIdSharingsRequest: GetProjectsProjectIdSharingsRequest,
): string {
  return JSON.stringify(
    GetProjectsProjectIdSharingsRequest$outboundSchema.parse(
      getProjectsProjectIdSharingsRequest,
    ),
  );
}

export function getProjectsProjectIdSharingsRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetProjectsProjectIdSharingsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetProjectsProjectIdSharingsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetProjectsProjectIdSharingsRequest' from JSON`,
  );
}
