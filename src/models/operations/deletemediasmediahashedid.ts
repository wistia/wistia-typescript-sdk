/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DeleteMediasMediaHashedIdRequest = {
  /**
   * The hashed ID of the media.
   */
  mediaHashedId: string;
};

/** @internal */
export const DeleteMediasMediaHashedIdRequest$inboundSchema: z.ZodType<
  DeleteMediasMediaHashedIdRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  mediaHashedId: z.string(),
});

/** @internal */
export type DeleteMediasMediaHashedIdRequest$Outbound = {
  mediaHashedId: string;
};

/** @internal */
export const DeleteMediasMediaHashedIdRequest$outboundSchema: z.ZodType<
  DeleteMediasMediaHashedIdRequest$Outbound,
  z.ZodTypeDef,
  DeleteMediasMediaHashedIdRequest
> = z.object({
  mediaHashedId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteMediasMediaHashedIdRequest$ {
  /** @deprecated use `DeleteMediasMediaHashedIdRequest$inboundSchema` instead. */
  export const inboundSchema = DeleteMediasMediaHashedIdRequest$inboundSchema;
  /** @deprecated use `DeleteMediasMediaHashedIdRequest$outboundSchema` instead. */
  export const outboundSchema = DeleteMediasMediaHashedIdRequest$outboundSchema;
  /** @deprecated use `DeleteMediasMediaHashedIdRequest$Outbound` instead. */
  export type Outbound = DeleteMediasMediaHashedIdRequest$Outbound;
}

export function deleteMediasMediaHashedIdRequestToJSON(
  deleteMediasMediaHashedIdRequest: DeleteMediasMediaHashedIdRequest,
): string {
  return JSON.stringify(
    DeleteMediasMediaHashedIdRequest$outboundSchema.parse(
      deleteMediasMediaHashedIdRequest,
    ),
  );
}

export function deleteMediasMediaHashedIdRequestFromJSON(
  jsonString: string,
): SafeParseResult<DeleteMediasMediaHashedIdRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteMediasMediaHashedIdRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteMediasMediaHashedIdRequest' from JSON`,
  );
}
