/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Updated subfolder data
 */
export type PutProjectsProjectIdSubfoldersSubfolderIdRequestBody = {
  /**
   * The new name for the subfolder
   */
  name?: string | undefined;
  /**
   * The new description for the subfolder
   */
  description?: string | null | undefined;
};

export type PutProjectsProjectIdSubfoldersSubfolderIdRequest = {
  /**
   * The hashed ID of the project
   */
  projectId: string;
  /**
   * The hashed ID of the subfolder
   */
  subfolderId: string;
  /**
   * Updated subfolder data
   */
  requestBody: PutProjectsProjectIdSubfoldersSubfolderIdRequestBody;
};

/** @internal */
export const PutProjectsProjectIdSubfoldersSubfolderIdRequestBody$inboundSchema:
  z.ZodType<
    PutProjectsProjectIdSubfoldersSubfolderIdRequestBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    name: z.string().optional(),
    description: z.nullable(z.string()).optional(),
  });

/** @internal */
export type PutProjectsProjectIdSubfoldersSubfolderIdRequestBody$Outbound = {
  name?: string | undefined;
  description?: string | null | undefined;
};

/** @internal */
export const PutProjectsProjectIdSubfoldersSubfolderIdRequestBody$outboundSchema:
  z.ZodType<
    PutProjectsProjectIdSubfoldersSubfolderIdRequestBody$Outbound,
    z.ZodTypeDef,
    PutProjectsProjectIdSubfoldersSubfolderIdRequestBody
  > = z.object({
    name: z.string().optional(),
    description: z.nullable(z.string()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutProjectsProjectIdSubfoldersSubfolderIdRequestBody$ {
  /** @deprecated use `PutProjectsProjectIdSubfoldersSubfolderIdRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    PutProjectsProjectIdSubfoldersSubfolderIdRequestBody$inboundSchema;
  /** @deprecated use `PutProjectsProjectIdSubfoldersSubfolderIdRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    PutProjectsProjectIdSubfoldersSubfolderIdRequestBody$outboundSchema;
  /** @deprecated use `PutProjectsProjectIdSubfoldersSubfolderIdRequestBody$Outbound` instead. */
  export type Outbound =
    PutProjectsProjectIdSubfoldersSubfolderIdRequestBody$Outbound;
}

export function putProjectsProjectIdSubfoldersSubfolderIdRequestBodyToJSON(
  putProjectsProjectIdSubfoldersSubfolderIdRequestBody:
    PutProjectsProjectIdSubfoldersSubfolderIdRequestBody,
): string {
  return JSON.stringify(
    PutProjectsProjectIdSubfoldersSubfolderIdRequestBody$outboundSchema.parse(
      putProjectsProjectIdSubfoldersSubfolderIdRequestBody,
    ),
  );
}

export function putProjectsProjectIdSubfoldersSubfolderIdRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  PutProjectsProjectIdSubfoldersSubfolderIdRequestBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutProjectsProjectIdSubfoldersSubfolderIdRequestBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PutProjectsProjectIdSubfoldersSubfolderIdRequestBody' from JSON`,
  );
}

/** @internal */
export const PutProjectsProjectIdSubfoldersSubfolderIdRequest$inboundSchema:
  z.ZodType<
    PutProjectsProjectIdSubfoldersSubfolderIdRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    "project-id": z.string(),
    "subfolder-id": z.string(),
    RequestBody: z.lazy(() =>
      PutProjectsProjectIdSubfoldersSubfolderIdRequestBody$inboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      "project-id": "projectId",
      "subfolder-id": "subfolderId",
      "RequestBody": "requestBody",
    });
  });

/** @internal */
export type PutProjectsProjectIdSubfoldersSubfolderIdRequest$Outbound = {
  "project-id": string;
  "subfolder-id": string;
  RequestBody: PutProjectsProjectIdSubfoldersSubfolderIdRequestBody$Outbound;
};

/** @internal */
export const PutProjectsProjectIdSubfoldersSubfolderIdRequest$outboundSchema:
  z.ZodType<
    PutProjectsProjectIdSubfoldersSubfolderIdRequest$Outbound,
    z.ZodTypeDef,
    PutProjectsProjectIdSubfoldersSubfolderIdRequest
  > = z.object({
    projectId: z.string(),
    subfolderId: z.string(),
    requestBody: z.lazy(() =>
      PutProjectsProjectIdSubfoldersSubfolderIdRequestBody$outboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      projectId: "project-id",
      subfolderId: "subfolder-id",
      requestBody: "RequestBody",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutProjectsProjectIdSubfoldersSubfolderIdRequest$ {
  /** @deprecated use `PutProjectsProjectIdSubfoldersSubfolderIdRequest$inboundSchema` instead. */
  export const inboundSchema =
    PutProjectsProjectIdSubfoldersSubfolderIdRequest$inboundSchema;
  /** @deprecated use `PutProjectsProjectIdSubfoldersSubfolderIdRequest$outboundSchema` instead. */
  export const outboundSchema =
    PutProjectsProjectIdSubfoldersSubfolderIdRequest$outboundSchema;
  /** @deprecated use `PutProjectsProjectIdSubfoldersSubfolderIdRequest$Outbound` instead. */
  export type Outbound =
    PutProjectsProjectIdSubfoldersSubfolderIdRequest$Outbound;
}

export function putProjectsProjectIdSubfoldersSubfolderIdRequestToJSON(
  putProjectsProjectIdSubfoldersSubfolderIdRequest:
    PutProjectsProjectIdSubfoldersSubfolderIdRequest,
): string {
  return JSON.stringify(
    PutProjectsProjectIdSubfoldersSubfolderIdRequest$outboundSchema.parse(
      putProjectsProjectIdSubfoldersSubfolderIdRequest,
    ),
  );
}

export function putProjectsProjectIdSubfoldersSubfolderIdRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  PutProjectsProjectIdSubfoldersSubfolderIdRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutProjectsProjectIdSubfoldersSubfolderIdRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PutProjectsProjectIdSubfoldersSubfolderIdRequest' from JSON`,
  );
}
