/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type PutMediasMediaHashedIdSwapRequestBody = {
  /**
   * The hashed ID of the media that will replace the original media. Must be the same media type as the original.
   */
  replacementMediaId: string;
};

export type PutMediasMediaHashedIdSwapRequest = {
  /**
   * The hashed ID of the media to be replaced.
   */
  mediaHashedId: string;
  requestBody?: PutMediasMediaHashedIdSwapRequestBody | undefined;
};

/**
 * Successfully queued background job for media swap.
 */
export type PutMediasMediaHashedIdSwapResponse = {
  message?: string | undefined;
  media?: models.MediaProperties | undefined;
  /**
   * Status of the background job.
   */
  backgroundJobStatus?: models.BackgroundJobStatus | undefined;
};

/** @internal */
export const PutMediasMediaHashedIdSwapRequestBody$inboundSchema: z.ZodType<
  PutMediasMediaHashedIdSwapRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  replacement_media_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "replacement_media_id": "replacementMediaId",
  });
});

/** @internal */
export type PutMediasMediaHashedIdSwapRequestBody$Outbound = {
  replacement_media_id: string;
};

/** @internal */
export const PutMediasMediaHashedIdSwapRequestBody$outboundSchema: z.ZodType<
  PutMediasMediaHashedIdSwapRequestBody$Outbound,
  z.ZodTypeDef,
  PutMediasMediaHashedIdSwapRequestBody
> = z.object({
  replacementMediaId: z.string(),
}).transform((v) => {
  return remap$(v, {
    replacementMediaId: "replacement_media_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutMediasMediaHashedIdSwapRequestBody$ {
  /** @deprecated use `PutMediasMediaHashedIdSwapRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    PutMediasMediaHashedIdSwapRequestBody$inboundSchema;
  /** @deprecated use `PutMediasMediaHashedIdSwapRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    PutMediasMediaHashedIdSwapRequestBody$outboundSchema;
  /** @deprecated use `PutMediasMediaHashedIdSwapRequestBody$Outbound` instead. */
  export type Outbound = PutMediasMediaHashedIdSwapRequestBody$Outbound;
}

export function putMediasMediaHashedIdSwapRequestBodyToJSON(
  putMediasMediaHashedIdSwapRequestBody: PutMediasMediaHashedIdSwapRequestBody,
): string {
  return JSON.stringify(
    PutMediasMediaHashedIdSwapRequestBody$outboundSchema.parse(
      putMediasMediaHashedIdSwapRequestBody,
    ),
  );
}

export function putMediasMediaHashedIdSwapRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<PutMediasMediaHashedIdSwapRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      PutMediasMediaHashedIdSwapRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PutMediasMediaHashedIdSwapRequestBody' from JSON`,
  );
}

/** @internal */
export const PutMediasMediaHashedIdSwapRequest$inboundSchema: z.ZodType<
  PutMediasMediaHashedIdSwapRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  mediaHashedId: z.string(),
  RequestBody: z.lazy(() => PutMediasMediaHashedIdSwapRequestBody$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type PutMediasMediaHashedIdSwapRequest$Outbound = {
  mediaHashedId: string;
  RequestBody?: PutMediasMediaHashedIdSwapRequestBody$Outbound | undefined;
};

/** @internal */
export const PutMediasMediaHashedIdSwapRequest$outboundSchema: z.ZodType<
  PutMediasMediaHashedIdSwapRequest$Outbound,
  z.ZodTypeDef,
  PutMediasMediaHashedIdSwapRequest
> = z.object({
  mediaHashedId: z.string(),
  requestBody: z.lazy(() =>
    PutMediasMediaHashedIdSwapRequestBody$outboundSchema
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutMediasMediaHashedIdSwapRequest$ {
  /** @deprecated use `PutMediasMediaHashedIdSwapRequest$inboundSchema` instead. */
  export const inboundSchema = PutMediasMediaHashedIdSwapRequest$inboundSchema;
  /** @deprecated use `PutMediasMediaHashedIdSwapRequest$outboundSchema` instead. */
  export const outboundSchema =
    PutMediasMediaHashedIdSwapRequest$outboundSchema;
  /** @deprecated use `PutMediasMediaHashedIdSwapRequest$Outbound` instead. */
  export type Outbound = PutMediasMediaHashedIdSwapRequest$Outbound;
}

export function putMediasMediaHashedIdSwapRequestToJSON(
  putMediasMediaHashedIdSwapRequest: PutMediasMediaHashedIdSwapRequest,
): string {
  return JSON.stringify(
    PutMediasMediaHashedIdSwapRequest$outboundSchema.parse(
      putMediasMediaHashedIdSwapRequest,
    ),
  );
}

export function putMediasMediaHashedIdSwapRequestFromJSON(
  jsonString: string,
): SafeParseResult<PutMediasMediaHashedIdSwapRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PutMediasMediaHashedIdSwapRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PutMediasMediaHashedIdSwapRequest' from JSON`,
  );
}

/** @internal */
export const PutMediasMediaHashedIdSwapResponse$inboundSchema: z.ZodType<
  PutMediasMediaHashedIdSwapResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string().optional(),
  media: models.MediaProperties$inboundSchema.optional(),
  background_job_status: models.BackgroundJobStatus$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "background_job_status": "backgroundJobStatus",
  });
});

/** @internal */
export type PutMediasMediaHashedIdSwapResponse$Outbound = {
  message?: string | undefined;
  media?: models.MediaProperties$Outbound | undefined;
  background_job_status?: models.BackgroundJobStatus$Outbound | undefined;
};

/** @internal */
export const PutMediasMediaHashedIdSwapResponse$outboundSchema: z.ZodType<
  PutMediasMediaHashedIdSwapResponse$Outbound,
  z.ZodTypeDef,
  PutMediasMediaHashedIdSwapResponse
> = z.object({
  message: z.string().optional(),
  media: models.MediaProperties$outboundSchema.optional(),
  backgroundJobStatus: models.BackgroundJobStatus$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    backgroundJobStatus: "background_job_status",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutMediasMediaHashedIdSwapResponse$ {
  /** @deprecated use `PutMediasMediaHashedIdSwapResponse$inboundSchema` instead. */
  export const inboundSchema = PutMediasMediaHashedIdSwapResponse$inboundSchema;
  /** @deprecated use `PutMediasMediaHashedIdSwapResponse$outboundSchema` instead. */
  export const outboundSchema =
    PutMediasMediaHashedIdSwapResponse$outboundSchema;
  /** @deprecated use `PutMediasMediaHashedIdSwapResponse$Outbound` instead. */
  export type Outbound = PutMediasMediaHashedIdSwapResponse$Outbound;
}

export function putMediasMediaHashedIdSwapResponseToJSON(
  putMediasMediaHashedIdSwapResponse: PutMediasMediaHashedIdSwapResponse,
): string {
  return JSON.stringify(
    PutMediasMediaHashedIdSwapResponse$outboundSchema.parse(
      putMediasMediaHashedIdSwapResponse,
    ),
  );
}

export function putMediasMediaHashedIdSwapResponseFromJSON(
  jsonString: string,
): SafeParseResult<PutMediasMediaHashedIdSwapResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      PutMediasMediaHashedIdSwapResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PutMediasMediaHashedIdSwapResponse' from JSON`,
  );
}
