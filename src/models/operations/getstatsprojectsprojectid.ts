/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetStatsProjectsProjectIdRequest = {
  /**
   * The Hashed ID or ID of the project for which you want to retrieve stats.
   */
  projectId: string;
};

/**
 * Success response with the stats of the project.
 */
export type GetStatsProjectsProjectIdResponse = {
  /**
   * The total number of times the videos in this project have been loaded.
   */
  loadCount?: number | undefined;
  /**
   * The total number of times the videos in this project have been played.
   */
  playCount?: number | undefined;
  /**
   * The total time spent viewing the videos in this project.
   */
  hoursWatched?: number | undefined;
  /**
   * The total number of videos in this project.
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  numberOfVideos?: number | undefined;
};

/** @internal */
export const GetStatsProjectsProjectIdRequest$inboundSchema: z.ZodType<
  GetStatsProjectsProjectIdRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  projectId: z.string(),
});

/** @internal */
export type GetStatsProjectsProjectIdRequest$Outbound = {
  projectId: string;
};

/** @internal */
export const GetStatsProjectsProjectIdRequest$outboundSchema: z.ZodType<
  GetStatsProjectsProjectIdRequest$Outbound,
  z.ZodTypeDef,
  GetStatsProjectsProjectIdRequest
> = z.object({
  projectId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetStatsProjectsProjectIdRequest$ {
  /** @deprecated use `GetStatsProjectsProjectIdRequest$inboundSchema` instead. */
  export const inboundSchema = GetStatsProjectsProjectIdRequest$inboundSchema;
  /** @deprecated use `GetStatsProjectsProjectIdRequest$outboundSchema` instead. */
  export const outboundSchema = GetStatsProjectsProjectIdRequest$outboundSchema;
  /** @deprecated use `GetStatsProjectsProjectIdRequest$Outbound` instead. */
  export type Outbound = GetStatsProjectsProjectIdRequest$Outbound;
}

export function getStatsProjectsProjectIdRequestToJSON(
  getStatsProjectsProjectIdRequest: GetStatsProjectsProjectIdRequest,
): string {
  return JSON.stringify(
    GetStatsProjectsProjectIdRequest$outboundSchema.parse(
      getStatsProjectsProjectIdRequest,
    ),
  );
}

export function getStatsProjectsProjectIdRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetStatsProjectsProjectIdRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetStatsProjectsProjectIdRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetStatsProjectsProjectIdRequest' from JSON`,
  );
}

/** @internal */
export const GetStatsProjectsProjectIdResponse$inboundSchema: z.ZodType<
  GetStatsProjectsProjectIdResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  load_count: z.number().int().optional(),
  play_count: z.number().int().optional(),
  hours_watched: z.number().optional(),
  number_of_videos: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    "load_count": "loadCount",
    "play_count": "playCount",
    "hours_watched": "hoursWatched",
    "number_of_videos": "numberOfVideos",
  });
});

/** @internal */
export type GetStatsProjectsProjectIdResponse$Outbound = {
  load_count?: number | undefined;
  play_count?: number | undefined;
  hours_watched?: number | undefined;
  number_of_videos?: number | undefined;
};

/** @internal */
export const GetStatsProjectsProjectIdResponse$outboundSchema: z.ZodType<
  GetStatsProjectsProjectIdResponse$Outbound,
  z.ZodTypeDef,
  GetStatsProjectsProjectIdResponse
> = z.object({
  loadCount: z.number().int().optional(),
  playCount: z.number().int().optional(),
  hoursWatched: z.number().optional(),
  numberOfVideos: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    loadCount: "load_count",
    playCount: "play_count",
    hoursWatched: "hours_watched",
    numberOfVideos: "number_of_videos",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetStatsProjectsProjectIdResponse$ {
  /** @deprecated use `GetStatsProjectsProjectIdResponse$inboundSchema` instead. */
  export const inboundSchema = GetStatsProjectsProjectIdResponse$inboundSchema;
  /** @deprecated use `GetStatsProjectsProjectIdResponse$outboundSchema` instead. */
  export const outboundSchema =
    GetStatsProjectsProjectIdResponse$outboundSchema;
  /** @deprecated use `GetStatsProjectsProjectIdResponse$Outbound` instead. */
  export type Outbound = GetStatsProjectsProjectIdResponse$Outbound;
}

export function getStatsProjectsProjectIdResponseToJSON(
  getStatsProjectsProjectIdResponse: GetStatsProjectsProjectIdResponse,
): string {
  return JSON.stringify(
    GetStatsProjectsProjectIdResponse$outboundSchema.parse(
      getStatsProjectsProjectIdResponse,
    ),
  );
}

export function getStatsProjectsProjectIdResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetStatsProjectsProjectIdResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetStatsProjectsProjectIdResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetStatsProjectsProjectIdResponse' from JSON`,
  );
}
