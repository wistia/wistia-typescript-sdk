/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetStatsMediasMediaIdEngagementRequest = {
  /**
   * The hashed ID or ID of the video for which you want to retrieve engagement data.
   */
  mediaId: string;
};

/**
 * Success response with the engagement data of the video.
 */
export type GetStatsMediasMediaIdEngagementResponse = {
  /**
   * The percentage of the video that was viewed, averaged across all viewing sessions.
   */
  engagement?: number | undefined;
  /**
   * An array for creating an engagement graph.
   */
  engagementData?: Array<number> | undefined;
  /**
   * An array for creating the rewatch block on an engagement graph.
   */
  rewatchData?: Array<number> | undefined;
};

/** @internal */
export const GetStatsMediasMediaIdEngagementRequest$inboundSchema: z.ZodType<
  GetStatsMediasMediaIdEngagementRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  mediaId: z.string(),
});

/** @internal */
export type GetStatsMediasMediaIdEngagementRequest$Outbound = {
  mediaId: string;
};

/** @internal */
export const GetStatsMediasMediaIdEngagementRequest$outboundSchema: z.ZodType<
  GetStatsMediasMediaIdEngagementRequest$Outbound,
  z.ZodTypeDef,
  GetStatsMediasMediaIdEngagementRequest
> = z.object({
  mediaId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetStatsMediasMediaIdEngagementRequest$ {
  /** @deprecated use `GetStatsMediasMediaIdEngagementRequest$inboundSchema` instead. */
  export const inboundSchema =
    GetStatsMediasMediaIdEngagementRequest$inboundSchema;
  /** @deprecated use `GetStatsMediasMediaIdEngagementRequest$outboundSchema` instead. */
  export const outboundSchema =
    GetStatsMediasMediaIdEngagementRequest$outboundSchema;
  /** @deprecated use `GetStatsMediasMediaIdEngagementRequest$Outbound` instead. */
  export type Outbound = GetStatsMediasMediaIdEngagementRequest$Outbound;
}

export function getStatsMediasMediaIdEngagementRequestToJSON(
  getStatsMediasMediaIdEngagementRequest:
    GetStatsMediasMediaIdEngagementRequest,
): string {
  return JSON.stringify(
    GetStatsMediasMediaIdEngagementRequest$outboundSchema.parse(
      getStatsMediasMediaIdEngagementRequest,
    ),
  );
}

export function getStatsMediasMediaIdEngagementRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetStatsMediasMediaIdEngagementRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetStatsMediasMediaIdEngagementRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetStatsMediasMediaIdEngagementRequest' from JSON`,
  );
}

/** @internal */
export const GetStatsMediasMediaIdEngagementResponse$inboundSchema: z.ZodType<
  GetStatsMediasMediaIdEngagementResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  engagement: z.number().optional(),
  engagement_data: z.array(z.number().int()).optional(),
  rewatch_data: z.array(z.number().int()).optional(),
}).transform((v) => {
  return remap$(v, {
    "engagement_data": "engagementData",
    "rewatch_data": "rewatchData",
  });
});

/** @internal */
export type GetStatsMediasMediaIdEngagementResponse$Outbound = {
  engagement?: number | undefined;
  engagement_data?: Array<number> | undefined;
  rewatch_data?: Array<number> | undefined;
};

/** @internal */
export const GetStatsMediasMediaIdEngagementResponse$outboundSchema: z.ZodType<
  GetStatsMediasMediaIdEngagementResponse$Outbound,
  z.ZodTypeDef,
  GetStatsMediasMediaIdEngagementResponse
> = z.object({
  engagement: z.number().optional(),
  engagementData: z.array(z.number().int()).optional(),
  rewatchData: z.array(z.number().int()).optional(),
}).transform((v) => {
  return remap$(v, {
    engagementData: "engagement_data",
    rewatchData: "rewatch_data",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetStatsMediasMediaIdEngagementResponse$ {
  /** @deprecated use `GetStatsMediasMediaIdEngagementResponse$inboundSchema` instead. */
  export const inboundSchema =
    GetStatsMediasMediaIdEngagementResponse$inboundSchema;
  /** @deprecated use `GetStatsMediasMediaIdEngagementResponse$outboundSchema` instead. */
  export const outboundSchema =
    GetStatsMediasMediaIdEngagementResponse$outboundSchema;
  /** @deprecated use `GetStatsMediasMediaIdEngagementResponse$Outbound` instead. */
  export type Outbound = GetStatsMediasMediaIdEngagementResponse$Outbound;
}

export function getStatsMediasMediaIdEngagementResponseToJSON(
  getStatsMediasMediaIdEngagementResponse:
    GetStatsMediasMediaIdEngagementResponse,
): string {
  return JSON.stringify(
    GetStatsMediasMediaIdEngagementResponse$outboundSchema.parse(
      getStatsMediasMediaIdEngagementResponse,
    ),
  );
}

export function getStatsMediasMediaIdEngagementResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  GetStatsMediasMediaIdEngagementResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetStatsMediasMediaIdEngagementResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetStatsMediasMediaIdEngagementResponse' from JSON`,
  );
}
