/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const GetMediasServerList = [
  "https://api.wistia.com/v1",
] as const;

/**
 * Ordering
 */
export const GetMediasSortBy = {
  Name: "name",
  Created: "created",
  Updated: "updated",
  Position: "position",
} as const;
/**
 * Ordering
 */
export type GetMediasSortBy = ClosedEnum<typeof GetMediasSortBy>;

/**
 * Ordering Sort Direction (0 = desc, 1 = asc; default is 1)
 */
export const GetMediasSortDirection = {
  Zero: 0,
  One: 1,
} as const;
/**
 * Ordering Sort Direction (0 = desc, 1 = asc; default is 1)
 */
export type GetMediasSortDirection = ClosedEnum<typeof GetMediasSortDirection>;

/**
 * A string specifying which type of media you would like to get.
 */
export const Type = {
  Video: "Video",
  Audio: "Audio",
  Image: "Image",
  PdfDocument: "PdfDocument",
  MicrosoftOfficeDocument: "MicrosoftOfficeDocument",
  Swf: "Swf",
  UnknownType: "UnknownType",
} as const;
/**
 * A string specifying which type of media you would like to get.
 */
export type Type = ClosedEnum<typeof Type>;

export type GetMediasRequest = {
  /**
   * Page number to retrieve
   */
  page?: number | undefined;
  /**
   * Number of medias per page
   */
  perPage?: number | undefined;
  /**
   * Ordering
   */
  sortBy?: GetMediasSortBy | undefined;
  /**
   * Ordering Sort Direction (0 = desc, 1 = asc; default is 1)
   */
  sortDirection?: GetMediasSortDirection | undefined;
  /**
   * A hashed ID specifying the project from which you would like to get results.
   */
  projectId?: string | undefined;
  /**
   * Find a media or medias whose name exactly matches this parameter.
   */
  name?: string | undefined;
  /**
   * A string specifying which type of media you would like to get.
   */
  type?: Type | undefined;
  /**
   * Find the media by hashed_id.
   */
  hashedId?: string | undefined;
  /**
   * Find all of the medias by these hashed_ids.
   */
  hashedIds?: Array<string> | undefined;
  /**
   * Find all of the medias that match all of these tag names.
   */
  tags?: Array<string> | undefined;
  /**
   * Filter by archived status. True will return only archived medias, while false will return only active medias.
   */
  archived?: boolean | undefined;
};

/** @internal */
export const GetMediasSortBy$inboundSchema: z.ZodNativeEnum<
  typeof GetMediasSortBy
> = z.nativeEnum(GetMediasSortBy);

/** @internal */
export const GetMediasSortBy$outboundSchema: z.ZodNativeEnum<
  typeof GetMediasSortBy
> = GetMediasSortBy$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetMediasSortBy$ {
  /** @deprecated use `GetMediasSortBy$inboundSchema` instead. */
  export const inboundSchema = GetMediasSortBy$inboundSchema;
  /** @deprecated use `GetMediasSortBy$outboundSchema` instead. */
  export const outboundSchema = GetMediasSortBy$outboundSchema;
}

/** @internal */
export const GetMediasSortDirection$inboundSchema: z.ZodNativeEnum<
  typeof GetMediasSortDirection
> = z.nativeEnum(GetMediasSortDirection);

/** @internal */
export const GetMediasSortDirection$outboundSchema: z.ZodNativeEnum<
  typeof GetMediasSortDirection
> = GetMediasSortDirection$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetMediasSortDirection$ {
  /** @deprecated use `GetMediasSortDirection$inboundSchema` instead. */
  export const inboundSchema = GetMediasSortDirection$inboundSchema;
  /** @deprecated use `GetMediasSortDirection$outboundSchema` instead. */
  export const outboundSchema = GetMediasSortDirection$outboundSchema;
}

/** @internal */
export const Type$inboundSchema: z.ZodNativeEnum<typeof Type> = z.nativeEnum(
  Type,
);

/** @internal */
export const Type$outboundSchema: z.ZodNativeEnum<typeof Type> =
  Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Type$ {
  /** @deprecated use `Type$inboundSchema` instead. */
  export const inboundSchema = Type$inboundSchema;
  /** @deprecated use `Type$outboundSchema` instead. */
  export const outboundSchema = Type$outboundSchema;
}

/** @internal */
export const GetMediasRequest$inboundSchema: z.ZodType<
  GetMediasRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  page: z.number().int().optional(),
  per_page: z.number().int().optional(),
  sort_by: GetMediasSortBy$inboundSchema.optional(),
  sort_direction: GetMediasSortDirection$inboundSchema.optional(),
  project_id: z.string().optional(),
  name: z.string().optional(),
  type: Type$inboundSchema.optional(),
  hashed_id: z.string().optional(),
  hashed_ids: z.array(z.string()).optional(),
  tags: z.array(z.string()).optional(),
  archived: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    "per_page": "perPage",
    "sort_by": "sortBy",
    "sort_direction": "sortDirection",
    "project_id": "projectId",
    "hashed_id": "hashedId",
    "hashed_ids": "hashedIds",
  });
});

/** @internal */
export type GetMediasRequest$Outbound = {
  page?: number | undefined;
  per_page?: number | undefined;
  sort_by?: string | undefined;
  sort_direction?: number | undefined;
  project_id?: string | undefined;
  name?: string | undefined;
  type?: string | undefined;
  hashed_id?: string | undefined;
  hashed_ids?: Array<string> | undefined;
  tags?: Array<string> | undefined;
  archived?: boolean | undefined;
};

/** @internal */
export const GetMediasRequest$outboundSchema: z.ZodType<
  GetMediasRequest$Outbound,
  z.ZodTypeDef,
  GetMediasRequest
> = z.object({
  page: z.number().int().optional(),
  perPage: z.number().int().optional(),
  sortBy: GetMediasSortBy$outboundSchema.optional(),
  sortDirection: GetMediasSortDirection$outboundSchema.optional(),
  projectId: z.string().optional(),
  name: z.string().optional(),
  type: Type$outboundSchema.optional(),
  hashedId: z.string().optional(),
  hashedIds: z.array(z.string()).optional(),
  tags: z.array(z.string()).optional(),
  archived: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    perPage: "per_page",
    sortBy: "sort_by",
    sortDirection: "sort_direction",
    projectId: "project_id",
    hashedId: "hashed_id",
    hashedIds: "hashed_ids",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetMediasRequest$ {
  /** @deprecated use `GetMediasRequest$inboundSchema` instead. */
  export const inboundSchema = GetMediasRequest$inboundSchema;
  /** @deprecated use `GetMediasRequest$outboundSchema` instead. */
  export const outboundSchema = GetMediasRequest$outboundSchema;
  /** @deprecated use `GetMediasRequest$Outbound` instead. */
  export type Outbound = GetMediasRequest$Outbound;
}

export function getMediasRequestToJSON(
  getMediasRequest: GetMediasRequest,
): string {
  return JSON.stringify(
    GetMediasRequest$outboundSchema.parse(getMediasRequest),
  );
}

export function getMediasRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetMediasRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetMediasRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetMediasRequest' from JSON`,
  );
}
