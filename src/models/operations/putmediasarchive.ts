/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type PutMediasArchiveRequest = {
  /**
   * An array of the media hashed IDs to be archived.
   */
  hashedIds: Array<string>;
};

/**
 * Successful archival of media.
 */
export type PutMediasArchiveResponse = {
  /**
   * A confirmation message that the background job has been queued.
   */
  message?: string | undefined;
  /**
   * Status of the background job.
   */
  backgroundJobStatus?: models.BackgroundJobStatus | undefined;
};

/** @internal */
export const PutMediasArchiveRequest$inboundSchema: z.ZodType<
  PutMediasArchiveRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  hashed_ids: z.array(z.string()),
}).transform((v) => {
  return remap$(v, {
    "hashed_ids": "hashedIds",
  });
});

/** @internal */
export type PutMediasArchiveRequest$Outbound = {
  hashed_ids: Array<string>;
};

/** @internal */
export const PutMediasArchiveRequest$outboundSchema: z.ZodType<
  PutMediasArchiveRequest$Outbound,
  z.ZodTypeDef,
  PutMediasArchiveRequest
> = z.object({
  hashedIds: z.array(z.string()),
}).transform((v) => {
  return remap$(v, {
    hashedIds: "hashed_ids",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutMediasArchiveRequest$ {
  /** @deprecated use `PutMediasArchiveRequest$inboundSchema` instead. */
  export const inboundSchema = PutMediasArchiveRequest$inboundSchema;
  /** @deprecated use `PutMediasArchiveRequest$outboundSchema` instead. */
  export const outboundSchema = PutMediasArchiveRequest$outboundSchema;
  /** @deprecated use `PutMediasArchiveRequest$Outbound` instead. */
  export type Outbound = PutMediasArchiveRequest$Outbound;
}

export function putMediasArchiveRequestToJSON(
  putMediasArchiveRequest: PutMediasArchiveRequest,
): string {
  return JSON.stringify(
    PutMediasArchiveRequest$outboundSchema.parse(putMediasArchiveRequest),
  );
}

export function putMediasArchiveRequestFromJSON(
  jsonString: string,
): SafeParseResult<PutMediasArchiveRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PutMediasArchiveRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PutMediasArchiveRequest' from JSON`,
  );
}

/** @internal */
export const PutMediasArchiveResponse$inboundSchema: z.ZodType<
  PutMediasArchiveResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string().optional(),
  background_job_status: models.BackgroundJobStatus$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "background_job_status": "backgroundJobStatus",
  });
});

/** @internal */
export type PutMediasArchiveResponse$Outbound = {
  message?: string | undefined;
  background_job_status?: models.BackgroundJobStatus$Outbound | undefined;
};

/** @internal */
export const PutMediasArchiveResponse$outboundSchema: z.ZodType<
  PutMediasArchiveResponse$Outbound,
  z.ZodTypeDef,
  PutMediasArchiveResponse
> = z.object({
  message: z.string().optional(),
  backgroundJobStatus: models.BackgroundJobStatus$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    backgroundJobStatus: "background_job_status",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutMediasArchiveResponse$ {
  /** @deprecated use `PutMediasArchiveResponse$inboundSchema` instead. */
  export const inboundSchema = PutMediasArchiveResponse$inboundSchema;
  /** @deprecated use `PutMediasArchiveResponse$outboundSchema` instead. */
  export const outboundSchema = PutMediasArchiveResponse$outboundSchema;
  /** @deprecated use `PutMediasArchiveResponse$Outbound` instead. */
  export type Outbound = PutMediasArchiveResponse$Outbound;
}

export function putMediasArchiveResponseToJSON(
  putMediasArchiveResponse: PutMediasArchiveResponse,
): string {
  return JSON.stringify(
    PutMediasArchiveResponse$outboundSchema.parse(putMediasArchiveResponse),
  );
}

export function putMediasArchiveResponseFromJSON(
  jsonString: string,
): SafeParseResult<PutMediasArchiveResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PutMediasArchiveResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PutMediasArchiveResponse' from JSON`,
  );
}
