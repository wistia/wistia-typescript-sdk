/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Filtering parameter to narrow down the list of visitors.
 */
export const Filter = {
  HasName: "has_name",
  HasEmail: "has_email",
  IdentifiedByEmailGate: "identified_by_email_gate",
} as const;
/**
 * Filtering parameter to narrow down the list of visitors.
 */
export type Filter = ClosedEnum<typeof Filter>;

export type GetStatsVisitorsRequest = {
  /**
   * The page of results based on the per_page parameter.
   */
  page?: number | undefined;
  /**
   * The maximum number of results to return, capped at 100.
   */
  perPage?: number | undefined;
  /**
   * Filtering parameter to narrow down the list of visitors.
   */
  filter?: Filter | undefined;
  /**
   * Search for visitors based on name or email address.
   */
  search?: string | undefined;
};

/** @internal */
export const Filter$inboundSchema: z.ZodNativeEnum<typeof Filter> = z
  .nativeEnum(Filter);

/** @internal */
export const Filter$outboundSchema: z.ZodNativeEnum<typeof Filter> =
  Filter$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Filter$ {
  /** @deprecated use `Filter$inboundSchema` instead. */
  export const inboundSchema = Filter$inboundSchema;
  /** @deprecated use `Filter$outboundSchema` instead. */
  export const outboundSchema = Filter$outboundSchema;
}

/** @internal */
export const GetStatsVisitorsRequest$inboundSchema: z.ZodType<
  GetStatsVisitorsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  page: z.number().int().optional(),
  per_page: z.number().int().optional(),
  filter: Filter$inboundSchema.optional(),
  search: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "per_page": "perPage",
  });
});

/** @internal */
export type GetStatsVisitorsRequest$Outbound = {
  page?: number | undefined;
  per_page?: number | undefined;
  filter?: string | undefined;
  search?: string | undefined;
};

/** @internal */
export const GetStatsVisitorsRequest$outboundSchema: z.ZodType<
  GetStatsVisitorsRequest$Outbound,
  z.ZodTypeDef,
  GetStatsVisitorsRequest
> = z.object({
  page: z.number().int().optional(),
  perPage: z.number().int().optional(),
  filter: Filter$outboundSchema.optional(),
  search: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    perPage: "per_page",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetStatsVisitorsRequest$ {
  /** @deprecated use `GetStatsVisitorsRequest$inboundSchema` instead. */
  export const inboundSchema = GetStatsVisitorsRequest$inboundSchema;
  /** @deprecated use `GetStatsVisitorsRequest$outboundSchema` instead. */
  export const outboundSchema = GetStatsVisitorsRequest$outboundSchema;
  /** @deprecated use `GetStatsVisitorsRequest$Outbound` instead. */
  export type Outbound = GetStatsVisitorsRequest$Outbound;
}

export function getStatsVisitorsRequestToJSON(
  getStatsVisitorsRequest: GetStatsVisitorsRequest,
): string {
  return JSON.stringify(
    GetStatsVisitorsRequest$outboundSchema.parse(getStatsVisitorsRequest),
  );
}

export function getStatsVisitorsRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetStatsVisitorsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetStatsVisitorsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetStatsVisitorsRequest' from JSON`,
  );
}
