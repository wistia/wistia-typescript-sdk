/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type PutProjectsProjectIdSharingsSharingIdRequest = {
  /**
   * ID of the project
   */
  projectId: string;
  /**
   * ID of the sharing to be updated
   */
  sharingId: string;
  updateSharingRequest: models.UpdateSharingRequest;
};

/** @internal */
export const PutProjectsProjectIdSharingsSharingIdRequest$inboundSchema:
  z.ZodType<
    PutProjectsProjectIdSharingsSharingIdRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    projectId: z.string(),
    sharingId: z.string(),
    UpdateSharingRequest: models.UpdateSharingRequest$inboundSchema,
  }).transform((v) => {
    return remap$(v, {
      "UpdateSharingRequest": "updateSharingRequest",
    });
  });

/** @internal */
export type PutProjectsProjectIdSharingsSharingIdRequest$Outbound = {
  projectId: string;
  sharingId: string;
  UpdateSharingRequest: models.UpdateSharingRequest$Outbound;
};

/** @internal */
export const PutProjectsProjectIdSharingsSharingIdRequest$outboundSchema:
  z.ZodType<
    PutProjectsProjectIdSharingsSharingIdRequest$Outbound,
    z.ZodTypeDef,
    PutProjectsProjectIdSharingsSharingIdRequest
  > = z.object({
    projectId: z.string(),
    sharingId: z.string(),
    updateSharingRequest: models.UpdateSharingRequest$outboundSchema,
  }).transform((v) => {
    return remap$(v, {
      updateSharingRequest: "UpdateSharingRequest",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutProjectsProjectIdSharingsSharingIdRequest$ {
  /** @deprecated use `PutProjectsProjectIdSharingsSharingIdRequest$inboundSchema` instead. */
  export const inboundSchema =
    PutProjectsProjectIdSharingsSharingIdRequest$inboundSchema;
  /** @deprecated use `PutProjectsProjectIdSharingsSharingIdRequest$outboundSchema` instead. */
  export const outboundSchema =
    PutProjectsProjectIdSharingsSharingIdRequest$outboundSchema;
  /** @deprecated use `PutProjectsProjectIdSharingsSharingIdRequest$Outbound` instead. */
  export type Outbound = PutProjectsProjectIdSharingsSharingIdRequest$Outbound;
}

export function putProjectsProjectIdSharingsSharingIdRequestToJSON(
  putProjectsProjectIdSharingsSharingIdRequest:
    PutProjectsProjectIdSharingsSharingIdRequest,
): string {
  return JSON.stringify(
    PutProjectsProjectIdSharingsSharingIdRequest$outboundSchema.parse(
      putProjectsProjectIdSharingsSharingIdRequest,
    ),
  );
}

export function putProjectsProjectIdSharingsSharingIdRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  PutProjectsProjectIdSharingsSharingIdRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutProjectsProjectIdSharingsSharingIdRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PutProjectsProjectIdSharingsSharingIdRequest' from JSON`,
  );
}
