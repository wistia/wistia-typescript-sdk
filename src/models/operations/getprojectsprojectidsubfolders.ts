/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Field to sort by
 */
export const GetProjectsProjectIdSubfoldersSortBy = {
  Name: "name",
  Created: "created",
  Updated: "updated",
  Position: "position",
  Id: "id",
} as const;
/**
 * Field to sort by
 */
export type GetProjectsProjectIdSubfoldersSortBy = ClosedEnum<
  typeof GetProjectsProjectIdSubfoldersSortBy
>;

/**
 * Sort direction (0 = desc, 1 = asc; default is 1)
 */
export const GetProjectsProjectIdSubfoldersSortDirection = {
  Zero: 0,
  One: 1,
} as const;
/**
 * Sort direction (0 = desc, 1 = asc; default is 1)
 */
export type GetProjectsProjectIdSubfoldersSortDirection = ClosedEnum<
  typeof GetProjectsProjectIdSubfoldersSortDirection
>;

export type GetProjectsProjectIdSubfoldersRequest = {
  /**
   * The hashed ID of the project
   */
  projectId: string;
  /**
   * Page number to retrieve
   */
  page?: number | undefined;
  /**
   * Number of subfolders per page
   */
  perPage?: number | undefined;
  /**
   * Field to sort by
   */
  sortBy?: GetProjectsProjectIdSubfoldersSortBy | undefined;
  /**
   * Sort direction (0 = desc, 1 = asc; default is 1)
   */
  sortDirection?: GetProjectsProjectIdSubfoldersSortDirection | undefined;
};

/** @internal */
export const GetProjectsProjectIdSubfoldersSortBy$inboundSchema:
  z.ZodNativeEnum<typeof GetProjectsProjectIdSubfoldersSortBy> = z.nativeEnum(
    GetProjectsProjectIdSubfoldersSortBy,
  );

/** @internal */
export const GetProjectsProjectIdSubfoldersSortBy$outboundSchema:
  z.ZodNativeEnum<typeof GetProjectsProjectIdSubfoldersSortBy> =
    GetProjectsProjectIdSubfoldersSortBy$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetProjectsProjectIdSubfoldersSortBy$ {
  /** @deprecated use `GetProjectsProjectIdSubfoldersSortBy$inboundSchema` instead. */
  export const inboundSchema =
    GetProjectsProjectIdSubfoldersSortBy$inboundSchema;
  /** @deprecated use `GetProjectsProjectIdSubfoldersSortBy$outboundSchema` instead. */
  export const outboundSchema =
    GetProjectsProjectIdSubfoldersSortBy$outboundSchema;
}

/** @internal */
export const GetProjectsProjectIdSubfoldersSortDirection$inboundSchema:
  z.ZodNativeEnum<typeof GetProjectsProjectIdSubfoldersSortDirection> = z
    .nativeEnum(GetProjectsProjectIdSubfoldersSortDirection);

/** @internal */
export const GetProjectsProjectIdSubfoldersSortDirection$outboundSchema:
  z.ZodNativeEnum<typeof GetProjectsProjectIdSubfoldersSortDirection> =
    GetProjectsProjectIdSubfoldersSortDirection$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetProjectsProjectIdSubfoldersSortDirection$ {
  /** @deprecated use `GetProjectsProjectIdSubfoldersSortDirection$inboundSchema` instead. */
  export const inboundSchema =
    GetProjectsProjectIdSubfoldersSortDirection$inboundSchema;
  /** @deprecated use `GetProjectsProjectIdSubfoldersSortDirection$outboundSchema` instead. */
  export const outboundSchema =
    GetProjectsProjectIdSubfoldersSortDirection$outboundSchema;
}

/** @internal */
export const GetProjectsProjectIdSubfoldersRequest$inboundSchema: z.ZodType<
  GetProjectsProjectIdSubfoldersRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  projectId: z.string(),
  page: z.number().int().default(1),
  per_page: z.number().int().default(100),
  sort_by: GetProjectsProjectIdSubfoldersSortBy$inboundSchema.default(
    "position",
  ),
  sort_direction: GetProjectsProjectIdSubfoldersSortDirection$inboundSchema
    .default(1),
}).transform((v) => {
  return remap$(v, {
    "per_page": "perPage",
    "sort_by": "sortBy",
    "sort_direction": "sortDirection",
  });
});

/** @internal */
export type GetProjectsProjectIdSubfoldersRequest$Outbound = {
  projectId: string;
  page: number;
  per_page: number;
  sort_by: string;
  sort_direction: number;
};

/** @internal */
export const GetProjectsProjectIdSubfoldersRequest$outboundSchema: z.ZodType<
  GetProjectsProjectIdSubfoldersRequest$Outbound,
  z.ZodTypeDef,
  GetProjectsProjectIdSubfoldersRequest
> = z.object({
  projectId: z.string(),
  page: z.number().int().default(1),
  perPage: z.number().int().default(100),
  sortBy: GetProjectsProjectIdSubfoldersSortBy$outboundSchema.default(
    "position",
  ),
  sortDirection: GetProjectsProjectIdSubfoldersSortDirection$outboundSchema
    .default(1),
}).transform((v) => {
  return remap$(v, {
    perPage: "per_page",
    sortBy: "sort_by",
    sortDirection: "sort_direction",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetProjectsProjectIdSubfoldersRequest$ {
  /** @deprecated use `GetProjectsProjectIdSubfoldersRequest$inboundSchema` instead. */
  export const inboundSchema =
    GetProjectsProjectIdSubfoldersRequest$inboundSchema;
  /** @deprecated use `GetProjectsProjectIdSubfoldersRequest$outboundSchema` instead. */
  export const outboundSchema =
    GetProjectsProjectIdSubfoldersRequest$outboundSchema;
  /** @deprecated use `GetProjectsProjectIdSubfoldersRequest$Outbound` instead. */
  export type Outbound = GetProjectsProjectIdSubfoldersRequest$Outbound;
}

export function getProjectsProjectIdSubfoldersRequestToJSON(
  getProjectsProjectIdSubfoldersRequest: GetProjectsProjectIdSubfoldersRequest,
): string {
  return JSON.stringify(
    GetProjectsProjectIdSubfoldersRequest$outboundSchema.parse(
      getProjectsProjectIdSubfoldersRequest,
    ),
  );
}

export function getProjectsProjectIdSubfoldersRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetProjectsProjectIdSubfoldersRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetProjectsProjectIdSubfoldersRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetProjectsProjectIdSubfoldersRequest' from JSON`,
  );
}
