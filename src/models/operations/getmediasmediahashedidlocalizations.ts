/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetMediasMediaHashedIdLocalizationsRequest = {
  /**
   * The hashed ID of the media to list localizations for.
   */
  mediaHashedId: string;
  /**
   * Whether to include the transcript in the response.
   */
  includeTranscript?: boolean | undefined;
};

/** @internal */
export const GetMediasMediaHashedIdLocalizationsRequest$inboundSchema:
  z.ZodType<GetMediasMediaHashedIdLocalizationsRequest, z.ZodTypeDef, unknown> =
    z.object({
      mediaHashedId: z.string(),
      include_transcript: z.boolean().default(false),
    }).transform((v) => {
      return remap$(v, {
        "include_transcript": "includeTranscript",
      });
    });

/** @internal */
export type GetMediasMediaHashedIdLocalizationsRequest$Outbound = {
  mediaHashedId: string;
  include_transcript: boolean;
};

/** @internal */
export const GetMediasMediaHashedIdLocalizationsRequest$outboundSchema:
  z.ZodType<
    GetMediasMediaHashedIdLocalizationsRequest$Outbound,
    z.ZodTypeDef,
    GetMediasMediaHashedIdLocalizationsRequest
  > = z.object({
    mediaHashedId: z.string(),
    includeTranscript: z.boolean().default(false),
  }).transform((v) => {
    return remap$(v, {
      includeTranscript: "include_transcript",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetMediasMediaHashedIdLocalizationsRequest$ {
  /** @deprecated use `GetMediasMediaHashedIdLocalizationsRequest$inboundSchema` instead. */
  export const inboundSchema =
    GetMediasMediaHashedIdLocalizationsRequest$inboundSchema;
  /** @deprecated use `GetMediasMediaHashedIdLocalizationsRequest$outboundSchema` instead. */
  export const outboundSchema =
    GetMediasMediaHashedIdLocalizationsRequest$outboundSchema;
  /** @deprecated use `GetMediasMediaHashedIdLocalizationsRequest$Outbound` instead. */
  export type Outbound = GetMediasMediaHashedIdLocalizationsRequest$Outbound;
}

export function getMediasMediaHashedIdLocalizationsRequestToJSON(
  getMediasMediaHashedIdLocalizationsRequest:
    GetMediasMediaHashedIdLocalizationsRequest,
): string {
  return JSON.stringify(
    GetMediasMediaHashedIdLocalizationsRequest$outboundSchema.parse(
      getMediasMediaHashedIdLocalizationsRequest,
    ),
  );
}

export function getMediasMediaHashedIdLocalizationsRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  GetMediasMediaHashedIdLocalizationsRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetMediasMediaHashedIdLocalizationsRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetMediasMediaHashedIdLocalizationsRequest' from JSON`,
  );
}
