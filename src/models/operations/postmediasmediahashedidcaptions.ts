/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type PostMediasMediaHashedIdCaptionsRequestBody = {
  /**
   * Either an attached SRT file or a string parameter with the contents of an SRT file.
   */
  captionFile: string;
  /**
   * An optional parameter that denotes which language this file represents. Should conform to ISO-639â€“2. If left unspecified, the language code will be detected automatically.
   */
  language?: string | undefined;
};

export type PostMediasMediaHashedIdCaptionsRequest = {
  /**
   * The hashed ID of the media for which captions are to be added.
   */
  mediaHashedId: string;
  requestBody: PostMediasMediaHashedIdCaptionsRequestBody;
};

/** @internal */
export const PostMediasMediaHashedIdCaptionsRequestBody$inboundSchema:
  z.ZodType<PostMediasMediaHashedIdCaptionsRequestBody, z.ZodTypeDef, unknown> =
    z.object({
      caption_file: z.string(),
      language: z.string().optional(),
    }).transform((v) => {
      return remap$(v, {
        "caption_file": "captionFile",
      });
    });

/** @internal */
export type PostMediasMediaHashedIdCaptionsRequestBody$Outbound = {
  caption_file: string;
  language?: string | undefined;
};

/** @internal */
export const PostMediasMediaHashedIdCaptionsRequestBody$outboundSchema:
  z.ZodType<
    PostMediasMediaHashedIdCaptionsRequestBody$Outbound,
    z.ZodTypeDef,
    PostMediasMediaHashedIdCaptionsRequestBody
  > = z.object({
    captionFile: z.string(),
    language: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      captionFile: "caption_file",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostMediasMediaHashedIdCaptionsRequestBody$ {
  /** @deprecated use `PostMediasMediaHashedIdCaptionsRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    PostMediasMediaHashedIdCaptionsRequestBody$inboundSchema;
  /** @deprecated use `PostMediasMediaHashedIdCaptionsRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    PostMediasMediaHashedIdCaptionsRequestBody$outboundSchema;
  /** @deprecated use `PostMediasMediaHashedIdCaptionsRequestBody$Outbound` instead. */
  export type Outbound = PostMediasMediaHashedIdCaptionsRequestBody$Outbound;
}

export function postMediasMediaHashedIdCaptionsRequestBodyToJSON(
  postMediasMediaHashedIdCaptionsRequestBody:
    PostMediasMediaHashedIdCaptionsRequestBody,
): string {
  return JSON.stringify(
    PostMediasMediaHashedIdCaptionsRequestBody$outboundSchema.parse(
      postMediasMediaHashedIdCaptionsRequestBody,
    ),
  );
}

export function postMediasMediaHashedIdCaptionsRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  PostMediasMediaHashedIdCaptionsRequestBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostMediasMediaHashedIdCaptionsRequestBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostMediasMediaHashedIdCaptionsRequestBody' from JSON`,
  );
}

/** @internal */
export const PostMediasMediaHashedIdCaptionsRequest$inboundSchema: z.ZodType<
  PostMediasMediaHashedIdCaptionsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "media-hashed-id": z.string(),
  RequestBody: z.lazy(() =>
    PostMediasMediaHashedIdCaptionsRequestBody$inboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    "media-hashed-id": "mediaHashedId",
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type PostMediasMediaHashedIdCaptionsRequest$Outbound = {
  "media-hashed-id": string;
  RequestBody: PostMediasMediaHashedIdCaptionsRequestBody$Outbound;
};

/** @internal */
export const PostMediasMediaHashedIdCaptionsRequest$outboundSchema: z.ZodType<
  PostMediasMediaHashedIdCaptionsRequest$Outbound,
  z.ZodTypeDef,
  PostMediasMediaHashedIdCaptionsRequest
> = z.object({
  mediaHashedId: z.string(),
  requestBody: z.lazy(() =>
    PostMediasMediaHashedIdCaptionsRequestBody$outboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    mediaHashedId: "media-hashed-id",
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostMediasMediaHashedIdCaptionsRequest$ {
  /** @deprecated use `PostMediasMediaHashedIdCaptionsRequest$inboundSchema` instead. */
  export const inboundSchema =
    PostMediasMediaHashedIdCaptionsRequest$inboundSchema;
  /** @deprecated use `PostMediasMediaHashedIdCaptionsRequest$outboundSchema` instead. */
  export const outboundSchema =
    PostMediasMediaHashedIdCaptionsRequest$outboundSchema;
  /** @deprecated use `PostMediasMediaHashedIdCaptionsRequest$Outbound` instead. */
  export type Outbound = PostMediasMediaHashedIdCaptionsRequest$Outbound;
}

export function postMediasMediaHashedIdCaptionsRequestToJSON(
  postMediasMediaHashedIdCaptionsRequest:
    PostMediasMediaHashedIdCaptionsRequest,
): string {
  return JSON.stringify(
    PostMediasMediaHashedIdCaptionsRequest$outboundSchema.parse(
      postMediasMediaHashedIdCaptionsRequest,
    ),
  );
}

export function postMediasMediaHashedIdCaptionsRequestFromJSON(
  jsonString: string,
): SafeParseResult<PostMediasMediaHashedIdCaptionsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      PostMediasMediaHashedIdCaptionsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostMediasMediaHashedIdCaptionsRequest' from JSON`,
  );
}
