/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export const PostMediasMediaHashedIdTranslateServerList = [
  "https://api.wistia.com/v1",
] as const;

export type PostMediasMediaHashedIdTranslateRequestBody = {
  /**
   * The language to translate the transcript to as a 3-character IETF language code.
   */
  targetLanguage: string;
  /**
   * The language of the source transcript to be translated as a 3-character IETF language code. If not provided, the media's default transcript language will be used.
   */
  sourceLanguage?: string | undefined;
};

export type PostMediasMediaHashedIdTranslateRequest = {
  /**
   * The hashed ID of the media.
   */
  mediaHashedId: string;
  requestBody?: PostMediasMediaHashedIdTranslateRequestBody | undefined;
};

/**
 * Successfully queued background job for translation of the transcript.
 */
export type PostMediasMediaHashedIdTranslateResponse = {
  message?: string | undefined;
  /**
   * Status of the background job.
   */
  backgroundJobStatus?: models.BackgroundJobStatus | undefined;
};

/** @internal */
export const PostMediasMediaHashedIdTranslateRequestBody$inboundSchema:
  z.ZodType<
    PostMediasMediaHashedIdTranslateRequestBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    target_language: z.string(),
    source_language: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      "target_language": "targetLanguage",
      "source_language": "sourceLanguage",
    });
  });

/** @internal */
export type PostMediasMediaHashedIdTranslateRequestBody$Outbound = {
  target_language: string;
  source_language?: string | undefined;
};

/** @internal */
export const PostMediasMediaHashedIdTranslateRequestBody$outboundSchema:
  z.ZodType<
    PostMediasMediaHashedIdTranslateRequestBody$Outbound,
    z.ZodTypeDef,
    PostMediasMediaHashedIdTranslateRequestBody
  > = z.object({
    targetLanguage: z.string(),
    sourceLanguage: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      targetLanguage: "target_language",
      sourceLanguage: "source_language",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostMediasMediaHashedIdTranslateRequestBody$ {
  /** @deprecated use `PostMediasMediaHashedIdTranslateRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    PostMediasMediaHashedIdTranslateRequestBody$inboundSchema;
  /** @deprecated use `PostMediasMediaHashedIdTranslateRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    PostMediasMediaHashedIdTranslateRequestBody$outboundSchema;
  /** @deprecated use `PostMediasMediaHashedIdTranslateRequestBody$Outbound` instead. */
  export type Outbound = PostMediasMediaHashedIdTranslateRequestBody$Outbound;
}

export function postMediasMediaHashedIdTranslateRequestBodyToJSON(
  postMediasMediaHashedIdTranslateRequestBody:
    PostMediasMediaHashedIdTranslateRequestBody,
): string {
  return JSON.stringify(
    PostMediasMediaHashedIdTranslateRequestBody$outboundSchema.parse(
      postMediasMediaHashedIdTranslateRequestBody,
    ),
  );
}

export function postMediasMediaHashedIdTranslateRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  PostMediasMediaHashedIdTranslateRequestBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostMediasMediaHashedIdTranslateRequestBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostMediasMediaHashedIdTranslateRequestBody' from JSON`,
  );
}

/** @internal */
export const PostMediasMediaHashedIdTranslateRequest$inboundSchema: z.ZodType<
  PostMediasMediaHashedIdTranslateRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "media-hashed-id": z.string(),
  RequestBody: z.lazy(() =>
    PostMediasMediaHashedIdTranslateRequestBody$inboundSchema
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "media-hashed-id": "mediaHashedId",
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type PostMediasMediaHashedIdTranslateRequest$Outbound = {
  "media-hashed-id": string;
  RequestBody?:
    | PostMediasMediaHashedIdTranslateRequestBody$Outbound
    | undefined;
};

/** @internal */
export const PostMediasMediaHashedIdTranslateRequest$outboundSchema: z.ZodType<
  PostMediasMediaHashedIdTranslateRequest$Outbound,
  z.ZodTypeDef,
  PostMediasMediaHashedIdTranslateRequest
> = z.object({
  mediaHashedId: z.string(),
  requestBody: z.lazy(() =>
    PostMediasMediaHashedIdTranslateRequestBody$outboundSchema
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    mediaHashedId: "media-hashed-id",
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostMediasMediaHashedIdTranslateRequest$ {
  /** @deprecated use `PostMediasMediaHashedIdTranslateRequest$inboundSchema` instead. */
  export const inboundSchema =
    PostMediasMediaHashedIdTranslateRequest$inboundSchema;
  /** @deprecated use `PostMediasMediaHashedIdTranslateRequest$outboundSchema` instead. */
  export const outboundSchema =
    PostMediasMediaHashedIdTranslateRequest$outboundSchema;
  /** @deprecated use `PostMediasMediaHashedIdTranslateRequest$Outbound` instead. */
  export type Outbound = PostMediasMediaHashedIdTranslateRequest$Outbound;
}

export function postMediasMediaHashedIdTranslateRequestToJSON(
  postMediasMediaHashedIdTranslateRequest:
    PostMediasMediaHashedIdTranslateRequest,
): string {
  return JSON.stringify(
    PostMediasMediaHashedIdTranslateRequest$outboundSchema.parse(
      postMediasMediaHashedIdTranslateRequest,
    ),
  );
}

export function postMediasMediaHashedIdTranslateRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  PostMediasMediaHashedIdTranslateRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostMediasMediaHashedIdTranslateRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostMediasMediaHashedIdTranslateRequest' from JSON`,
  );
}

/** @internal */
export const PostMediasMediaHashedIdTranslateResponse$inboundSchema: z.ZodType<
  PostMediasMediaHashedIdTranslateResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string().optional(),
  background_job_status: models.BackgroundJobStatus$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "background_job_status": "backgroundJobStatus",
  });
});

/** @internal */
export type PostMediasMediaHashedIdTranslateResponse$Outbound = {
  message?: string | undefined;
  background_job_status?: models.BackgroundJobStatus$Outbound | undefined;
};

/** @internal */
export const PostMediasMediaHashedIdTranslateResponse$outboundSchema: z.ZodType<
  PostMediasMediaHashedIdTranslateResponse$Outbound,
  z.ZodTypeDef,
  PostMediasMediaHashedIdTranslateResponse
> = z.object({
  message: z.string().optional(),
  backgroundJobStatus: models.BackgroundJobStatus$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    backgroundJobStatus: "background_job_status",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostMediasMediaHashedIdTranslateResponse$ {
  /** @deprecated use `PostMediasMediaHashedIdTranslateResponse$inboundSchema` instead. */
  export const inboundSchema =
    PostMediasMediaHashedIdTranslateResponse$inboundSchema;
  /** @deprecated use `PostMediasMediaHashedIdTranslateResponse$outboundSchema` instead. */
  export const outboundSchema =
    PostMediasMediaHashedIdTranslateResponse$outboundSchema;
  /** @deprecated use `PostMediasMediaHashedIdTranslateResponse$Outbound` instead. */
  export type Outbound = PostMediasMediaHashedIdTranslateResponse$Outbound;
}

export function postMediasMediaHashedIdTranslateResponseToJSON(
  postMediasMediaHashedIdTranslateResponse:
    PostMediasMediaHashedIdTranslateResponse,
): string {
  return JSON.stringify(
    PostMediasMediaHashedIdTranslateResponse$outboundSchema.parse(
      postMediasMediaHashedIdTranslateResponse,
    ),
  );
}

export function postMediasMediaHashedIdTranslateResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  PostMediasMediaHashedIdTranslateResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostMediasMediaHashedIdTranslateResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostMediasMediaHashedIdTranslateResponse' from JSON`,
  );
}
