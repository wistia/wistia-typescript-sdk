/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { blobLikeSchema } from "../../types/blobs.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type PostMediasMediaHashedIdCaptionsMultipartCaptionFile = {
  fileName: string;
  content: ReadableStream<Uint8Array> | Blob | ArrayBuffer | Uint8Array;
};

export type PostMediasMediaHashedIdCaptionsMultipartRequestBody = {
  /**
   * Either an attached SRT file or a string parameter with the contents of an SRT file.
   */
  captionFile: PostMediasMediaHashedIdCaptionsMultipartCaptionFile | Blob;
  /**
   * An optional parameter that denotes which language this file represents. Should conform to ISO-639â€“2. If left unspecified, the language code will be detected automatically.
   */
  language?: string | undefined;
};

export type PostMediasMediaHashedIdCaptionsMultipartRequest = {
  /**
   * The hashed ID of the media for which captions are to be added.
   */
  mediaHashedId: string;
  requestBody: PostMediasMediaHashedIdCaptionsMultipartRequestBody;
};

/** @internal */
export const PostMediasMediaHashedIdCaptionsMultipartCaptionFile$inboundSchema:
  z.ZodType<
    PostMediasMediaHashedIdCaptionsMultipartCaptionFile,
    z.ZodTypeDef,
    unknown
  > = z.object({
    fileName: z.string(),
    content: z.union([
      z.instanceof(ReadableStream<Uint8Array>),
      z.instanceof(Blob),
      z.instanceof(ArrayBuffer),
      z.instanceof(Uint8Array),
    ]),
  });

/** @internal */
export type PostMediasMediaHashedIdCaptionsMultipartCaptionFile$Outbound = {
  fileName: string;
  content: ReadableStream<Uint8Array> | Blob | ArrayBuffer | Uint8Array;
};

/** @internal */
export const PostMediasMediaHashedIdCaptionsMultipartCaptionFile$outboundSchema:
  z.ZodType<
    PostMediasMediaHashedIdCaptionsMultipartCaptionFile$Outbound,
    z.ZodTypeDef,
    PostMediasMediaHashedIdCaptionsMultipartCaptionFile
  > = z.object({
    fileName: z.string(),
    content: z.union([
      z.instanceof(ReadableStream<Uint8Array>),
      z.instanceof(Blob),
      z.instanceof(ArrayBuffer),
      z.instanceof(Uint8Array),
    ]),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostMediasMediaHashedIdCaptionsMultipartCaptionFile$ {
  /** @deprecated use `PostMediasMediaHashedIdCaptionsMultipartCaptionFile$inboundSchema` instead. */
  export const inboundSchema =
    PostMediasMediaHashedIdCaptionsMultipartCaptionFile$inboundSchema;
  /** @deprecated use `PostMediasMediaHashedIdCaptionsMultipartCaptionFile$outboundSchema` instead. */
  export const outboundSchema =
    PostMediasMediaHashedIdCaptionsMultipartCaptionFile$outboundSchema;
  /** @deprecated use `PostMediasMediaHashedIdCaptionsMultipartCaptionFile$Outbound` instead. */
  export type Outbound =
    PostMediasMediaHashedIdCaptionsMultipartCaptionFile$Outbound;
}

export function postMediasMediaHashedIdCaptionsMultipartCaptionFileToJSON(
  postMediasMediaHashedIdCaptionsMultipartCaptionFile:
    PostMediasMediaHashedIdCaptionsMultipartCaptionFile,
): string {
  return JSON.stringify(
    PostMediasMediaHashedIdCaptionsMultipartCaptionFile$outboundSchema.parse(
      postMediasMediaHashedIdCaptionsMultipartCaptionFile,
    ),
  );
}

export function postMediasMediaHashedIdCaptionsMultipartCaptionFileFromJSON(
  jsonString: string,
): SafeParseResult<
  PostMediasMediaHashedIdCaptionsMultipartCaptionFile,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostMediasMediaHashedIdCaptionsMultipartCaptionFile$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostMediasMediaHashedIdCaptionsMultipartCaptionFile' from JSON`,
  );
}

/** @internal */
export const PostMediasMediaHashedIdCaptionsMultipartRequestBody$inboundSchema:
  z.ZodType<
    PostMediasMediaHashedIdCaptionsMultipartRequestBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    caption_file: z.lazy(() =>
      PostMediasMediaHashedIdCaptionsMultipartCaptionFile$inboundSchema
    ),
    language: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      "caption_file": "captionFile",
    });
  });

/** @internal */
export type PostMediasMediaHashedIdCaptionsMultipartRequestBody$Outbound = {
  caption_file:
    | PostMediasMediaHashedIdCaptionsMultipartCaptionFile$Outbound
    | Blob;
  language?: string | undefined;
};

/** @internal */
export const PostMediasMediaHashedIdCaptionsMultipartRequestBody$outboundSchema:
  z.ZodType<
    PostMediasMediaHashedIdCaptionsMultipartRequestBody$Outbound,
    z.ZodTypeDef,
    PostMediasMediaHashedIdCaptionsMultipartRequestBody
  > = z.object({
    captionFile: z.lazy(() =>
      PostMediasMediaHashedIdCaptionsMultipartCaptionFile$outboundSchema
    ).or(blobLikeSchema),
    language: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      captionFile: "caption_file",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostMediasMediaHashedIdCaptionsMultipartRequestBody$ {
  /** @deprecated use `PostMediasMediaHashedIdCaptionsMultipartRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    PostMediasMediaHashedIdCaptionsMultipartRequestBody$inboundSchema;
  /** @deprecated use `PostMediasMediaHashedIdCaptionsMultipartRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    PostMediasMediaHashedIdCaptionsMultipartRequestBody$outboundSchema;
  /** @deprecated use `PostMediasMediaHashedIdCaptionsMultipartRequestBody$Outbound` instead. */
  export type Outbound =
    PostMediasMediaHashedIdCaptionsMultipartRequestBody$Outbound;
}

export function postMediasMediaHashedIdCaptionsMultipartRequestBodyToJSON(
  postMediasMediaHashedIdCaptionsMultipartRequestBody:
    PostMediasMediaHashedIdCaptionsMultipartRequestBody,
): string {
  return JSON.stringify(
    PostMediasMediaHashedIdCaptionsMultipartRequestBody$outboundSchema.parse(
      postMediasMediaHashedIdCaptionsMultipartRequestBody,
    ),
  );
}

export function postMediasMediaHashedIdCaptionsMultipartRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  PostMediasMediaHashedIdCaptionsMultipartRequestBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostMediasMediaHashedIdCaptionsMultipartRequestBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostMediasMediaHashedIdCaptionsMultipartRequestBody' from JSON`,
  );
}

/** @internal */
export const PostMediasMediaHashedIdCaptionsMultipartRequest$inboundSchema:
  z.ZodType<
    PostMediasMediaHashedIdCaptionsMultipartRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    mediaHashedId: z.string(),
    RequestBody: z.lazy(() =>
      PostMediasMediaHashedIdCaptionsMultipartRequestBody$inboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      "RequestBody": "requestBody",
    });
  });

/** @internal */
export type PostMediasMediaHashedIdCaptionsMultipartRequest$Outbound = {
  mediaHashedId: string;
  RequestBody: PostMediasMediaHashedIdCaptionsMultipartRequestBody$Outbound;
};

/** @internal */
export const PostMediasMediaHashedIdCaptionsMultipartRequest$outboundSchema:
  z.ZodType<
    PostMediasMediaHashedIdCaptionsMultipartRequest$Outbound,
    z.ZodTypeDef,
    PostMediasMediaHashedIdCaptionsMultipartRequest
  > = z.object({
    mediaHashedId: z.string(),
    requestBody: z.lazy(() =>
      PostMediasMediaHashedIdCaptionsMultipartRequestBody$outboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      requestBody: "RequestBody",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostMediasMediaHashedIdCaptionsMultipartRequest$ {
  /** @deprecated use `PostMediasMediaHashedIdCaptionsMultipartRequest$inboundSchema` instead. */
  export const inboundSchema =
    PostMediasMediaHashedIdCaptionsMultipartRequest$inboundSchema;
  /** @deprecated use `PostMediasMediaHashedIdCaptionsMultipartRequest$outboundSchema` instead. */
  export const outboundSchema =
    PostMediasMediaHashedIdCaptionsMultipartRequest$outboundSchema;
  /** @deprecated use `PostMediasMediaHashedIdCaptionsMultipartRequest$Outbound` instead. */
  export type Outbound =
    PostMediasMediaHashedIdCaptionsMultipartRequest$Outbound;
}

export function postMediasMediaHashedIdCaptionsMultipartRequestToJSON(
  postMediasMediaHashedIdCaptionsMultipartRequest:
    PostMediasMediaHashedIdCaptionsMultipartRequest,
): string {
  return JSON.stringify(
    PostMediasMediaHashedIdCaptionsMultipartRequest$outboundSchema.parse(
      postMediasMediaHashedIdCaptionsMultipartRequest,
    ),
  );
}

export function postMediasMediaHashedIdCaptionsMultipartRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  PostMediasMediaHashedIdCaptionsMultipartRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostMediasMediaHashedIdCaptionsMultipartRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostMediasMediaHashedIdCaptionsMultipartRequest' from JSON`,
  );
}
