/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export const GetChannelsChannelHashedIdChannelEpisodesServerList = [
  "https://api.wistia.com/v1",
] as const;

export type GetChannelsChannelHashedIdChannelEpisodesRequest = {
  /**
   * The hashed ID of the channel to grab channel episodes from.
   */
  channelHashedId: string;
  /**
   * Ordering. Default is ID ASC.
   */
  sortBy?: models.SortBy | undefined;
  /**
   * Ordering Sort Direction (0 = desc, 1 = asc; default is 1)
   */
  sortDirection?: models.SortDirection | undefined;
  /**
   * Page number to retrieve
   */
  page?: number | undefined;
  /**
   * Number of channels per page
   */
  perPage?: number | undefined;
  /**
   * Filter by media id
   */
  mediaId?: Array<string> | undefined;
  /**
   * Filter by hashed id
   */
  hashedId?: models.HashedId | undefined;
  /**
   * Filter by published status.
   */
  published?: boolean | undefined;
  /**
   * Filter by channel episode name/title.
   */
  title?: string | undefined;
};

/** @internal */
export const GetChannelsChannelHashedIdChannelEpisodesRequest$inboundSchema:
  z.ZodType<
    GetChannelsChannelHashedIdChannelEpisodesRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    "channel-hashed-id": z.string(),
    sort_by: models.SortBy$inboundSchema.optional(),
    sort_direction: models.SortDirection$inboundSchema.optional(),
    page: z.number().int().optional(),
    per_page: z.number().int().optional(),
    media_id: z.array(z.string()).optional(),
    hashed_id: models.HashedId$inboundSchema.optional(),
    published: z.boolean().optional(),
    title: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      "channel-hashed-id": "channelHashedId",
      "sort_by": "sortBy",
      "sort_direction": "sortDirection",
      "per_page": "perPage",
      "media_id": "mediaId",
      "hashed_id": "hashedId",
    });
  });

/** @internal */
export type GetChannelsChannelHashedIdChannelEpisodesRequest$Outbound = {
  "channel-hashed-id": string;
  sort_by?: string | undefined;
  sort_direction?: number | undefined;
  page?: number | undefined;
  per_page?: number | undefined;
  media_id?: Array<string> | undefined;
  hashed_id?: models.HashedId$Outbound | undefined;
  published?: boolean | undefined;
  title?: string | undefined;
};

/** @internal */
export const GetChannelsChannelHashedIdChannelEpisodesRequest$outboundSchema:
  z.ZodType<
    GetChannelsChannelHashedIdChannelEpisodesRequest$Outbound,
    z.ZodTypeDef,
    GetChannelsChannelHashedIdChannelEpisodesRequest
  > = z.object({
    channelHashedId: z.string(),
    sortBy: models.SortBy$outboundSchema.optional(),
    sortDirection: models.SortDirection$outboundSchema.optional(),
    page: z.number().int().optional(),
    perPage: z.number().int().optional(),
    mediaId: z.array(z.string()).optional(),
    hashedId: models.HashedId$outboundSchema.optional(),
    published: z.boolean().optional(),
    title: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      channelHashedId: "channel-hashed-id",
      sortBy: "sort_by",
      sortDirection: "sort_direction",
      perPage: "per_page",
      mediaId: "media_id",
      hashedId: "hashed_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetChannelsChannelHashedIdChannelEpisodesRequest$ {
  /** @deprecated use `GetChannelsChannelHashedIdChannelEpisodesRequest$inboundSchema` instead. */
  export const inboundSchema =
    GetChannelsChannelHashedIdChannelEpisodesRequest$inboundSchema;
  /** @deprecated use `GetChannelsChannelHashedIdChannelEpisodesRequest$outboundSchema` instead. */
  export const outboundSchema =
    GetChannelsChannelHashedIdChannelEpisodesRequest$outboundSchema;
  /** @deprecated use `GetChannelsChannelHashedIdChannelEpisodesRequest$Outbound` instead. */
  export type Outbound =
    GetChannelsChannelHashedIdChannelEpisodesRequest$Outbound;
}

export function getChannelsChannelHashedIdChannelEpisodesRequestToJSON(
  getChannelsChannelHashedIdChannelEpisodesRequest:
    GetChannelsChannelHashedIdChannelEpisodesRequest,
): string {
  return JSON.stringify(
    GetChannelsChannelHashedIdChannelEpisodesRequest$outboundSchema.parse(
      getChannelsChannelHashedIdChannelEpisodesRequest,
    ),
  );
}

export function getChannelsChannelHashedIdChannelEpisodesRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  GetChannelsChannelHashedIdChannelEpisodesRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetChannelsChannelHashedIdChannelEpisodesRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetChannelsChannelHashedIdChannelEpisodesRequest' from JSON`,
  );
}
