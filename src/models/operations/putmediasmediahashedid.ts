/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type PutMediasMediaHashedIdRequestBody = {
  /**
   * The media’s new name.
   */
  name?: string | undefined;
  /**
   * The Wistia hashed ID of an image that will replace the still that’s displayed before the player starts playing.
   *
   * @remarks
   */
  newStillMediaId?: string | undefined;
  /**
   * A new description for this media. Accepts plain text or markdown.
   */
  description?: string | undefined;
  /**
   * An array of tag names to apply to the media. Note that this will replace any existing tags!
   */
  tags?: Array<string> | undefined;
};

export type PutMediasMediaHashedIdRequest = {
  /**
   * The hashed ID of the media.
   */
  mediaHashedId: string;
  requestBody?: PutMediasMediaHashedIdRequestBody | undefined;
};

/** @internal */
export const PutMediasMediaHashedIdRequestBody$inboundSchema: z.ZodType<
  PutMediasMediaHashedIdRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string().optional(),
  new_still_media_id: z.string().optional(),
  description: z.string().optional(),
  tags: z.array(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "new_still_media_id": "newStillMediaId",
  });
});

/** @internal */
export type PutMediasMediaHashedIdRequestBody$Outbound = {
  name?: string | undefined;
  new_still_media_id?: string | undefined;
  description?: string | undefined;
  tags?: Array<string> | undefined;
};

/** @internal */
export const PutMediasMediaHashedIdRequestBody$outboundSchema: z.ZodType<
  PutMediasMediaHashedIdRequestBody$Outbound,
  z.ZodTypeDef,
  PutMediasMediaHashedIdRequestBody
> = z.object({
  name: z.string().optional(),
  newStillMediaId: z.string().optional(),
  description: z.string().optional(),
  tags: z.array(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    newStillMediaId: "new_still_media_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutMediasMediaHashedIdRequestBody$ {
  /** @deprecated use `PutMediasMediaHashedIdRequestBody$inboundSchema` instead. */
  export const inboundSchema = PutMediasMediaHashedIdRequestBody$inboundSchema;
  /** @deprecated use `PutMediasMediaHashedIdRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    PutMediasMediaHashedIdRequestBody$outboundSchema;
  /** @deprecated use `PutMediasMediaHashedIdRequestBody$Outbound` instead. */
  export type Outbound = PutMediasMediaHashedIdRequestBody$Outbound;
}

export function putMediasMediaHashedIdRequestBodyToJSON(
  putMediasMediaHashedIdRequestBody: PutMediasMediaHashedIdRequestBody,
): string {
  return JSON.stringify(
    PutMediasMediaHashedIdRequestBody$outboundSchema.parse(
      putMediasMediaHashedIdRequestBody,
    ),
  );
}

export function putMediasMediaHashedIdRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<PutMediasMediaHashedIdRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PutMediasMediaHashedIdRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PutMediasMediaHashedIdRequestBody' from JSON`,
  );
}

/** @internal */
export const PutMediasMediaHashedIdRequest$inboundSchema: z.ZodType<
  PutMediasMediaHashedIdRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  mediaHashedId: z.string(),
  RequestBody: z.lazy(() => PutMediasMediaHashedIdRequestBody$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type PutMediasMediaHashedIdRequest$Outbound = {
  mediaHashedId: string;
  RequestBody?: PutMediasMediaHashedIdRequestBody$Outbound | undefined;
};

/** @internal */
export const PutMediasMediaHashedIdRequest$outboundSchema: z.ZodType<
  PutMediasMediaHashedIdRequest$Outbound,
  z.ZodTypeDef,
  PutMediasMediaHashedIdRequest
> = z.object({
  mediaHashedId: z.string(),
  requestBody: z.lazy(() => PutMediasMediaHashedIdRequestBody$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutMediasMediaHashedIdRequest$ {
  /** @deprecated use `PutMediasMediaHashedIdRequest$inboundSchema` instead. */
  export const inboundSchema = PutMediasMediaHashedIdRequest$inboundSchema;
  /** @deprecated use `PutMediasMediaHashedIdRequest$outboundSchema` instead. */
  export const outboundSchema = PutMediasMediaHashedIdRequest$outboundSchema;
  /** @deprecated use `PutMediasMediaHashedIdRequest$Outbound` instead. */
  export type Outbound = PutMediasMediaHashedIdRequest$Outbound;
}

export function putMediasMediaHashedIdRequestToJSON(
  putMediasMediaHashedIdRequest: PutMediasMediaHashedIdRequest,
): string {
  return JSON.stringify(
    PutMediasMediaHashedIdRequest$outboundSchema.parse(
      putMediasMediaHashedIdRequest,
    ),
  );
}

export function putMediasMediaHashedIdRequestFromJSON(
  jsonString: string,
): SafeParseResult<PutMediasMediaHashedIdRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PutMediasMediaHashedIdRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PutMediasMediaHashedIdRequest' from JSON`,
  );
}
