/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type GetSearchRequest = {
  /**
   * The search query string
   */
  q: string;
};

export type Data = {
  projects: Array<models.Project>;
  medias: Array<models.SearchMedia>;
  channels: Array<models.SearchChannel>;
  channelEpisodes: Array<models.SearchChannelEpisode>;
};

/**
 * Search results
 */
export type GetSearchResponse = {
  data: Data;
};

/** @internal */
export const GetSearchRequest$inboundSchema: z.ZodType<
  GetSearchRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  q: z.string(),
});

/** @internal */
export type GetSearchRequest$Outbound = {
  q: string;
};

/** @internal */
export const GetSearchRequest$outboundSchema: z.ZodType<
  GetSearchRequest$Outbound,
  z.ZodTypeDef,
  GetSearchRequest
> = z.object({
  q: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSearchRequest$ {
  /** @deprecated use `GetSearchRequest$inboundSchema` instead. */
  export const inboundSchema = GetSearchRequest$inboundSchema;
  /** @deprecated use `GetSearchRequest$outboundSchema` instead. */
  export const outboundSchema = GetSearchRequest$outboundSchema;
  /** @deprecated use `GetSearchRequest$Outbound` instead. */
  export type Outbound = GetSearchRequest$Outbound;
}

export function getSearchRequestToJSON(
  getSearchRequest: GetSearchRequest,
): string {
  return JSON.stringify(
    GetSearchRequest$outboundSchema.parse(getSearchRequest),
  );
}

export function getSearchRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetSearchRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSearchRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSearchRequest' from JSON`,
  );
}

/** @internal */
export const Data$inboundSchema: z.ZodType<Data, z.ZodTypeDef, unknown> = z
  .object({
    projects: z.array(models.Project$inboundSchema),
    medias: z.array(models.SearchMedia$inboundSchema),
    channels: z.array(models.SearchChannel$inboundSchema),
    channelEpisodes: z.array(models.SearchChannelEpisode$inboundSchema),
  });

/** @internal */
export type Data$Outbound = {
  projects: Array<models.Project$Outbound>;
  medias: Array<models.SearchMedia$Outbound>;
  channels: Array<models.SearchChannel$Outbound>;
  channelEpisodes: Array<models.SearchChannelEpisode$Outbound>;
};

/** @internal */
export const Data$outboundSchema: z.ZodType<Data$Outbound, z.ZodTypeDef, Data> =
  z.object({
    projects: z.array(models.Project$outboundSchema),
    medias: z.array(models.SearchMedia$outboundSchema),
    channels: z.array(models.SearchChannel$outboundSchema),
    channelEpisodes: z.array(models.SearchChannelEpisode$outboundSchema),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Data$ {
  /** @deprecated use `Data$inboundSchema` instead. */
  export const inboundSchema = Data$inboundSchema;
  /** @deprecated use `Data$outboundSchema` instead. */
  export const outboundSchema = Data$outboundSchema;
  /** @deprecated use `Data$Outbound` instead. */
  export type Outbound = Data$Outbound;
}

export function dataToJSON(data: Data): string {
  return JSON.stringify(Data$outboundSchema.parse(data));
}

export function dataFromJSON(
  jsonString: string,
): SafeParseResult<Data, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Data$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Data' from JSON`,
  );
}

/** @internal */
export const GetSearchResponse$inboundSchema: z.ZodType<
  GetSearchResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.lazy(() => Data$inboundSchema),
});

/** @internal */
export type GetSearchResponse$Outbound = {
  data: Data$Outbound;
};

/** @internal */
export const GetSearchResponse$outboundSchema: z.ZodType<
  GetSearchResponse$Outbound,
  z.ZodTypeDef,
  GetSearchResponse
> = z.object({
  data: z.lazy(() => Data$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSearchResponse$ {
  /** @deprecated use `GetSearchResponse$inboundSchema` instead. */
  export const inboundSchema = GetSearchResponse$inboundSchema;
  /** @deprecated use `GetSearchResponse$outboundSchema` instead. */
  export const outboundSchema = GetSearchResponse$outboundSchema;
  /** @deprecated use `GetSearchResponse$Outbound` instead. */
  export type Outbound = GetSearchResponse$Outbound;
}

export function getSearchResponseToJSON(
  getSearchResponse: GetSearchResponse,
): string {
  return JSON.stringify(
    GetSearchResponse$outboundSchema.parse(getSearchResponse),
  );
}

export function getSearchResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetSearchResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSearchResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSearchResponse' from JSON`,
  );
}
