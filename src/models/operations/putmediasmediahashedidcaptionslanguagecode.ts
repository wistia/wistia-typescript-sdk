/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type PutMediasMediaHashedIdCaptionsLanguageCodeRequestBody = {
  /**
   * Either an attached SRT file or a string parameter with the contents of an SRT file.
   */
  captionFile: string;
};

export type PutMediasMediaHashedIdCaptionsLanguageCodeRequest = {
  /**
   * Unique identifier for the video.
   */
  mediaHashedId: string;
  /**
   * Language code conforming to ISO-639-2 for which the captions should be updated.
   */
  languageCode: string;
  requestBody: PutMediasMediaHashedIdCaptionsLanguageCodeRequestBody;
};

/** @internal */
export const PutMediasMediaHashedIdCaptionsLanguageCodeRequestBody$inboundSchema:
  z.ZodType<
    PutMediasMediaHashedIdCaptionsLanguageCodeRequestBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    caption_file: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "caption_file": "captionFile",
    });
  });

/** @internal */
export type PutMediasMediaHashedIdCaptionsLanguageCodeRequestBody$Outbound = {
  caption_file: string;
};

/** @internal */
export const PutMediasMediaHashedIdCaptionsLanguageCodeRequestBody$outboundSchema:
  z.ZodType<
    PutMediasMediaHashedIdCaptionsLanguageCodeRequestBody$Outbound,
    z.ZodTypeDef,
    PutMediasMediaHashedIdCaptionsLanguageCodeRequestBody
  > = z.object({
    captionFile: z.string(),
  }).transform((v) => {
    return remap$(v, {
      captionFile: "caption_file",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutMediasMediaHashedIdCaptionsLanguageCodeRequestBody$ {
  /** @deprecated use `PutMediasMediaHashedIdCaptionsLanguageCodeRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    PutMediasMediaHashedIdCaptionsLanguageCodeRequestBody$inboundSchema;
  /** @deprecated use `PutMediasMediaHashedIdCaptionsLanguageCodeRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    PutMediasMediaHashedIdCaptionsLanguageCodeRequestBody$outboundSchema;
  /** @deprecated use `PutMediasMediaHashedIdCaptionsLanguageCodeRequestBody$Outbound` instead. */
  export type Outbound =
    PutMediasMediaHashedIdCaptionsLanguageCodeRequestBody$Outbound;
}

export function putMediasMediaHashedIdCaptionsLanguageCodeRequestBodyToJSON(
  putMediasMediaHashedIdCaptionsLanguageCodeRequestBody:
    PutMediasMediaHashedIdCaptionsLanguageCodeRequestBody,
): string {
  return JSON.stringify(
    PutMediasMediaHashedIdCaptionsLanguageCodeRequestBody$outboundSchema.parse(
      putMediasMediaHashedIdCaptionsLanguageCodeRequestBody,
    ),
  );
}

export function putMediasMediaHashedIdCaptionsLanguageCodeRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  PutMediasMediaHashedIdCaptionsLanguageCodeRequestBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutMediasMediaHashedIdCaptionsLanguageCodeRequestBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PutMediasMediaHashedIdCaptionsLanguageCodeRequestBody' from JSON`,
  );
}

/** @internal */
export const PutMediasMediaHashedIdCaptionsLanguageCodeRequest$inboundSchema:
  z.ZodType<
    PutMediasMediaHashedIdCaptionsLanguageCodeRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    "media-hashed-id": z.string(),
    "language-code": z.string(),
    RequestBody: z.lazy(() =>
      PutMediasMediaHashedIdCaptionsLanguageCodeRequestBody$inboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      "media-hashed-id": "mediaHashedId",
      "language-code": "languageCode",
      "RequestBody": "requestBody",
    });
  });

/** @internal */
export type PutMediasMediaHashedIdCaptionsLanguageCodeRequest$Outbound = {
  "media-hashed-id": string;
  "language-code": string;
  RequestBody: PutMediasMediaHashedIdCaptionsLanguageCodeRequestBody$Outbound;
};

/** @internal */
export const PutMediasMediaHashedIdCaptionsLanguageCodeRequest$outboundSchema:
  z.ZodType<
    PutMediasMediaHashedIdCaptionsLanguageCodeRequest$Outbound,
    z.ZodTypeDef,
    PutMediasMediaHashedIdCaptionsLanguageCodeRequest
  > = z.object({
    mediaHashedId: z.string(),
    languageCode: z.string(),
    requestBody: z.lazy(() =>
      PutMediasMediaHashedIdCaptionsLanguageCodeRequestBody$outboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      mediaHashedId: "media-hashed-id",
      languageCode: "language-code",
      requestBody: "RequestBody",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutMediasMediaHashedIdCaptionsLanguageCodeRequest$ {
  /** @deprecated use `PutMediasMediaHashedIdCaptionsLanguageCodeRequest$inboundSchema` instead. */
  export const inboundSchema =
    PutMediasMediaHashedIdCaptionsLanguageCodeRequest$inboundSchema;
  /** @deprecated use `PutMediasMediaHashedIdCaptionsLanguageCodeRequest$outboundSchema` instead. */
  export const outboundSchema =
    PutMediasMediaHashedIdCaptionsLanguageCodeRequest$outboundSchema;
  /** @deprecated use `PutMediasMediaHashedIdCaptionsLanguageCodeRequest$Outbound` instead. */
  export type Outbound =
    PutMediasMediaHashedIdCaptionsLanguageCodeRequest$Outbound;
}

export function putMediasMediaHashedIdCaptionsLanguageCodeRequestToJSON(
  putMediasMediaHashedIdCaptionsLanguageCodeRequest:
    PutMediasMediaHashedIdCaptionsLanguageCodeRequest,
): string {
  return JSON.stringify(
    PutMediasMediaHashedIdCaptionsLanguageCodeRequest$outboundSchema.parse(
      putMediasMediaHashedIdCaptionsLanguageCodeRequest,
    ),
  );
}

export function putMediasMediaHashedIdCaptionsLanguageCodeRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  PutMediasMediaHashedIdCaptionsLanguageCodeRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutMediasMediaHashedIdCaptionsLanguageCodeRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PutMediasMediaHashedIdCaptionsLanguageCodeRequest' from JSON`,
  );
}
