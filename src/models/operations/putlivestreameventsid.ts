/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export const PutLiveStreamEventsIdServerList = [
  "https://api.wistia.com/v1",
] as const;

export type PutLiveStreamEventsIdRequest = {
  /**
   * The hashed ID of the live stream event
   */
  id: string;
  updateLiveStreamEvent: models.UpdateLiveStreamEvent;
};

/** @internal */
export const PutLiveStreamEventsIdRequest$inboundSchema: z.ZodType<
  PutLiveStreamEventsIdRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  UpdateLiveStreamEvent: models.UpdateLiveStreamEvent$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "UpdateLiveStreamEvent": "updateLiveStreamEvent",
  });
});

/** @internal */
export type PutLiveStreamEventsIdRequest$Outbound = {
  id: string;
  UpdateLiveStreamEvent: models.UpdateLiveStreamEvent$Outbound;
};

/** @internal */
export const PutLiveStreamEventsIdRequest$outboundSchema: z.ZodType<
  PutLiveStreamEventsIdRequest$Outbound,
  z.ZodTypeDef,
  PutLiveStreamEventsIdRequest
> = z.object({
  id: z.string(),
  updateLiveStreamEvent: models.UpdateLiveStreamEvent$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    updateLiveStreamEvent: "UpdateLiveStreamEvent",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutLiveStreamEventsIdRequest$ {
  /** @deprecated use `PutLiveStreamEventsIdRequest$inboundSchema` instead. */
  export const inboundSchema = PutLiveStreamEventsIdRequest$inboundSchema;
  /** @deprecated use `PutLiveStreamEventsIdRequest$outboundSchema` instead. */
  export const outboundSchema = PutLiveStreamEventsIdRequest$outboundSchema;
  /** @deprecated use `PutLiveStreamEventsIdRequest$Outbound` instead. */
  export type Outbound = PutLiveStreamEventsIdRequest$Outbound;
}

export function putLiveStreamEventsIdRequestToJSON(
  putLiveStreamEventsIdRequest: PutLiveStreamEventsIdRequest,
): string {
  return JSON.stringify(
    PutLiveStreamEventsIdRequest$outboundSchema.parse(
      putLiveStreamEventsIdRequest,
    ),
  );
}

export function putLiveStreamEventsIdRequestFromJSON(
  jsonString: string,
): SafeParseResult<PutLiveStreamEventsIdRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PutLiveStreamEventsIdRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PutLiveStreamEventsIdRequest' from JSON`,
  );
}
