/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const PostMediasMediaHashedIdLocalizationsServerList = [
  "https://api.wistia.com/v1",
] as const;

export type PostMediasMediaHashedIdLocalizationsRequestBody = {
  /**
   * The language to localize the media to as a 3-character IETF language code.
   */
  outputLanguage: string;
  /**
   * Whether to automatically enable the localization.
   */
  autoEnable?: boolean | undefined;
};

export type PostMediasMediaHashedIdLocalizationsRequest = {
  /**
   * The hashed ID of the media to create a localization for.
   */
  mediaHashedId: string;
  requestBody?: PostMediasMediaHashedIdLocalizationsRequestBody | undefined;
};

/** @internal */
export const PostMediasMediaHashedIdLocalizationsRequestBody$inboundSchema:
  z.ZodType<
    PostMediasMediaHashedIdLocalizationsRequestBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    output_language: z.string(),
    auto_enable: z.boolean().default(true),
  }).transform((v) => {
    return remap$(v, {
      "output_language": "outputLanguage",
      "auto_enable": "autoEnable",
    });
  });

/** @internal */
export type PostMediasMediaHashedIdLocalizationsRequestBody$Outbound = {
  output_language: string;
  auto_enable: boolean;
};

/** @internal */
export const PostMediasMediaHashedIdLocalizationsRequestBody$outboundSchema:
  z.ZodType<
    PostMediasMediaHashedIdLocalizationsRequestBody$Outbound,
    z.ZodTypeDef,
    PostMediasMediaHashedIdLocalizationsRequestBody
  > = z.object({
    outputLanguage: z.string(),
    autoEnable: z.boolean().default(true),
  }).transform((v) => {
    return remap$(v, {
      outputLanguage: "output_language",
      autoEnable: "auto_enable",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostMediasMediaHashedIdLocalizationsRequestBody$ {
  /** @deprecated use `PostMediasMediaHashedIdLocalizationsRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    PostMediasMediaHashedIdLocalizationsRequestBody$inboundSchema;
  /** @deprecated use `PostMediasMediaHashedIdLocalizationsRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    PostMediasMediaHashedIdLocalizationsRequestBody$outboundSchema;
  /** @deprecated use `PostMediasMediaHashedIdLocalizationsRequestBody$Outbound` instead. */
  export type Outbound =
    PostMediasMediaHashedIdLocalizationsRequestBody$Outbound;
}

export function postMediasMediaHashedIdLocalizationsRequestBodyToJSON(
  postMediasMediaHashedIdLocalizationsRequestBody:
    PostMediasMediaHashedIdLocalizationsRequestBody,
): string {
  return JSON.stringify(
    PostMediasMediaHashedIdLocalizationsRequestBody$outboundSchema.parse(
      postMediasMediaHashedIdLocalizationsRequestBody,
    ),
  );
}

export function postMediasMediaHashedIdLocalizationsRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  PostMediasMediaHashedIdLocalizationsRequestBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostMediasMediaHashedIdLocalizationsRequestBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostMediasMediaHashedIdLocalizationsRequestBody' from JSON`,
  );
}

/** @internal */
export const PostMediasMediaHashedIdLocalizationsRequest$inboundSchema:
  z.ZodType<
    PostMediasMediaHashedIdLocalizationsRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    "media-hashed-id": z.string(),
    RequestBody: z.lazy(() =>
      PostMediasMediaHashedIdLocalizationsRequestBody$inboundSchema
    ).optional(),
  }).transform((v) => {
    return remap$(v, {
      "media-hashed-id": "mediaHashedId",
      "RequestBody": "requestBody",
    });
  });

/** @internal */
export type PostMediasMediaHashedIdLocalizationsRequest$Outbound = {
  "media-hashed-id": string;
  RequestBody?:
    | PostMediasMediaHashedIdLocalizationsRequestBody$Outbound
    | undefined;
};

/** @internal */
export const PostMediasMediaHashedIdLocalizationsRequest$outboundSchema:
  z.ZodType<
    PostMediasMediaHashedIdLocalizationsRequest$Outbound,
    z.ZodTypeDef,
    PostMediasMediaHashedIdLocalizationsRequest
  > = z.object({
    mediaHashedId: z.string(),
    requestBody: z.lazy(() =>
      PostMediasMediaHashedIdLocalizationsRequestBody$outboundSchema
    ).optional(),
  }).transform((v) => {
    return remap$(v, {
      mediaHashedId: "media-hashed-id",
      requestBody: "RequestBody",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostMediasMediaHashedIdLocalizationsRequest$ {
  /** @deprecated use `PostMediasMediaHashedIdLocalizationsRequest$inboundSchema` instead. */
  export const inboundSchema =
    PostMediasMediaHashedIdLocalizationsRequest$inboundSchema;
  /** @deprecated use `PostMediasMediaHashedIdLocalizationsRequest$outboundSchema` instead. */
  export const outboundSchema =
    PostMediasMediaHashedIdLocalizationsRequest$outboundSchema;
  /** @deprecated use `PostMediasMediaHashedIdLocalizationsRequest$Outbound` instead. */
  export type Outbound = PostMediasMediaHashedIdLocalizationsRequest$Outbound;
}

export function postMediasMediaHashedIdLocalizationsRequestToJSON(
  postMediasMediaHashedIdLocalizationsRequest:
    PostMediasMediaHashedIdLocalizationsRequest,
): string {
  return JSON.stringify(
    PostMediasMediaHashedIdLocalizationsRequest$outboundSchema.parse(
      postMediasMediaHashedIdLocalizationsRequest,
    ),
  );
}

export function postMediasMediaHashedIdLocalizationsRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  PostMediasMediaHashedIdLocalizationsRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostMediasMediaHashedIdLocalizationsRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostMediasMediaHashedIdLocalizationsRequest' from JSON`,
  );
}
