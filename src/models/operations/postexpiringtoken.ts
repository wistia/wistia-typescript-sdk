/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export const PostExpiringTokenServerList = [
  "https://api.wistia.com/v1",
] as const;

export type PostExpiringTokenRequest = {
  expiringAccessToken?: models.ExpiringAccessTokenInput | undefined;
};

/** @internal */
export const PostExpiringTokenRequest$inboundSchema: z.ZodType<
  PostExpiringTokenRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  expiring_access_token: models.ExpiringAccessTokenInput$inboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "expiring_access_token": "expiringAccessToken",
  });
});

/** @internal */
export type PostExpiringTokenRequest$Outbound = {
  expiring_access_token?: models.ExpiringAccessTokenInput$Outbound | undefined;
};

/** @internal */
export const PostExpiringTokenRequest$outboundSchema: z.ZodType<
  PostExpiringTokenRequest$Outbound,
  z.ZodTypeDef,
  PostExpiringTokenRequest
> = z.object({
  expiringAccessToken: models.ExpiringAccessTokenInput$outboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    expiringAccessToken: "expiring_access_token",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostExpiringTokenRequest$ {
  /** @deprecated use `PostExpiringTokenRequest$inboundSchema` instead. */
  export const inboundSchema = PostExpiringTokenRequest$inboundSchema;
  /** @deprecated use `PostExpiringTokenRequest$outboundSchema` instead. */
  export const outboundSchema = PostExpiringTokenRequest$outboundSchema;
  /** @deprecated use `PostExpiringTokenRequest$Outbound` instead. */
  export type Outbound = PostExpiringTokenRequest$Outbound;
}

export function postExpiringTokenRequestToJSON(
  postExpiringTokenRequest: PostExpiringTokenRequest,
): string {
  return JSON.stringify(
    PostExpiringTokenRequest$outboundSchema.parse(postExpiringTokenRequest),
  );
}

export function postExpiringTokenRequestFromJSON(
  jsonString: string,
): SafeParseResult<PostExpiringTokenRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostExpiringTokenRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostExpiringTokenRequest' from JSON`,
  );
}
