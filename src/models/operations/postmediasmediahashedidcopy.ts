/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export const PostMediasMediaHashedIdCopyServerList = [
  "https://api.wistia.com/v1",
] as const;

export type PostMediasMediaHashedIdCopyRequestBody = {
  /**
   * The ID of the project where you want the new copy placed. Defaults to the source media’s current project if omitted or invalid.
   */
  projectId?: number | undefined;
  /**
   * An email address specifying the owner of the new media. Defaults to the source media’s current owner if omitted or invalid.
   */
  owner?: string | undefined;
};

export type PostMediasMediaHashedIdCopyRequest = {
  /**
   * The hashed ID of the media.
   */
  mediaHashedId: string;
  requestBody?: PostMediasMediaHashedIdCopyRequestBody | undefined;
};

export type PostMediasMediaHashedIdCopyResponse = {
  headers: { [k: string]: Array<string> };
  result: models.MediaWithThumbnailAndProjectSchemaMedia;
};

/** @internal */
export const PostMediasMediaHashedIdCopyRequestBody$inboundSchema: z.ZodType<
  PostMediasMediaHashedIdCopyRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  project_id: z.number().int().optional(),
  owner: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "project_id": "projectId",
  });
});

/** @internal */
export type PostMediasMediaHashedIdCopyRequestBody$Outbound = {
  project_id?: number | undefined;
  owner?: string | undefined;
};

/** @internal */
export const PostMediasMediaHashedIdCopyRequestBody$outboundSchema: z.ZodType<
  PostMediasMediaHashedIdCopyRequestBody$Outbound,
  z.ZodTypeDef,
  PostMediasMediaHashedIdCopyRequestBody
> = z.object({
  projectId: z.number().int().optional(),
  owner: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    projectId: "project_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostMediasMediaHashedIdCopyRequestBody$ {
  /** @deprecated use `PostMediasMediaHashedIdCopyRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    PostMediasMediaHashedIdCopyRequestBody$inboundSchema;
  /** @deprecated use `PostMediasMediaHashedIdCopyRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    PostMediasMediaHashedIdCopyRequestBody$outboundSchema;
  /** @deprecated use `PostMediasMediaHashedIdCopyRequestBody$Outbound` instead. */
  export type Outbound = PostMediasMediaHashedIdCopyRequestBody$Outbound;
}

export function postMediasMediaHashedIdCopyRequestBodyToJSON(
  postMediasMediaHashedIdCopyRequestBody:
    PostMediasMediaHashedIdCopyRequestBody,
): string {
  return JSON.stringify(
    PostMediasMediaHashedIdCopyRequestBody$outboundSchema.parse(
      postMediasMediaHashedIdCopyRequestBody,
    ),
  );
}

export function postMediasMediaHashedIdCopyRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<PostMediasMediaHashedIdCopyRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      PostMediasMediaHashedIdCopyRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostMediasMediaHashedIdCopyRequestBody' from JSON`,
  );
}

/** @internal */
export const PostMediasMediaHashedIdCopyRequest$inboundSchema: z.ZodType<
  PostMediasMediaHashedIdCopyRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "media-hashed-id": z.string(),
  RequestBody: z.lazy(() =>
    PostMediasMediaHashedIdCopyRequestBody$inboundSchema
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "media-hashed-id": "mediaHashedId",
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type PostMediasMediaHashedIdCopyRequest$Outbound = {
  "media-hashed-id": string;
  RequestBody?: PostMediasMediaHashedIdCopyRequestBody$Outbound | undefined;
};

/** @internal */
export const PostMediasMediaHashedIdCopyRequest$outboundSchema: z.ZodType<
  PostMediasMediaHashedIdCopyRequest$Outbound,
  z.ZodTypeDef,
  PostMediasMediaHashedIdCopyRequest
> = z.object({
  mediaHashedId: z.string(),
  requestBody: z.lazy(() =>
    PostMediasMediaHashedIdCopyRequestBody$outboundSchema
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    mediaHashedId: "media-hashed-id",
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostMediasMediaHashedIdCopyRequest$ {
  /** @deprecated use `PostMediasMediaHashedIdCopyRequest$inboundSchema` instead. */
  export const inboundSchema = PostMediasMediaHashedIdCopyRequest$inboundSchema;
  /** @deprecated use `PostMediasMediaHashedIdCopyRequest$outboundSchema` instead. */
  export const outboundSchema =
    PostMediasMediaHashedIdCopyRequest$outboundSchema;
  /** @deprecated use `PostMediasMediaHashedIdCopyRequest$Outbound` instead. */
  export type Outbound = PostMediasMediaHashedIdCopyRequest$Outbound;
}

export function postMediasMediaHashedIdCopyRequestToJSON(
  postMediasMediaHashedIdCopyRequest: PostMediasMediaHashedIdCopyRequest,
): string {
  return JSON.stringify(
    PostMediasMediaHashedIdCopyRequest$outboundSchema.parse(
      postMediasMediaHashedIdCopyRequest,
    ),
  );
}

export function postMediasMediaHashedIdCopyRequestFromJSON(
  jsonString: string,
): SafeParseResult<PostMediasMediaHashedIdCopyRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      PostMediasMediaHashedIdCopyRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostMediasMediaHashedIdCopyRequest' from JSON`,
  );
}

/** @internal */
export const PostMediasMediaHashedIdCopyResponse$inboundSchema: z.ZodType<
  PostMediasMediaHashedIdCopyResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
  Result: models.MediaWithThumbnailAndProjectSchemaMedia$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type PostMediasMediaHashedIdCopyResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: models.MediaWithThumbnailAndProjectSchemaMedia$Outbound;
};

/** @internal */
export const PostMediasMediaHashedIdCopyResponse$outboundSchema: z.ZodType<
  PostMediasMediaHashedIdCopyResponse$Outbound,
  z.ZodTypeDef,
  PostMediasMediaHashedIdCopyResponse
> = z.object({
  headers: z.record(z.array(z.string())),
  result: models.MediaWithThumbnailAndProjectSchemaMedia$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostMediasMediaHashedIdCopyResponse$ {
  /** @deprecated use `PostMediasMediaHashedIdCopyResponse$inboundSchema` instead. */
  export const inboundSchema =
    PostMediasMediaHashedIdCopyResponse$inboundSchema;
  /** @deprecated use `PostMediasMediaHashedIdCopyResponse$outboundSchema` instead. */
  export const outboundSchema =
    PostMediasMediaHashedIdCopyResponse$outboundSchema;
  /** @deprecated use `PostMediasMediaHashedIdCopyResponse$Outbound` instead. */
  export type Outbound = PostMediasMediaHashedIdCopyResponse$Outbound;
}

export function postMediasMediaHashedIdCopyResponseToJSON(
  postMediasMediaHashedIdCopyResponse: PostMediasMediaHashedIdCopyResponse,
): string {
  return JSON.stringify(
    PostMediasMediaHashedIdCopyResponse$outboundSchema.parse(
      postMediasMediaHashedIdCopyResponse,
    ),
  );
}

export function postMediasMediaHashedIdCopyResponseFromJSON(
  jsonString: string,
): SafeParseResult<PostMediasMediaHashedIdCopyResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      PostMediasMediaHashedIdCopyResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostMediasMediaHashedIdCopyResponse' from JSON`,
  );
}
