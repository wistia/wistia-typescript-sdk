/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetStatsMediasMediaIdRequest = {
  /**
   * The hashed ID or ID of the video for which you want to retrieve stats.
   */
  mediaId: string;
};

export type Action = {
  /**
   * Type of action (e.g., "Call to Action").
   */
  type?: string | undefined;
  /**
   * Number of actions performed.
   */
  actionCount?: number | undefined;
  /**
   * Number of times the action was shown.
   */
  impressionCount?: number | undefined;
  /**
   * The rate of actions performed over impressions.
   */
  rate?: number | undefined;
};

/**
 * Success response with the stats of the video.
 */
export type GetStatsMediasMediaIdResponse = {
  /**
   * The total number of times this video has been loaded.
   */
  loadCount?: number | undefined;
  /**
   * The total number of times this video has been played.
   */
  playCount?: number | undefined;
  /**
   * The percentage of visitors who clicked play (between 0 and 1).
   */
  playRate?: number | undefined;
  /**
   * The total time spent watching this video.
   */
  hoursWatched?: number | undefined;
  /**
   * The average percentage of the video that gets viewed (between 0 and 1).
   */
  engagement?: number | undefined;
  /**
   * The total number of unique people that have loaded this video.
   */
  visitors?: number | undefined;
  actions?: Array<Action> | undefined;
};

/** @internal */
export const GetStatsMediasMediaIdRequest$inboundSchema: z.ZodType<
  GetStatsMediasMediaIdRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  mediaId: z.string(),
});

/** @internal */
export type GetStatsMediasMediaIdRequest$Outbound = {
  mediaId: string;
};

/** @internal */
export const GetStatsMediasMediaIdRequest$outboundSchema: z.ZodType<
  GetStatsMediasMediaIdRequest$Outbound,
  z.ZodTypeDef,
  GetStatsMediasMediaIdRequest
> = z.object({
  mediaId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetStatsMediasMediaIdRequest$ {
  /** @deprecated use `GetStatsMediasMediaIdRequest$inboundSchema` instead. */
  export const inboundSchema = GetStatsMediasMediaIdRequest$inboundSchema;
  /** @deprecated use `GetStatsMediasMediaIdRequest$outboundSchema` instead. */
  export const outboundSchema = GetStatsMediasMediaIdRequest$outboundSchema;
  /** @deprecated use `GetStatsMediasMediaIdRequest$Outbound` instead. */
  export type Outbound = GetStatsMediasMediaIdRequest$Outbound;
}

export function getStatsMediasMediaIdRequestToJSON(
  getStatsMediasMediaIdRequest: GetStatsMediasMediaIdRequest,
): string {
  return JSON.stringify(
    GetStatsMediasMediaIdRequest$outboundSchema.parse(
      getStatsMediasMediaIdRequest,
    ),
  );
}

export function getStatsMediasMediaIdRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetStatsMediasMediaIdRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetStatsMediasMediaIdRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetStatsMediasMediaIdRequest' from JSON`,
  );
}

/** @internal */
export const Action$inboundSchema: z.ZodType<Action, z.ZodTypeDef, unknown> = z
  .object({
    type: z.string().optional(),
    action_count: z.number().int().optional(),
    impression_count: z.number().int().optional(),
    rate: z.number().optional(),
  }).transform((v) => {
    return remap$(v, {
      "action_count": "actionCount",
      "impression_count": "impressionCount",
    });
  });

/** @internal */
export type Action$Outbound = {
  type?: string | undefined;
  action_count?: number | undefined;
  impression_count?: number | undefined;
  rate?: number | undefined;
};

/** @internal */
export const Action$outboundSchema: z.ZodType<
  Action$Outbound,
  z.ZodTypeDef,
  Action
> = z.object({
  type: z.string().optional(),
  actionCount: z.number().int().optional(),
  impressionCount: z.number().int().optional(),
  rate: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    actionCount: "action_count",
    impressionCount: "impression_count",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Action$ {
  /** @deprecated use `Action$inboundSchema` instead. */
  export const inboundSchema = Action$inboundSchema;
  /** @deprecated use `Action$outboundSchema` instead. */
  export const outboundSchema = Action$outboundSchema;
  /** @deprecated use `Action$Outbound` instead. */
  export type Outbound = Action$Outbound;
}

export function actionToJSON(action: Action): string {
  return JSON.stringify(Action$outboundSchema.parse(action));
}

export function actionFromJSON(
  jsonString: string,
): SafeParseResult<Action, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Action$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Action' from JSON`,
  );
}

/** @internal */
export const GetStatsMediasMediaIdResponse$inboundSchema: z.ZodType<
  GetStatsMediasMediaIdResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  load_count: z.number().int().optional(),
  play_count: z.number().int().optional(),
  play_rate: z.number().optional(),
  hours_watched: z.number().optional(),
  engagement: z.number().optional(),
  visitors: z.number().int().optional(),
  actions: z.array(z.lazy(() => Action$inboundSchema)).optional(),
}).transform((v) => {
  return remap$(v, {
    "load_count": "loadCount",
    "play_count": "playCount",
    "play_rate": "playRate",
    "hours_watched": "hoursWatched",
  });
});

/** @internal */
export type GetStatsMediasMediaIdResponse$Outbound = {
  load_count?: number | undefined;
  play_count?: number | undefined;
  play_rate?: number | undefined;
  hours_watched?: number | undefined;
  engagement?: number | undefined;
  visitors?: number | undefined;
  actions?: Array<Action$Outbound> | undefined;
};

/** @internal */
export const GetStatsMediasMediaIdResponse$outboundSchema: z.ZodType<
  GetStatsMediasMediaIdResponse$Outbound,
  z.ZodTypeDef,
  GetStatsMediasMediaIdResponse
> = z.object({
  loadCount: z.number().int().optional(),
  playCount: z.number().int().optional(),
  playRate: z.number().optional(),
  hoursWatched: z.number().optional(),
  engagement: z.number().optional(),
  visitors: z.number().int().optional(),
  actions: z.array(z.lazy(() => Action$outboundSchema)).optional(),
}).transform((v) => {
  return remap$(v, {
    loadCount: "load_count",
    playCount: "play_count",
    playRate: "play_rate",
    hoursWatched: "hours_watched",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetStatsMediasMediaIdResponse$ {
  /** @deprecated use `GetStatsMediasMediaIdResponse$inboundSchema` instead. */
  export const inboundSchema = GetStatsMediasMediaIdResponse$inboundSchema;
  /** @deprecated use `GetStatsMediasMediaIdResponse$outboundSchema` instead. */
  export const outboundSchema = GetStatsMediasMediaIdResponse$outboundSchema;
  /** @deprecated use `GetStatsMediasMediaIdResponse$Outbound` instead. */
  export type Outbound = GetStatsMediasMediaIdResponse$Outbound;
}

export function getStatsMediasMediaIdResponseToJSON(
  getStatsMediasMediaIdResponse: GetStatsMediasMediaIdResponse,
): string {
  return JSON.stringify(
    GetStatsMediasMediaIdResponse$outboundSchema.parse(
      getStatsMediasMediaIdResponse,
    ),
  );
}

export function getStatsMediasMediaIdResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetStatsMediasMediaIdResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetStatsMediasMediaIdResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetStatsMediasMediaIdResponse' from JSON`,
  );
}
