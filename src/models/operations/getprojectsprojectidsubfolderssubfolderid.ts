/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Format for media descriptions
 */
export const DescriptionFormat = {
  Markdown: "markdown",
} as const;
/**
 * Format for media descriptions
 */
export type DescriptionFormat = ClosedEnum<typeof DescriptionFormat>;

export type GetProjectsProjectIdSubfoldersSubfolderIdRequest = {
  /**
   * The hashed ID of the project
   */
  projectId: string;
  /**
   * The hashed ID of the subfolder
   */
  subfolderId: string;
  /**
   * Format for media descriptions
   */
  descriptionFormat?: DescriptionFormat | undefined;
};

/** @internal */
export const DescriptionFormat$inboundSchema: z.ZodNativeEnum<
  typeof DescriptionFormat
> = z.nativeEnum(DescriptionFormat);

/** @internal */
export const DescriptionFormat$outboundSchema: z.ZodNativeEnum<
  typeof DescriptionFormat
> = DescriptionFormat$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DescriptionFormat$ {
  /** @deprecated use `DescriptionFormat$inboundSchema` instead. */
  export const inboundSchema = DescriptionFormat$inboundSchema;
  /** @deprecated use `DescriptionFormat$outboundSchema` instead. */
  export const outboundSchema = DescriptionFormat$outboundSchema;
}

/** @internal */
export const GetProjectsProjectIdSubfoldersSubfolderIdRequest$inboundSchema:
  z.ZodType<
    GetProjectsProjectIdSubfoldersSubfolderIdRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    "project-id": z.string(),
    "subfolder-id": z.string(),
    description_format: DescriptionFormat$inboundSchema.optional(),
  }).transform((v) => {
    return remap$(v, {
      "project-id": "projectId",
      "subfolder-id": "subfolderId",
      "description_format": "descriptionFormat",
    });
  });

/** @internal */
export type GetProjectsProjectIdSubfoldersSubfolderIdRequest$Outbound = {
  "project-id": string;
  "subfolder-id": string;
  description_format?: string | undefined;
};

/** @internal */
export const GetProjectsProjectIdSubfoldersSubfolderIdRequest$outboundSchema:
  z.ZodType<
    GetProjectsProjectIdSubfoldersSubfolderIdRequest$Outbound,
    z.ZodTypeDef,
    GetProjectsProjectIdSubfoldersSubfolderIdRequest
  > = z.object({
    projectId: z.string(),
    subfolderId: z.string(),
    descriptionFormat: DescriptionFormat$outboundSchema.optional(),
  }).transform((v) => {
    return remap$(v, {
      projectId: "project-id",
      subfolderId: "subfolder-id",
      descriptionFormat: "description_format",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetProjectsProjectIdSubfoldersSubfolderIdRequest$ {
  /** @deprecated use `GetProjectsProjectIdSubfoldersSubfolderIdRequest$inboundSchema` instead. */
  export const inboundSchema =
    GetProjectsProjectIdSubfoldersSubfolderIdRequest$inboundSchema;
  /** @deprecated use `GetProjectsProjectIdSubfoldersSubfolderIdRequest$outboundSchema` instead. */
  export const outboundSchema =
    GetProjectsProjectIdSubfoldersSubfolderIdRequest$outboundSchema;
  /** @deprecated use `GetProjectsProjectIdSubfoldersSubfolderIdRequest$Outbound` instead. */
  export type Outbound =
    GetProjectsProjectIdSubfoldersSubfolderIdRequest$Outbound;
}

export function getProjectsProjectIdSubfoldersSubfolderIdRequestToJSON(
  getProjectsProjectIdSubfoldersSubfolderIdRequest:
    GetProjectsProjectIdSubfoldersSubfolderIdRequest,
): string {
  return JSON.stringify(
    GetProjectsProjectIdSubfoldersSubfolderIdRequest$outboundSchema.parse(
      getProjectsProjectIdSubfoldersSubfolderIdRequest,
    ),
  );
}

export function getProjectsProjectIdSubfoldersSubfolderIdRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  GetProjectsProjectIdSubfoldersSubfolderIdRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetProjectsProjectIdSubfoldersSubfolderIdRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetProjectsProjectIdSubfoldersSubfolderIdRequest' from JSON`,
  );
}
