/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const GetChannelsServerList = [
  "https://api.wistia.com/v1",
] as const;

/**
 * Ordering. Default is ID ASC.
 */
export const GetChannelsSortBy = {
  Created: "created",
  Id: "id",
  Updated: "updated",
} as const;
/**
 * Ordering. Default is ID ASC.
 */
export type GetChannelsSortBy = ClosedEnum<typeof GetChannelsSortBy>;

/**
 * Ordering Sort Direction (0 = desc, 1 = asc; default is 1)
 */
export const GetChannelsSortDirection = {
  Zero: 0,
  One: 1,
} as const;
/**
 * Ordering Sort Direction (0 = desc, 1 = asc; default is 1)
 */
export type GetChannelsSortDirection = ClosedEnum<
  typeof GetChannelsSortDirection
>;

export type GetChannelsRequest = {
  /**
   * Page number to retrieve
   */
  page?: number | undefined;
  /**
   * Number of channels per page
   */
  perPage?: number | undefined;
  /**
   * Ordering. Default is ID ASC.
   */
  sortBy?: GetChannelsSortBy | undefined;
  /**
   * Ordering Sort Direction (0 = desc, 1 = asc; default is 1)
   */
  sortDirection?: GetChannelsSortDirection | undefined;
  /**
   * Find all of the channels limited to these hashed_ids.
   */
  hashedIds?: Array<string> | undefined;
};

/** @internal */
export const GetChannelsSortBy$inboundSchema: z.ZodNativeEnum<
  typeof GetChannelsSortBy
> = z.nativeEnum(GetChannelsSortBy);

/** @internal */
export const GetChannelsSortBy$outboundSchema: z.ZodNativeEnum<
  typeof GetChannelsSortBy
> = GetChannelsSortBy$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetChannelsSortBy$ {
  /** @deprecated use `GetChannelsSortBy$inboundSchema` instead. */
  export const inboundSchema = GetChannelsSortBy$inboundSchema;
  /** @deprecated use `GetChannelsSortBy$outboundSchema` instead. */
  export const outboundSchema = GetChannelsSortBy$outboundSchema;
}

/** @internal */
export const GetChannelsSortDirection$inboundSchema: z.ZodNativeEnum<
  typeof GetChannelsSortDirection
> = z.nativeEnum(GetChannelsSortDirection);

/** @internal */
export const GetChannelsSortDirection$outboundSchema: z.ZodNativeEnum<
  typeof GetChannelsSortDirection
> = GetChannelsSortDirection$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetChannelsSortDirection$ {
  /** @deprecated use `GetChannelsSortDirection$inboundSchema` instead. */
  export const inboundSchema = GetChannelsSortDirection$inboundSchema;
  /** @deprecated use `GetChannelsSortDirection$outboundSchema` instead. */
  export const outboundSchema = GetChannelsSortDirection$outboundSchema;
}

/** @internal */
export const GetChannelsRequest$inboundSchema: z.ZodType<
  GetChannelsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  page: z.number().int().optional(),
  per_page: z.number().int().optional(),
  sort_by: GetChannelsSortBy$inboundSchema.optional(),
  sort_direction: GetChannelsSortDirection$inboundSchema.optional(),
  hashed_ids: z.array(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "per_page": "perPage",
    "sort_by": "sortBy",
    "sort_direction": "sortDirection",
    "hashed_ids": "hashedIds",
  });
});

/** @internal */
export type GetChannelsRequest$Outbound = {
  page?: number | undefined;
  per_page?: number | undefined;
  sort_by?: string | undefined;
  sort_direction?: number | undefined;
  hashed_ids?: Array<string> | undefined;
};

/** @internal */
export const GetChannelsRequest$outboundSchema: z.ZodType<
  GetChannelsRequest$Outbound,
  z.ZodTypeDef,
  GetChannelsRequest
> = z.object({
  page: z.number().int().optional(),
  perPage: z.number().int().optional(),
  sortBy: GetChannelsSortBy$outboundSchema.optional(),
  sortDirection: GetChannelsSortDirection$outboundSchema.optional(),
  hashedIds: z.array(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    perPage: "per_page",
    sortBy: "sort_by",
    sortDirection: "sort_direction",
    hashedIds: "hashed_ids",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetChannelsRequest$ {
  /** @deprecated use `GetChannelsRequest$inboundSchema` instead. */
  export const inboundSchema = GetChannelsRequest$inboundSchema;
  /** @deprecated use `GetChannelsRequest$outboundSchema` instead. */
  export const outboundSchema = GetChannelsRequest$outboundSchema;
  /** @deprecated use `GetChannelsRequest$Outbound` instead. */
  export type Outbound = GetChannelsRequest$Outbound;
}

export function getChannelsRequestToJSON(
  getChannelsRequest: GetChannelsRequest,
): string {
  return JSON.stringify(
    GetChannelsRequest$outboundSchema.parse(getChannelsRequest),
  );
}

export function getChannelsRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetChannelsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetChannelsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetChannelsRequest' from JSON`,
  );
}
