/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DeleteLiveStreamEventsIdRequest = {
  /**
   * The hashed ID of the live stream event
   */
  id: string;
};

/** @internal */
export const DeleteLiveStreamEventsIdRequest$inboundSchema: z.ZodType<
  DeleteLiveStreamEventsIdRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type DeleteLiveStreamEventsIdRequest$Outbound = {
  id: string;
};

/** @internal */
export const DeleteLiveStreamEventsIdRequest$outboundSchema: z.ZodType<
  DeleteLiveStreamEventsIdRequest$Outbound,
  z.ZodTypeDef,
  DeleteLiveStreamEventsIdRequest
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteLiveStreamEventsIdRequest$ {
  /** @deprecated use `DeleteLiveStreamEventsIdRequest$inboundSchema` instead. */
  export const inboundSchema = DeleteLiveStreamEventsIdRequest$inboundSchema;
  /** @deprecated use `DeleteLiveStreamEventsIdRequest$outboundSchema` instead. */
  export const outboundSchema = DeleteLiveStreamEventsIdRequest$outboundSchema;
  /** @deprecated use `DeleteLiveStreamEventsIdRequest$Outbound` instead. */
  export type Outbound = DeleteLiveStreamEventsIdRequest$Outbound;
}

export function deleteLiveStreamEventsIdRequestToJSON(
  deleteLiveStreamEventsIdRequest: DeleteLiveStreamEventsIdRequest,
): string {
  return JSON.stringify(
    DeleteLiveStreamEventsIdRequest$outboundSchema.parse(
      deleteLiveStreamEventsIdRequest,
    ),
  );
}

export function deleteLiveStreamEventsIdRequestFromJSON(
  jsonString: string,
): SafeParseResult<DeleteLiveStreamEventsIdRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteLiveStreamEventsIdRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteLiveStreamEventsIdRequest' from JSON`,
  );
}
