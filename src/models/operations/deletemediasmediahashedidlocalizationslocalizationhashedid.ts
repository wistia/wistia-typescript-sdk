/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DeleteMediasMediaHashedIdLocalizationsLocalizationHashedIdRequest =
  {
    /**
     * The hashed ID of the localization's media.
     */
    mediaHashedId: string;
    /**
     * The hashed ID of the localization to delete.
     */
    localizationHashedId: string;
  };

/** @internal */
export const DeleteMediasMediaHashedIdLocalizationsLocalizationHashedIdRequest$inboundSchema:
  z.ZodType<
    DeleteMediasMediaHashedIdLocalizationsLocalizationHashedIdRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    mediaHashedId: z.string(),
    localizationHashedId: z.string(),
  });

/** @internal */
export type DeleteMediasMediaHashedIdLocalizationsLocalizationHashedIdRequest$Outbound =
  {
    mediaHashedId: string;
    localizationHashedId: string;
  };

/** @internal */
export const DeleteMediasMediaHashedIdLocalizationsLocalizationHashedIdRequest$outboundSchema:
  z.ZodType<
    DeleteMediasMediaHashedIdLocalizationsLocalizationHashedIdRequest$Outbound,
    z.ZodTypeDef,
    DeleteMediasMediaHashedIdLocalizationsLocalizationHashedIdRequest
  > = z.object({
    mediaHashedId: z.string(),
    localizationHashedId: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteMediasMediaHashedIdLocalizationsLocalizationHashedIdRequest$ {
  /** @deprecated use `DeleteMediasMediaHashedIdLocalizationsLocalizationHashedIdRequest$inboundSchema` instead. */
  export const inboundSchema =
    DeleteMediasMediaHashedIdLocalizationsLocalizationHashedIdRequest$inboundSchema;
  /** @deprecated use `DeleteMediasMediaHashedIdLocalizationsLocalizationHashedIdRequest$outboundSchema` instead. */
  export const outboundSchema =
    DeleteMediasMediaHashedIdLocalizationsLocalizationHashedIdRequest$outboundSchema;
  /** @deprecated use `DeleteMediasMediaHashedIdLocalizationsLocalizationHashedIdRequest$Outbound` instead. */
  export type Outbound =
    DeleteMediasMediaHashedIdLocalizationsLocalizationHashedIdRequest$Outbound;
}

export function deleteMediasMediaHashedIdLocalizationsLocalizationHashedIdRequestToJSON(
  deleteMediasMediaHashedIdLocalizationsLocalizationHashedIdRequest:
    DeleteMediasMediaHashedIdLocalizationsLocalizationHashedIdRequest,
): string {
  return JSON.stringify(
    DeleteMediasMediaHashedIdLocalizationsLocalizationHashedIdRequest$outboundSchema
      .parse(deleteMediasMediaHashedIdLocalizationsLocalizationHashedIdRequest),
  );
}

export function deleteMediasMediaHashedIdLocalizationsLocalizationHashedIdRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  DeleteMediasMediaHashedIdLocalizationsLocalizationHashedIdRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      DeleteMediasMediaHashedIdLocalizationsLocalizationHashedIdRequest$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'DeleteMediasMediaHashedIdLocalizationsLocalizationHashedIdRequest' from JSON`,
  );
}
