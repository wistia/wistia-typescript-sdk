/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type PutMediasRestoreRequest = {
  /**
   * An array of the media hashed IDs to be restored.
   */
  hashedIds: Array<string>;
  /**
   * The hashed ID of the project to restore the medias to. Required unless channel_id is specified.
   */
  projectId?: string | undefined;
  /**
   * The hashed ID of the channel to restore the medias to. Required unless project_id is specified.
   */
  channelId?: string | undefined;
};

export type Container = {
  /**
   * The type of container the medias will be restored to, either Project or Channel.
   */
  type?: string | undefined;
  /**
   * The display name of the container the medias will be restored to.
   */
  name?: string | undefined;
  /**
   * The hashed ID of the container the medias will be restored to.
   */
  hashedId?: string | undefined;
};

/**
 * Successful restoration of media.
 */
export type PutMediasRestoreResponse = {
  /**
   * A confirmation message that the background job has been queued.
   */
  message?: string | undefined;
  container?: Container | undefined;
  /**
   * Status of the background job.
   */
  backgroundJobStatus?: models.BackgroundJobStatus | undefined;
};

/** @internal */
export const PutMediasRestoreRequest$inboundSchema: z.ZodType<
  PutMediasRestoreRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  hashed_ids: z.array(z.string()),
  project_id: z.string().optional(),
  channel_id: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "hashed_ids": "hashedIds",
    "project_id": "projectId",
    "channel_id": "channelId",
  });
});

/** @internal */
export type PutMediasRestoreRequest$Outbound = {
  hashed_ids: Array<string>;
  project_id?: string | undefined;
  channel_id?: string | undefined;
};

/** @internal */
export const PutMediasRestoreRequest$outboundSchema: z.ZodType<
  PutMediasRestoreRequest$Outbound,
  z.ZodTypeDef,
  PutMediasRestoreRequest
> = z.object({
  hashedIds: z.array(z.string()),
  projectId: z.string().optional(),
  channelId: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    hashedIds: "hashed_ids",
    projectId: "project_id",
    channelId: "channel_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutMediasRestoreRequest$ {
  /** @deprecated use `PutMediasRestoreRequest$inboundSchema` instead. */
  export const inboundSchema = PutMediasRestoreRequest$inboundSchema;
  /** @deprecated use `PutMediasRestoreRequest$outboundSchema` instead. */
  export const outboundSchema = PutMediasRestoreRequest$outboundSchema;
  /** @deprecated use `PutMediasRestoreRequest$Outbound` instead. */
  export type Outbound = PutMediasRestoreRequest$Outbound;
}

export function putMediasRestoreRequestToJSON(
  putMediasRestoreRequest: PutMediasRestoreRequest,
): string {
  return JSON.stringify(
    PutMediasRestoreRequest$outboundSchema.parse(putMediasRestoreRequest),
  );
}

export function putMediasRestoreRequestFromJSON(
  jsonString: string,
): SafeParseResult<PutMediasRestoreRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PutMediasRestoreRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PutMediasRestoreRequest' from JSON`,
  );
}

/** @internal */
export const Container$inboundSchema: z.ZodType<
  Container,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.string().optional(),
  name: z.string().optional(),
  hashedId: z.string().optional(),
});

/** @internal */
export type Container$Outbound = {
  type?: string | undefined;
  name?: string | undefined;
  hashedId?: string | undefined;
};

/** @internal */
export const Container$outboundSchema: z.ZodType<
  Container$Outbound,
  z.ZodTypeDef,
  Container
> = z.object({
  type: z.string().optional(),
  name: z.string().optional(),
  hashedId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Container$ {
  /** @deprecated use `Container$inboundSchema` instead. */
  export const inboundSchema = Container$inboundSchema;
  /** @deprecated use `Container$outboundSchema` instead. */
  export const outboundSchema = Container$outboundSchema;
  /** @deprecated use `Container$Outbound` instead. */
  export type Outbound = Container$Outbound;
}

export function containerToJSON(container: Container): string {
  return JSON.stringify(Container$outboundSchema.parse(container));
}

export function containerFromJSON(
  jsonString: string,
): SafeParseResult<Container, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Container$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Container' from JSON`,
  );
}

/** @internal */
export const PutMediasRestoreResponse$inboundSchema: z.ZodType<
  PutMediasRestoreResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string().optional(),
  container: z.lazy(() => Container$inboundSchema).optional(),
  background_job_status: models.BackgroundJobStatus$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "background_job_status": "backgroundJobStatus",
  });
});

/** @internal */
export type PutMediasRestoreResponse$Outbound = {
  message?: string | undefined;
  container?: Container$Outbound | undefined;
  background_job_status?: models.BackgroundJobStatus$Outbound | undefined;
};

/** @internal */
export const PutMediasRestoreResponse$outboundSchema: z.ZodType<
  PutMediasRestoreResponse$Outbound,
  z.ZodTypeDef,
  PutMediasRestoreResponse
> = z.object({
  message: z.string().optional(),
  container: z.lazy(() => Container$outboundSchema).optional(),
  backgroundJobStatus: models.BackgroundJobStatus$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    backgroundJobStatus: "background_job_status",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutMediasRestoreResponse$ {
  /** @deprecated use `PutMediasRestoreResponse$inboundSchema` instead. */
  export const inboundSchema = PutMediasRestoreResponse$inboundSchema;
  /** @deprecated use `PutMediasRestoreResponse$outboundSchema` instead. */
  export const outboundSchema = PutMediasRestoreResponse$outboundSchema;
  /** @deprecated use `PutMediasRestoreResponse$Outbound` instead. */
  export type Outbound = PutMediasRestoreResponse$Outbound;
}

export function putMediasRestoreResponseToJSON(
  putMediasRestoreResponse: PutMediasRestoreResponse,
): string {
  return JSON.stringify(
    PutMediasRestoreResponse$outboundSchema.parse(putMediasRestoreResponse),
  );
}

export function putMediasRestoreResponseFromJSON(
  jsonString: string,
): SafeParseResult<PutMediasRestoreResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PutMediasRestoreResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PutMediasRestoreResponse' from JSON`,
  );
}
