/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { RFCDate } from "../../types/rfcdate.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const GetStatsMediasMediaIdByDateServerList = [
  "https://api.wistia.com/v1",
] as const;

export type GetStatsMediasMediaIdByDateRequest = {
  /**
   * The ID of the media
   */
  mediaId: string;
  /**
   * The start date for the stats, formatted YYYY-MM-DD
   */
  startDate?: RFCDate | undefined;
  /**
   * The end date for the stats, formatted YYYY-MM-DD
   */
  endDate?: RFCDate | undefined;
};

export type GetStatsMediasMediaIdByDateResponse = {
  date?: RFCDate | undefined;
  loadCount?: number | undefined;
  playCount?: number | undefined;
  hoursWatched?: number | undefined;
};

/** @internal */
export const GetStatsMediasMediaIdByDateRequest$inboundSchema: z.ZodType<
  GetStatsMediasMediaIdByDateRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "media-id": z.string(),
  start_date: z.string().transform(v => new RFCDate(v)).optional(),
  end_date: z.string().transform(v => new RFCDate(v)).optional(),
}).transform((v) => {
  return remap$(v, {
    "media-id": "mediaId",
    "start_date": "startDate",
    "end_date": "endDate",
  });
});

/** @internal */
export type GetStatsMediasMediaIdByDateRequest$Outbound = {
  "media-id": string;
  start_date?: string | undefined;
  end_date?: string | undefined;
};

/** @internal */
export const GetStatsMediasMediaIdByDateRequest$outboundSchema: z.ZodType<
  GetStatsMediasMediaIdByDateRequest$Outbound,
  z.ZodTypeDef,
  GetStatsMediasMediaIdByDateRequest
> = z.object({
  mediaId: z.string(),
  startDate: z.instanceof(RFCDate).transform(v => v.toString()).optional(),
  endDate: z.instanceof(RFCDate).transform(v => v.toString()).optional(),
}).transform((v) => {
  return remap$(v, {
    mediaId: "media-id",
    startDate: "start_date",
    endDate: "end_date",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetStatsMediasMediaIdByDateRequest$ {
  /** @deprecated use `GetStatsMediasMediaIdByDateRequest$inboundSchema` instead. */
  export const inboundSchema = GetStatsMediasMediaIdByDateRequest$inboundSchema;
  /** @deprecated use `GetStatsMediasMediaIdByDateRequest$outboundSchema` instead. */
  export const outboundSchema =
    GetStatsMediasMediaIdByDateRequest$outboundSchema;
  /** @deprecated use `GetStatsMediasMediaIdByDateRequest$Outbound` instead. */
  export type Outbound = GetStatsMediasMediaIdByDateRequest$Outbound;
}

export function getStatsMediasMediaIdByDateRequestToJSON(
  getStatsMediasMediaIdByDateRequest: GetStatsMediasMediaIdByDateRequest,
): string {
  return JSON.stringify(
    GetStatsMediasMediaIdByDateRequest$outboundSchema.parse(
      getStatsMediasMediaIdByDateRequest,
    ),
  );
}

export function getStatsMediasMediaIdByDateRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetStatsMediasMediaIdByDateRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetStatsMediasMediaIdByDateRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetStatsMediasMediaIdByDateRequest' from JSON`,
  );
}

/** @internal */
export const GetStatsMediasMediaIdByDateResponse$inboundSchema: z.ZodType<
  GetStatsMediasMediaIdByDateResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  date: z.string().transform(v => new RFCDate(v)).optional(),
  load_count: z.number().int().optional(),
  play_count: z.number().int().optional(),
  hours_watched: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "load_count": "loadCount",
    "play_count": "playCount",
    "hours_watched": "hoursWatched",
  });
});

/** @internal */
export type GetStatsMediasMediaIdByDateResponse$Outbound = {
  date?: string | undefined;
  load_count?: number | undefined;
  play_count?: number | undefined;
  hours_watched?: number | undefined;
};

/** @internal */
export const GetStatsMediasMediaIdByDateResponse$outboundSchema: z.ZodType<
  GetStatsMediasMediaIdByDateResponse$Outbound,
  z.ZodTypeDef,
  GetStatsMediasMediaIdByDateResponse
> = z.object({
  date: z.instanceof(RFCDate).transform(v => v.toString()).optional(),
  loadCount: z.number().int().optional(),
  playCount: z.number().int().optional(),
  hoursWatched: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    loadCount: "load_count",
    playCount: "play_count",
    hoursWatched: "hours_watched",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetStatsMediasMediaIdByDateResponse$ {
  /** @deprecated use `GetStatsMediasMediaIdByDateResponse$inboundSchema` instead. */
  export const inboundSchema =
    GetStatsMediasMediaIdByDateResponse$inboundSchema;
  /** @deprecated use `GetStatsMediasMediaIdByDateResponse$outboundSchema` instead. */
  export const outboundSchema =
    GetStatsMediasMediaIdByDateResponse$outboundSchema;
  /** @deprecated use `GetStatsMediasMediaIdByDateResponse$Outbound` instead. */
  export type Outbound = GetStatsMediasMediaIdByDateResponse$Outbound;
}

export function getStatsMediasMediaIdByDateResponseToJSON(
  getStatsMediasMediaIdByDateResponse: GetStatsMediasMediaIdByDateResponse,
): string {
  return JSON.stringify(
    GetStatsMediasMediaIdByDateResponse$outboundSchema.parse(
      getStatsMediasMediaIdByDateResponse,
    ),
  );
}

export function getStatsMediasMediaIdByDateResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetStatsMediasMediaIdByDateResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetStatsMediasMediaIdByDateResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetStatsMediasMediaIdByDateResponse' from JSON`,
  );
}
