/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DeleteMediasMediaIdCustomizationsRequest = {
  /**
   * The hashed ID of the media whose customizations are to be deleted.
   */
  mediaId: string;
};

/** @internal */
export const DeleteMediasMediaIdCustomizationsRequest$inboundSchema: z.ZodType<
  DeleteMediasMediaIdCustomizationsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  mediaId: z.string(),
});

/** @internal */
export type DeleteMediasMediaIdCustomizationsRequest$Outbound = {
  mediaId: string;
};

/** @internal */
export const DeleteMediasMediaIdCustomizationsRequest$outboundSchema: z.ZodType<
  DeleteMediasMediaIdCustomizationsRequest$Outbound,
  z.ZodTypeDef,
  DeleteMediasMediaIdCustomizationsRequest
> = z.object({
  mediaId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteMediasMediaIdCustomizationsRequest$ {
  /** @deprecated use `DeleteMediasMediaIdCustomizationsRequest$inboundSchema` instead. */
  export const inboundSchema =
    DeleteMediasMediaIdCustomizationsRequest$inboundSchema;
  /** @deprecated use `DeleteMediasMediaIdCustomizationsRequest$outboundSchema` instead. */
  export const outboundSchema =
    DeleteMediasMediaIdCustomizationsRequest$outboundSchema;
  /** @deprecated use `DeleteMediasMediaIdCustomizationsRequest$Outbound` instead. */
  export type Outbound = DeleteMediasMediaIdCustomizationsRequest$Outbound;
}

export function deleteMediasMediaIdCustomizationsRequestToJSON(
  deleteMediasMediaIdCustomizationsRequest:
    DeleteMediasMediaIdCustomizationsRequest,
): string {
  return JSON.stringify(
    DeleteMediasMediaIdCustomizationsRequest$outboundSchema.parse(
      deleteMediasMediaIdCustomizationsRequest,
    ),
  );
}

export function deleteMediasMediaIdCustomizationsRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  DeleteMediasMediaIdCustomizationsRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      DeleteMediasMediaIdCustomizationsRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'DeleteMediasMediaIdCustomizationsRequest' from JSON`,
  );
}
