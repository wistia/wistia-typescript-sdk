/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const DeleteMediasMediaHashedIdCaptionsLanguageCodeServerList = [
  "https://api.wistia.com/v1",
] as const;

export type DeleteMediasMediaHashedIdCaptionsLanguageCodeRequest = {
  /**
   * Unique identifier for the video.
   */
  mediaHashedId: string;
  /**
   * Language code conforming to ISO-639-2 for which the captions should be removed.
   */
  languageCode: string;
};

/** @internal */
export const DeleteMediasMediaHashedIdCaptionsLanguageCodeRequest$inboundSchema:
  z.ZodType<
    DeleteMediasMediaHashedIdCaptionsLanguageCodeRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    "media-hashed-id": z.string(),
    "language-code": z.string(),
  }).transform((v) => {
    return remap$(v, {
      "media-hashed-id": "mediaHashedId",
      "language-code": "languageCode",
    });
  });

/** @internal */
export type DeleteMediasMediaHashedIdCaptionsLanguageCodeRequest$Outbound = {
  "media-hashed-id": string;
  "language-code": string;
};

/** @internal */
export const DeleteMediasMediaHashedIdCaptionsLanguageCodeRequest$outboundSchema:
  z.ZodType<
    DeleteMediasMediaHashedIdCaptionsLanguageCodeRequest$Outbound,
    z.ZodTypeDef,
    DeleteMediasMediaHashedIdCaptionsLanguageCodeRequest
  > = z.object({
    mediaHashedId: z.string(),
    languageCode: z.string(),
  }).transform((v) => {
    return remap$(v, {
      mediaHashedId: "media-hashed-id",
      languageCode: "language-code",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteMediasMediaHashedIdCaptionsLanguageCodeRequest$ {
  /** @deprecated use `DeleteMediasMediaHashedIdCaptionsLanguageCodeRequest$inboundSchema` instead. */
  export const inboundSchema =
    DeleteMediasMediaHashedIdCaptionsLanguageCodeRequest$inboundSchema;
  /** @deprecated use `DeleteMediasMediaHashedIdCaptionsLanguageCodeRequest$outboundSchema` instead. */
  export const outboundSchema =
    DeleteMediasMediaHashedIdCaptionsLanguageCodeRequest$outboundSchema;
  /** @deprecated use `DeleteMediasMediaHashedIdCaptionsLanguageCodeRequest$Outbound` instead. */
  export type Outbound =
    DeleteMediasMediaHashedIdCaptionsLanguageCodeRequest$Outbound;
}

export function deleteMediasMediaHashedIdCaptionsLanguageCodeRequestToJSON(
  deleteMediasMediaHashedIdCaptionsLanguageCodeRequest:
    DeleteMediasMediaHashedIdCaptionsLanguageCodeRequest,
): string {
  return JSON.stringify(
    DeleteMediasMediaHashedIdCaptionsLanguageCodeRequest$outboundSchema.parse(
      deleteMediasMediaHashedIdCaptionsLanguageCodeRequest,
    ),
  );
}

export function deleteMediasMediaHashedIdCaptionsLanguageCodeRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  DeleteMediasMediaHashedIdCaptionsLanguageCodeRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      DeleteMediasMediaHashedIdCaptionsLanguageCodeRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'DeleteMediasMediaHashedIdCaptionsLanguageCodeRequest' from JSON`,
  );
}
