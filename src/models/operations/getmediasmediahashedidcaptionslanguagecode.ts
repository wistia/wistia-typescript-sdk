/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type GetMediasMediaHashedIdCaptionsLanguageCodeRequest = {
  /**
   * The hashed ID of the media from which captions are to be retrieved.
   */
  mediaHashedId: string;
  /**
   * The language code of the captions to be retrieved.
   */
  languageCode: string;
};

export type GetMediasMediaHashedIdCaptionsLanguageCodeResponse =
  | models.Caption
  | string
  | string;

/** @internal */
export const GetMediasMediaHashedIdCaptionsLanguageCodeRequest$inboundSchema:
  z.ZodType<
    GetMediasMediaHashedIdCaptionsLanguageCodeRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    "media-hashed-id": z.string(),
    "language-code": z.string(),
  }).transform((v) => {
    return remap$(v, {
      "media-hashed-id": "mediaHashedId",
      "language-code": "languageCode",
    });
  });

/** @internal */
export type GetMediasMediaHashedIdCaptionsLanguageCodeRequest$Outbound = {
  "media-hashed-id": string;
  "language-code": string;
};

/** @internal */
export const GetMediasMediaHashedIdCaptionsLanguageCodeRequest$outboundSchema:
  z.ZodType<
    GetMediasMediaHashedIdCaptionsLanguageCodeRequest$Outbound,
    z.ZodTypeDef,
    GetMediasMediaHashedIdCaptionsLanguageCodeRequest
  > = z.object({
    mediaHashedId: z.string(),
    languageCode: z.string(),
  }).transform((v) => {
    return remap$(v, {
      mediaHashedId: "media-hashed-id",
      languageCode: "language-code",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetMediasMediaHashedIdCaptionsLanguageCodeRequest$ {
  /** @deprecated use `GetMediasMediaHashedIdCaptionsLanguageCodeRequest$inboundSchema` instead. */
  export const inboundSchema =
    GetMediasMediaHashedIdCaptionsLanguageCodeRequest$inboundSchema;
  /** @deprecated use `GetMediasMediaHashedIdCaptionsLanguageCodeRequest$outboundSchema` instead. */
  export const outboundSchema =
    GetMediasMediaHashedIdCaptionsLanguageCodeRequest$outboundSchema;
  /** @deprecated use `GetMediasMediaHashedIdCaptionsLanguageCodeRequest$Outbound` instead. */
  export type Outbound =
    GetMediasMediaHashedIdCaptionsLanguageCodeRequest$Outbound;
}

export function getMediasMediaHashedIdCaptionsLanguageCodeRequestToJSON(
  getMediasMediaHashedIdCaptionsLanguageCodeRequest:
    GetMediasMediaHashedIdCaptionsLanguageCodeRequest,
): string {
  return JSON.stringify(
    GetMediasMediaHashedIdCaptionsLanguageCodeRequest$outboundSchema.parse(
      getMediasMediaHashedIdCaptionsLanguageCodeRequest,
    ),
  );
}

export function getMediasMediaHashedIdCaptionsLanguageCodeRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  GetMediasMediaHashedIdCaptionsLanguageCodeRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetMediasMediaHashedIdCaptionsLanguageCodeRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetMediasMediaHashedIdCaptionsLanguageCodeRequest' from JSON`,
  );
}

/** @internal */
export const GetMediasMediaHashedIdCaptionsLanguageCodeResponse$inboundSchema:
  z.ZodType<
    GetMediasMediaHashedIdCaptionsLanguageCodeResponse,
    z.ZodTypeDef,
    unknown
  > = z.union([models.Caption$inboundSchema, z.string(), z.string()]);

/** @internal */
export type GetMediasMediaHashedIdCaptionsLanguageCodeResponse$Outbound =
  | models.Caption$Outbound
  | string
  | string;

/** @internal */
export const GetMediasMediaHashedIdCaptionsLanguageCodeResponse$outboundSchema:
  z.ZodType<
    GetMediasMediaHashedIdCaptionsLanguageCodeResponse$Outbound,
    z.ZodTypeDef,
    GetMediasMediaHashedIdCaptionsLanguageCodeResponse
  > = z.union([models.Caption$outboundSchema, z.string(), z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetMediasMediaHashedIdCaptionsLanguageCodeResponse$ {
  /** @deprecated use `GetMediasMediaHashedIdCaptionsLanguageCodeResponse$inboundSchema` instead. */
  export const inboundSchema =
    GetMediasMediaHashedIdCaptionsLanguageCodeResponse$inboundSchema;
  /** @deprecated use `GetMediasMediaHashedIdCaptionsLanguageCodeResponse$outboundSchema` instead. */
  export const outboundSchema =
    GetMediasMediaHashedIdCaptionsLanguageCodeResponse$outboundSchema;
  /** @deprecated use `GetMediasMediaHashedIdCaptionsLanguageCodeResponse$Outbound` instead. */
  export type Outbound =
    GetMediasMediaHashedIdCaptionsLanguageCodeResponse$Outbound;
}

export function getMediasMediaHashedIdCaptionsLanguageCodeResponseToJSON(
  getMediasMediaHashedIdCaptionsLanguageCodeResponse:
    GetMediasMediaHashedIdCaptionsLanguageCodeResponse,
): string {
  return JSON.stringify(
    GetMediasMediaHashedIdCaptionsLanguageCodeResponse$outboundSchema.parse(
      getMediasMediaHashedIdCaptionsLanguageCodeResponse,
    ),
  );
}

export function getMediasMediaHashedIdCaptionsLanguageCodeResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  GetMediasMediaHashedIdCaptionsLanguageCodeResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetMediasMediaHashedIdCaptionsLanguageCodeResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetMediasMediaHashedIdCaptionsLanguageCodeResponse' from JSON`,
  );
}
