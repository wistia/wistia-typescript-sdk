/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type PostMediasMediaHashedIdTrimsRequestBody = {
  /**
   * An array of strings matching the format of HH:MM:SS.mmm-HH:MM:SS.mmm where HH is hours, MM is minutes, SS is seconds and mmm is milliseconds. The ranges should contain the earliest point of the trim first and the later point of the trim second.
   */
  trims: Array<string>;
};

export type PostMediasMediaHashedIdTrimsRequest = {
  /**
   * The hashed ID of the media.
   */
  mediaHashedId: string;
  requestBody: PostMediasMediaHashedIdTrimsRequestBody;
};

/**
 * Successful queueing of trims worker.
 */
export type PostMediasMediaHashedIdTrimsResponse = {
  /**
   * Status of the background job.
   */
  backgroundJobStatus?: models.BackgroundJobStatus | undefined;
};

/** @internal */
export const PostMediasMediaHashedIdTrimsRequestBody$inboundSchema: z.ZodType<
  PostMediasMediaHashedIdTrimsRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  trims: z.array(z.string()),
});

/** @internal */
export type PostMediasMediaHashedIdTrimsRequestBody$Outbound = {
  trims: Array<string>;
};

/** @internal */
export const PostMediasMediaHashedIdTrimsRequestBody$outboundSchema: z.ZodType<
  PostMediasMediaHashedIdTrimsRequestBody$Outbound,
  z.ZodTypeDef,
  PostMediasMediaHashedIdTrimsRequestBody
> = z.object({
  trims: z.array(z.string()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostMediasMediaHashedIdTrimsRequestBody$ {
  /** @deprecated use `PostMediasMediaHashedIdTrimsRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    PostMediasMediaHashedIdTrimsRequestBody$inboundSchema;
  /** @deprecated use `PostMediasMediaHashedIdTrimsRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    PostMediasMediaHashedIdTrimsRequestBody$outboundSchema;
  /** @deprecated use `PostMediasMediaHashedIdTrimsRequestBody$Outbound` instead. */
  export type Outbound = PostMediasMediaHashedIdTrimsRequestBody$Outbound;
}

export function postMediasMediaHashedIdTrimsRequestBodyToJSON(
  postMediasMediaHashedIdTrimsRequestBody:
    PostMediasMediaHashedIdTrimsRequestBody,
): string {
  return JSON.stringify(
    PostMediasMediaHashedIdTrimsRequestBody$outboundSchema.parse(
      postMediasMediaHashedIdTrimsRequestBody,
    ),
  );
}

export function postMediasMediaHashedIdTrimsRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  PostMediasMediaHashedIdTrimsRequestBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostMediasMediaHashedIdTrimsRequestBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostMediasMediaHashedIdTrimsRequestBody' from JSON`,
  );
}

/** @internal */
export const PostMediasMediaHashedIdTrimsRequest$inboundSchema: z.ZodType<
  PostMediasMediaHashedIdTrimsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  mediaHashedId: z.string(),
  RequestBody: z.lazy(() =>
    PostMediasMediaHashedIdTrimsRequestBody$inboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type PostMediasMediaHashedIdTrimsRequest$Outbound = {
  mediaHashedId: string;
  RequestBody: PostMediasMediaHashedIdTrimsRequestBody$Outbound;
};

/** @internal */
export const PostMediasMediaHashedIdTrimsRequest$outboundSchema: z.ZodType<
  PostMediasMediaHashedIdTrimsRequest$Outbound,
  z.ZodTypeDef,
  PostMediasMediaHashedIdTrimsRequest
> = z.object({
  mediaHashedId: z.string(),
  requestBody: z.lazy(() =>
    PostMediasMediaHashedIdTrimsRequestBody$outboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostMediasMediaHashedIdTrimsRequest$ {
  /** @deprecated use `PostMediasMediaHashedIdTrimsRequest$inboundSchema` instead. */
  export const inboundSchema =
    PostMediasMediaHashedIdTrimsRequest$inboundSchema;
  /** @deprecated use `PostMediasMediaHashedIdTrimsRequest$outboundSchema` instead. */
  export const outboundSchema =
    PostMediasMediaHashedIdTrimsRequest$outboundSchema;
  /** @deprecated use `PostMediasMediaHashedIdTrimsRequest$Outbound` instead. */
  export type Outbound = PostMediasMediaHashedIdTrimsRequest$Outbound;
}

export function postMediasMediaHashedIdTrimsRequestToJSON(
  postMediasMediaHashedIdTrimsRequest: PostMediasMediaHashedIdTrimsRequest,
): string {
  return JSON.stringify(
    PostMediasMediaHashedIdTrimsRequest$outboundSchema.parse(
      postMediasMediaHashedIdTrimsRequest,
    ),
  );
}

export function postMediasMediaHashedIdTrimsRequestFromJSON(
  jsonString: string,
): SafeParseResult<PostMediasMediaHashedIdTrimsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      PostMediasMediaHashedIdTrimsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostMediasMediaHashedIdTrimsRequest' from JSON`,
  );
}

/** @internal */
export const PostMediasMediaHashedIdTrimsResponse$inboundSchema: z.ZodType<
  PostMediasMediaHashedIdTrimsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  background_job_status: models.BackgroundJobStatus$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "background_job_status": "backgroundJobStatus",
  });
});

/** @internal */
export type PostMediasMediaHashedIdTrimsResponse$Outbound = {
  background_job_status?: models.BackgroundJobStatus$Outbound | undefined;
};

/** @internal */
export const PostMediasMediaHashedIdTrimsResponse$outboundSchema: z.ZodType<
  PostMediasMediaHashedIdTrimsResponse$Outbound,
  z.ZodTypeDef,
  PostMediasMediaHashedIdTrimsResponse
> = z.object({
  backgroundJobStatus: models.BackgroundJobStatus$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    backgroundJobStatus: "background_job_status",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostMediasMediaHashedIdTrimsResponse$ {
  /** @deprecated use `PostMediasMediaHashedIdTrimsResponse$inboundSchema` instead. */
  export const inboundSchema =
    PostMediasMediaHashedIdTrimsResponse$inboundSchema;
  /** @deprecated use `PostMediasMediaHashedIdTrimsResponse$outboundSchema` instead. */
  export const outboundSchema =
    PostMediasMediaHashedIdTrimsResponse$outboundSchema;
  /** @deprecated use `PostMediasMediaHashedIdTrimsResponse$Outbound` instead. */
  export type Outbound = PostMediasMediaHashedIdTrimsResponse$Outbound;
}

export function postMediasMediaHashedIdTrimsResponseToJSON(
  postMediasMediaHashedIdTrimsResponse: PostMediasMediaHashedIdTrimsResponse,
): string {
  return JSON.stringify(
    PostMediasMediaHashedIdTrimsResponse$outboundSchema.parse(
      postMediasMediaHashedIdTrimsResponse,
    ),
  );
}

export function postMediasMediaHashedIdTrimsResponseFromJSON(
  jsonString: string,
): SafeParseResult<PostMediasMediaHashedIdTrimsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      PostMediasMediaHashedIdTrimsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostMediasMediaHashedIdTrimsResponse' from JSON`,
  );
}
