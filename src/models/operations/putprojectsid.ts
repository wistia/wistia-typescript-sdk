/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type PutProjectsIdRequest = {
  /**
   * Project Hashed ID
   */
  id: string;
  updateProject?: models.UpdateProject | undefined;
};

/** @internal */
export const PutProjectsIdRequest$inboundSchema: z.ZodType<
  PutProjectsIdRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  UpdateProject: models.UpdateProject$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "UpdateProject": "updateProject",
  });
});

/** @internal */
export type PutProjectsIdRequest$Outbound = {
  id: string;
  UpdateProject?: models.UpdateProject$Outbound | undefined;
};

/** @internal */
export const PutProjectsIdRequest$outboundSchema: z.ZodType<
  PutProjectsIdRequest$Outbound,
  z.ZodTypeDef,
  PutProjectsIdRequest
> = z.object({
  id: z.string(),
  updateProject: models.UpdateProject$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    updateProject: "UpdateProject",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutProjectsIdRequest$ {
  /** @deprecated use `PutProjectsIdRequest$inboundSchema` instead. */
  export const inboundSchema = PutProjectsIdRequest$inboundSchema;
  /** @deprecated use `PutProjectsIdRequest$outboundSchema` instead. */
  export const outboundSchema = PutProjectsIdRequest$outboundSchema;
  /** @deprecated use `PutProjectsIdRequest$Outbound` instead. */
  export type Outbound = PutProjectsIdRequest$Outbound;
}

export function putProjectsIdRequestToJSON(
  putProjectsIdRequest: PutProjectsIdRequest,
): string {
  return JSON.stringify(
    PutProjectsIdRequest$outboundSchema.parse(putProjectsIdRequest),
  );
}

export function putProjectsIdRequestFromJSON(
  jsonString: string,
): SafeParseResult<PutProjectsIdRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PutProjectsIdRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PutProjectsIdRequest' from JSON`,
  );
}
