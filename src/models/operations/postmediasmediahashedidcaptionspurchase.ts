/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const PostMediasMediaHashedIdCaptionsPurchaseServerList = [
  "https://api.wistia.com/v1",
] as const;

export type PostMediasMediaHashedIdCaptionsPurchaseRequestBody = {
  /**
   * Order computer-generated captions (free) or human-generated captions ($2.50/minute).
   */
  automated?: boolean | undefined;
  /**
   * Enable rush order for one business day turnaround ($4.00/minute) or standard four business day turnaround for human-generated captions ($2.50/minute). Rush can only be used for human-generated captions.
   */
  rush?: boolean | undefined;
  /**
   * Automatically enable captions for the video once the order is ready or hold the captions for review before manually enabling.
   */
  automaticallyEnable?: boolean | undefined;
};

export type PostMediasMediaHashedIdCaptionsPurchaseRequest = {
  /**
   * Unique identifier for the video.
   */
  mediaHashedId: string;
  requestBody: PostMediasMediaHashedIdCaptionsPurchaseRequestBody;
};

/**
 * Successful operation. Captions purchased.
 */
export type PostMediasMediaHashedIdCaptionsPurchaseResponse = {
  /**
   * Success message indicating the captions have been purchased
   */
  message: string;
  /**
   * The unique hashed identifier of the time-coded transcript that was created
   */
  id: string;
};

/** @internal */
export const PostMediasMediaHashedIdCaptionsPurchaseRequestBody$inboundSchema:
  z.ZodType<
    PostMediasMediaHashedIdCaptionsPurchaseRequestBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    automated: z.boolean().default(false),
    rush: z.boolean().default(true),
    automatically_enable: z.boolean().default(true),
  }).transform((v) => {
    return remap$(v, {
      "automatically_enable": "automaticallyEnable",
    });
  });

/** @internal */
export type PostMediasMediaHashedIdCaptionsPurchaseRequestBody$Outbound = {
  automated: boolean;
  rush: boolean;
  automatically_enable: boolean;
};

/** @internal */
export const PostMediasMediaHashedIdCaptionsPurchaseRequestBody$outboundSchema:
  z.ZodType<
    PostMediasMediaHashedIdCaptionsPurchaseRequestBody$Outbound,
    z.ZodTypeDef,
    PostMediasMediaHashedIdCaptionsPurchaseRequestBody
  > = z.object({
    automated: z.boolean().default(false),
    rush: z.boolean().default(true),
    automaticallyEnable: z.boolean().default(true),
  }).transform((v) => {
    return remap$(v, {
      automaticallyEnable: "automatically_enable",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostMediasMediaHashedIdCaptionsPurchaseRequestBody$ {
  /** @deprecated use `PostMediasMediaHashedIdCaptionsPurchaseRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    PostMediasMediaHashedIdCaptionsPurchaseRequestBody$inboundSchema;
  /** @deprecated use `PostMediasMediaHashedIdCaptionsPurchaseRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    PostMediasMediaHashedIdCaptionsPurchaseRequestBody$outboundSchema;
  /** @deprecated use `PostMediasMediaHashedIdCaptionsPurchaseRequestBody$Outbound` instead. */
  export type Outbound =
    PostMediasMediaHashedIdCaptionsPurchaseRequestBody$Outbound;
}

export function postMediasMediaHashedIdCaptionsPurchaseRequestBodyToJSON(
  postMediasMediaHashedIdCaptionsPurchaseRequestBody:
    PostMediasMediaHashedIdCaptionsPurchaseRequestBody,
): string {
  return JSON.stringify(
    PostMediasMediaHashedIdCaptionsPurchaseRequestBody$outboundSchema.parse(
      postMediasMediaHashedIdCaptionsPurchaseRequestBody,
    ),
  );
}

export function postMediasMediaHashedIdCaptionsPurchaseRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  PostMediasMediaHashedIdCaptionsPurchaseRequestBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostMediasMediaHashedIdCaptionsPurchaseRequestBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostMediasMediaHashedIdCaptionsPurchaseRequestBody' from JSON`,
  );
}

/** @internal */
export const PostMediasMediaHashedIdCaptionsPurchaseRequest$inboundSchema:
  z.ZodType<
    PostMediasMediaHashedIdCaptionsPurchaseRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    "media-hashed-id": z.string(),
    RequestBody: z.lazy(() =>
      PostMediasMediaHashedIdCaptionsPurchaseRequestBody$inboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      "media-hashed-id": "mediaHashedId",
      "RequestBody": "requestBody",
    });
  });

/** @internal */
export type PostMediasMediaHashedIdCaptionsPurchaseRequest$Outbound = {
  "media-hashed-id": string;
  RequestBody: PostMediasMediaHashedIdCaptionsPurchaseRequestBody$Outbound;
};

/** @internal */
export const PostMediasMediaHashedIdCaptionsPurchaseRequest$outboundSchema:
  z.ZodType<
    PostMediasMediaHashedIdCaptionsPurchaseRequest$Outbound,
    z.ZodTypeDef,
    PostMediasMediaHashedIdCaptionsPurchaseRequest
  > = z.object({
    mediaHashedId: z.string(),
    requestBody: z.lazy(() =>
      PostMediasMediaHashedIdCaptionsPurchaseRequestBody$outboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      mediaHashedId: "media-hashed-id",
      requestBody: "RequestBody",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostMediasMediaHashedIdCaptionsPurchaseRequest$ {
  /** @deprecated use `PostMediasMediaHashedIdCaptionsPurchaseRequest$inboundSchema` instead. */
  export const inboundSchema =
    PostMediasMediaHashedIdCaptionsPurchaseRequest$inboundSchema;
  /** @deprecated use `PostMediasMediaHashedIdCaptionsPurchaseRequest$outboundSchema` instead. */
  export const outboundSchema =
    PostMediasMediaHashedIdCaptionsPurchaseRequest$outboundSchema;
  /** @deprecated use `PostMediasMediaHashedIdCaptionsPurchaseRequest$Outbound` instead. */
  export type Outbound =
    PostMediasMediaHashedIdCaptionsPurchaseRequest$Outbound;
}

export function postMediasMediaHashedIdCaptionsPurchaseRequestToJSON(
  postMediasMediaHashedIdCaptionsPurchaseRequest:
    PostMediasMediaHashedIdCaptionsPurchaseRequest,
): string {
  return JSON.stringify(
    PostMediasMediaHashedIdCaptionsPurchaseRequest$outboundSchema.parse(
      postMediasMediaHashedIdCaptionsPurchaseRequest,
    ),
  );
}

export function postMediasMediaHashedIdCaptionsPurchaseRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  PostMediasMediaHashedIdCaptionsPurchaseRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostMediasMediaHashedIdCaptionsPurchaseRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostMediasMediaHashedIdCaptionsPurchaseRequest' from JSON`,
  );
}

/** @internal */
export const PostMediasMediaHashedIdCaptionsPurchaseResponse$inboundSchema:
  z.ZodType<
    PostMediasMediaHashedIdCaptionsPurchaseResponse,
    z.ZodTypeDef,
    unknown
  > = z.object({
    message: z.string(),
    id: z.string(),
  });

/** @internal */
export type PostMediasMediaHashedIdCaptionsPurchaseResponse$Outbound = {
  message: string;
  id: string;
};

/** @internal */
export const PostMediasMediaHashedIdCaptionsPurchaseResponse$outboundSchema:
  z.ZodType<
    PostMediasMediaHashedIdCaptionsPurchaseResponse$Outbound,
    z.ZodTypeDef,
    PostMediasMediaHashedIdCaptionsPurchaseResponse
  > = z.object({
    message: z.string(),
    id: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostMediasMediaHashedIdCaptionsPurchaseResponse$ {
  /** @deprecated use `PostMediasMediaHashedIdCaptionsPurchaseResponse$inboundSchema` instead. */
  export const inboundSchema =
    PostMediasMediaHashedIdCaptionsPurchaseResponse$inboundSchema;
  /** @deprecated use `PostMediasMediaHashedIdCaptionsPurchaseResponse$outboundSchema` instead. */
  export const outboundSchema =
    PostMediasMediaHashedIdCaptionsPurchaseResponse$outboundSchema;
  /** @deprecated use `PostMediasMediaHashedIdCaptionsPurchaseResponse$Outbound` instead. */
  export type Outbound =
    PostMediasMediaHashedIdCaptionsPurchaseResponse$Outbound;
}

export function postMediasMediaHashedIdCaptionsPurchaseResponseToJSON(
  postMediasMediaHashedIdCaptionsPurchaseResponse:
    PostMediasMediaHashedIdCaptionsPurchaseResponse,
): string {
  return JSON.stringify(
    PostMediasMediaHashedIdCaptionsPurchaseResponse$outboundSchema.parse(
      postMediasMediaHashedIdCaptionsPurchaseResponse,
    ),
  );
}

export function postMediasMediaHashedIdCaptionsPurchaseResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  PostMediasMediaHashedIdCaptionsPurchaseResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostMediasMediaHashedIdCaptionsPurchaseResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostMediasMediaHashedIdCaptionsPurchaseResponse' from JSON`,
  );
}
