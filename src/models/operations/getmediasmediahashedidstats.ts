/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetMediasMediaHashedIdStatsRequest = {
  /**
   * The hashed ID of the video.
   */
  mediaHashedId: string;
};

/**
 * An object representing the aggregated embed statistics for this video.
 */
export type Stats = {
  /**
   * The total number of times that the page containing the embedded video has been loaded.
   */
  pageLoads?: number | undefined;
  /**
   * The number of unique visitors to the page containing the embedded video.
   */
  visitors?: number | undefined;
  /**
   * An integer between 0 and 100 that shows what percentage of the time someone who saw the page containing the embedded video played the video.
   */
  percentOfVisitorsClickingPlay?: number | undefined;
  /**
   * The total number of times that the video has been played.
   */
  plays?: number | undefined;
  /**
   * An integer between 0 and 100. It shows the average percentage of the video that was watched over every time the video was played.
   */
  averagePercentWatched?: number | undefined;
};

/**
 * Successful retrieval of video statistics.
 */
export type GetMediasMediaHashedIdStatsResponse = {
  /**
   * A unique numeric identifier for the video within the system.
   */
  id?: number | undefined;
  /**
   * A unique alphanumeric identifier for the video within the system.
   */
  hashedId?: string | undefined;
  /**
   * The display name of the video.
   */
  name?: string | undefined;
  /**
   * An object representing the aggregated embed statistics for this video.
   */
  stats?: Stats | undefined;
};

/** @internal */
export const GetMediasMediaHashedIdStatsRequest$inboundSchema: z.ZodType<
  GetMediasMediaHashedIdStatsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  mediaHashedId: z.string(),
});

/** @internal */
export type GetMediasMediaHashedIdStatsRequest$Outbound = {
  mediaHashedId: string;
};

/** @internal */
export const GetMediasMediaHashedIdStatsRequest$outboundSchema: z.ZodType<
  GetMediasMediaHashedIdStatsRequest$Outbound,
  z.ZodTypeDef,
  GetMediasMediaHashedIdStatsRequest
> = z.object({
  mediaHashedId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetMediasMediaHashedIdStatsRequest$ {
  /** @deprecated use `GetMediasMediaHashedIdStatsRequest$inboundSchema` instead. */
  export const inboundSchema = GetMediasMediaHashedIdStatsRequest$inboundSchema;
  /** @deprecated use `GetMediasMediaHashedIdStatsRequest$outboundSchema` instead. */
  export const outboundSchema =
    GetMediasMediaHashedIdStatsRequest$outboundSchema;
  /** @deprecated use `GetMediasMediaHashedIdStatsRequest$Outbound` instead. */
  export type Outbound = GetMediasMediaHashedIdStatsRequest$Outbound;
}

export function getMediasMediaHashedIdStatsRequestToJSON(
  getMediasMediaHashedIdStatsRequest: GetMediasMediaHashedIdStatsRequest,
): string {
  return JSON.stringify(
    GetMediasMediaHashedIdStatsRequest$outboundSchema.parse(
      getMediasMediaHashedIdStatsRequest,
    ),
  );
}

export function getMediasMediaHashedIdStatsRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetMediasMediaHashedIdStatsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetMediasMediaHashedIdStatsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetMediasMediaHashedIdStatsRequest' from JSON`,
  );
}

/** @internal */
export const Stats$inboundSchema: z.ZodType<Stats, z.ZodTypeDef, unknown> = z
  .object({
    pageLoads: z.number().int().optional(),
    visitors: z.number().int().optional(),
    percentOfVisitorsClickingPlay: z.number().int().optional(),
    plays: z.number().int().optional(),
    averagePercentWatched: z.number().int().optional(),
  });

/** @internal */
export type Stats$Outbound = {
  pageLoads?: number | undefined;
  visitors?: number | undefined;
  percentOfVisitorsClickingPlay?: number | undefined;
  plays?: number | undefined;
  averagePercentWatched?: number | undefined;
};

/** @internal */
export const Stats$outboundSchema: z.ZodType<
  Stats$Outbound,
  z.ZodTypeDef,
  Stats
> = z.object({
  pageLoads: z.number().int().optional(),
  visitors: z.number().int().optional(),
  percentOfVisitorsClickingPlay: z.number().int().optional(),
  plays: z.number().int().optional(),
  averagePercentWatched: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Stats$ {
  /** @deprecated use `Stats$inboundSchema` instead. */
  export const inboundSchema = Stats$inboundSchema;
  /** @deprecated use `Stats$outboundSchema` instead. */
  export const outboundSchema = Stats$outboundSchema;
  /** @deprecated use `Stats$Outbound` instead. */
  export type Outbound = Stats$Outbound;
}

export function statsToJSON(stats: Stats): string {
  return JSON.stringify(Stats$outboundSchema.parse(stats));
}

export function statsFromJSON(
  jsonString: string,
): SafeParseResult<Stats, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Stats$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Stats' from JSON`,
  );
}

/** @internal */
export const GetMediasMediaHashedIdStatsResponse$inboundSchema: z.ZodType<
  GetMediasMediaHashedIdStatsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.number().int().optional(),
  hashed_id: z.string().optional(),
  name: z.string().optional(),
  stats: z.lazy(() => Stats$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "hashed_id": "hashedId",
  });
});

/** @internal */
export type GetMediasMediaHashedIdStatsResponse$Outbound = {
  id?: number | undefined;
  hashed_id?: string | undefined;
  name?: string | undefined;
  stats?: Stats$Outbound | undefined;
};

/** @internal */
export const GetMediasMediaHashedIdStatsResponse$outboundSchema: z.ZodType<
  GetMediasMediaHashedIdStatsResponse$Outbound,
  z.ZodTypeDef,
  GetMediasMediaHashedIdStatsResponse
> = z.object({
  id: z.number().int().optional(),
  hashedId: z.string().optional(),
  name: z.string().optional(),
  stats: z.lazy(() => Stats$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    hashedId: "hashed_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetMediasMediaHashedIdStatsResponse$ {
  /** @deprecated use `GetMediasMediaHashedIdStatsResponse$inboundSchema` instead. */
  export const inboundSchema =
    GetMediasMediaHashedIdStatsResponse$inboundSchema;
  /** @deprecated use `GetMediasMediaHashedIdStatsResponse$outboundSchema` instead. */
  export const outboundSchema =
    GetMediasMediaHashedIdStatsResponse$outboundSchema;
  /** @deprecated use `GetMediasMediaHashedIdStatsResponse$Outbound` instead. */
  export type Outbound = GetMediasMediaHashedIdStatsResponse$Outbound;
}

export function getMediasMediaHashedIdStatsResponseToJSON(
  getMediasMediaHashedIdStatsResponse: GetMediasMediaHashedIdStatsResponse,
): string {
  return JSON.stringify(
    GetMediasMediaHashedIdStatsResponse$outboundSchema.parse(
      getMediasMediaHashedIdStatsResponse,
    ),
  );
}

export function getMediasMediaHashedIdStatsResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetMediasMediaHashedIdStatsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetMediasMediaHashedIdStatsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetMediasMediaHashedIdStatsResponse' from JSON`,
  );
}
