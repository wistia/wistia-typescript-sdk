/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { blobLikeSchema } from "../../types/blobs.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const PutMediasMediaHashedIdCaptionsLanguageCodeMultipartServerList = [
  "https://api.wistia.com/v1",
] as const;

export type PutMediasMediaHashedIdCaptionsLanguageCodeMultipartCaptionFile = {
  fileName: string;
  content: ReadableStream<Uint8Array> | Blob | ArrayBuffer | Uint8Array;
};

export type PutMediasMediaHashedIdCaptionsLanguageCodeMultipartRequestBody = {
  /**
   * Either an attached SRT file or a string parameter with the contents of an SRT file.
   */
  captionFile:
    | PutMediasMediaHashedIdCaptionsLanguageCodeMultipartCaptionFile
    | Blob;
};

export type PutMediasMediaHashedIdCaptionsLanguageCodeMultipartRequest = {
  /**
   * Unique identifier for the video.
   */
  mediaHashedId: string;
  /**
   * Language code conforming to ISO-639-2 for which the captions should be updated.
   */
  languageCode: string;
  requestBody: PutMediasMediaHashedIdCaptionsLanguageCodeMultipartRequestBody;
};

/** @internal */
export const PutMediasMediaHashedIdCaptionsLanguageCodeMultipartCaptionFile$inboundSchema:
  z.ZodType<
    PutMediasMediaHashedIdCaptionsLanguageCodeMultipartCaptionFile,
    z.ZodTypeDef,
    unknown
  > = z.object({
    fileName: z.string(),
    content: z.union([
      z.instanceof(ReadableStream<Uint8Array>),
      z.instanceof(Blob),
      z.instanceof(ArrayBuffer),
      z.instanceof(Uint8Array),
    ]),
  });

/** @internal */
export type PutMediasMediaHashedIdCaptionsLanguageCodeMultipartCaptionFile$Outbound =
  {
    fileName: string;
    content: ReadableStream<Uint8Array> | Blob | ArrayBuffer | Uint8Array;
  };

/** @internal */
export const PutMediasMediaHashedIdCaptionsLanguageCodeMultipartCaptionFile$outboundSchema:
  z.ZodType<
    PutMediasMediaHashedIdCaptionsLanguageCodeMultipartCaptionFile$Outbound,
    z.ZodTypeDef,
    PutMediasMediaHashedIdCaptionsLanguageCodeMultipartCaptionFile
  > = z.object({
    fileName: z.string(),
    content: z.union([
      z.instanceof(ReadableStream<Uint8Array>),
      z.instanceof(Blob),
      z.instanceof(ArrayBuffer),
      z.instanceof(Uint8Array),
    ]),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutMediasMediaHashedIdCaptionsLanguageCodeMultipartCaptionFile$ {
  /** @deprecated use `PutMediasMediaHashedIdCaptionsLanguageCodeMultipartCaptionFile$inboundSchema` instead. */
  export const inboundSchema =
    PutMediasMediaHashedIdCaptionsLanguageCodeMultipartCaptionFile$inboundSchema;
  /** @deprecated use `PutMediasMediaHashedIdCaptionsLanguageCodeMultipartCaptionFile$outboundSchema` instead. */
  export const outboundSchema =
    PutMediasMediaHashedIdCaptionsLanguageCodeMultipartCaptionFile$outboundSchema;
  /** @deprecated use `PutMediasMediaHashedIdCaptionsLanguageCodeMultipartCaptionFile$Outbound` instead. */
  export type Outbound =
    PutMediasMediaHashedIdCaptionsLanguageCodeMultipartCaptionFile$Outbound;
}

export function putMediasMediaHashedIdCaptionsLanguageCodeMultipartCaptionFileToJSON(
  putMediasMediaHashedIdCaptionsLanguageCodeMultipartCaptionFile:
    PutMediasMediaHashedIdCaptionsLanguageCodeMultipartCaptionFile,
): string {
  return JSON.stringify(
    PutMediasMediaHashedIdCaptionsLanguageCodeMultipartCaptionFile$outboundSchema
      .parse(putMediasMediaHashedIdCaptionsLanguageCodeMultipartCaptionFile),
  );
}

export function putMediasMediaHashedIdCaptionsLanguageCodeMultipartCaptionFileFromJSON(
  jsonString: string,
): SafeParseResult<
  PutMediasMediaHashedIdCaptionsLanguageCodeMultipartCaptionFile,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutMediasMediaHashedIdCaptionsLanguageCodeMultipartCaptionFile$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'PutMediasMediaHashedIdCaptionsLanguageCodeMultipartCaptionFile' from JSON`,
  );
}

/** @internal */
export const PutMediasMediaHashedIdCaptionsLanguageCodeMultipartRequestBody$inboundSchema:
  z.ZodType<
    PutMediasMediaHashedIdCaptionsLanguageCodeMultipartRequestBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    caption_file: z.lazy(() =>
      PutMediasMediaHashedIdCaptionsLanguageCodeMultipartCaptionFile$inboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      "caption_file": "captionFile",
    });
  });

/** @internal */
export type PutMediasMediaHashedIdCaptionsLanguageCodeMultipartRequestBody$Outbound =
  {
    caption_file:
      | PutMediasMediaHashedIdCaptionsLanguageCodeMultipartCaptionFile$Outbound
      | Blob;
  };

/** @internal */
export const PutMediasMediaHashedIdCaptionsLanguageCodeMultipartRequestBody$outboundSchema:
  z.ZodType<
    PutMediasMediaHashedIdCaptionsLanguageCodeMultipartRequestBody$Outbound,
    z.ZodTypeDef,
    PutMediasMediaHashedIdCaptionsLanguageCodeMultipartRequestBody
  > = z.object({
    captionFile: z.lazy(() =>
      PutMediasMediaHashedIdCaptionsLanguageCodeMultipartCaptionFile$outboundSchema
    ).or(blobLikeSchema),
  }).transform((v) => {
    return remap$(v, {
      captionFile: "caption_file",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutMediasMediaHashedIdCaptionsLanguageCodeMultipartRequestBody$ {
  /** @deprecated use `PutMediasMediaHashedIdCaptionsLanguageCodeMultipartRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    PutMediasMediaHashedIdCaptionsLanguageCodeMultipartRequestBody$inboundSchema;
  /** @deprecated use `PutMediasMediaHashedIdCaptionsLanguageCodeMultipartRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    PutMediasMediaHashedIdCaptionsLanguageCodeMultipartRequestBody$outboundSchema;
  /** @deprecated use `PutMediasMediaHashedIdCaptionsLanguageCodeMultipartRequestBody$Outbound` instead. */
  export type Outbound =
    PutMediasMediaHashedIdCaptionsLanguageCodeMultipartRequestBody$Outbound;
}

export function putMediasMediaHashedIdCaptionsLanguageCodeMultipartRequestBodyToJSON(
  putMediasMediaHashedIdCaptionsLanguageCodeMultipartRequestBody:
    PutMediasMediaHashedIdCaptionsLanguageCodeMultipartRequestBody,
): string {
  return JSON.stringify(
    PutMediasMediaHashedIdCaptionsLanguageCodeMultipartRequestBody$outboundSchema
      .parse(putMediasMediaHashedIdCaptionsLanguageCodeMultipartRequestBody),
  );
}

export function putMediasMediaHashedIdCaptionsLanguageCodeMultipartRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  PutMediasMediaHashedIdCaptionsLanguageCodeMultipartRequestBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutMediasMediaHashedIdCaptionsLanguageCodeMultipartRequestBody$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'PutMediasMediaHashedIdCaptionsLanguageCodeMultipartRequestBody' from JSON`,
  );
}

/** @internal */
export const PutMediasMediaHashedIdCaptionsLanguageCodeMultipartRequest$inboundSchema:
  z.ZodType<
    PutMediasMediaHashedIdCaptionsLanguageCodeMultipartRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    "media-hashed-id": z.string(),
    "language-code": z.string(),
    RequestBody: z.lazy(() =>
      PutMediasMediaHashedIdCaptionsLanguageCodeMultipartRequestBody$inboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      "media-hashed-id": "mediaHashedId",
      "language-code": "languageCode",
      "RequestBody": "requestBody",
    });
  });

/** @internal */
export type PutMediasMediaHashedIdCaptionsLanguageCodeMultipartRequest$Outbound =
  {
    "media-hashed-id": string;
    "language-code": string;
    RequestBody:
      PutMediasMediaHashedIdCaptionsLanguageCodeMultipartRequestBody$Outbound;
  };

/** @internal */
export const PutMediasMediaHashedIdCaptionsLanguageCodeMultipartRequest$outboundSchema:
  z.ZodType<
    PutMediasMediaHashedIdCaptionsLanguageCodeMultipartRequest$Outbound,
    z.ZodTypeDef,
    PutMediasMediaHashedIdCaptionsLanguageCodeMultipartRequest
  > = z.object({
    mediaHashedId: z.string(),
    languageCode: z.string(),
    requestBody: z.lazy(() =>
      PutMediasMediaHashedIdCaptionsLanguageCodeMultipartRequestBody$outboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      mediaHashedId: "media-hashed-id",
      languageCode: "language-code",
      requestBody: "RequestBody",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutMediasMediaHashedIdCaptionsLanguageCodeMultipartRequest$ {
  /** @deprecated use `PutMediasMediaHashedIdCaptionsLanguageCodeMultipartRequest$inboundSchema` instead. */
  export const inboundSchema =
    PutMediasMediaHashedIdCaptionsLanguageCodeMultipartRequest$inboundSchema;
  /** @deprecated use `PutMediasMediaHashedIdCaptionsLanguageCodeMultipartRequest$outboundSchema` instead. */
  export const outboundSchema =
    PutMediasMediaHashedIdCaptionsLanguageCodeMultipartRequest$outboundSchema;
  /** @deprecated use `PutMediasMediaHashedIdCaptionsLanguageCodeMultipartRequest$Outbound` instead. */
  export type Outbound =
    PutMediasMediaHashedIdCaptionsLanguageCodeMultipartRequest$Outbound;
}

export function putMediasMediaHashedIdCaptionsLanguageCodeMultipartRequestToJSON(
  putMediasMediaHashedIdCaptionsLanguageCodeMultipartRequest:
    PutMediasMediaHashedIdCaptionsLanguageCodeMultipartRequest,
): string {
  return JSON.stringify(
    PutMediasMediaHashedIdCaptionsLanguageCodeMultipartRequest$outboundSchema
      .parse(putMediasMediaHashedIdCaptionsLanguageCodeMultipartRequest),
  );
}

export function putMediasMediaHashedIdCaptionsLanguageCodeMultipartRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  PutMediasMediaHashedIdCaptionsLanguageCodeMultipartRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutMediasMediaHashedIdCaptionsLanguageCodeMultipartRequest$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'PutMediasMediaHashedIdCaptionsLanguageCodeMultipartRequest' from JSON`,
  );
}
