/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetProjectsProjectIdSharingsSharingIdRequest = {
  /**
   * Hashed ID for the project for which you'd like to see sharings.
   */
  projectId: string;
  /**
   * The ID of the specific sharing object that you want to see.
   */
  sharingId: number;
};

/** @internal */
export const GetProjectsProjectIdSharingsSharingIdRequest$inboundSchema:
  z.ZodType<
    GetProjectsProjectIdSharingsSharingIdRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    "project-id": z.string(),
    "sharing-id": z.number().int(),
  }).transform((v) => {
    return remap$(v, {
      "project-id": "projectId",
      "sharing-id": "sharingId",
    });
  });

/** @internal */
export type GetProjectsProjectIdSharingsSharingIdRequest$Outbound = {
  "project-id": string;
  "sharing-id": number;
};

/** @internal */
export const GetProjectsProjectIdSharingsSharingIdRequest$outboundSchema:
  z.ZodType<
    GetProjectsProjectIdSharingsSharingIdRequest$Outbound,
    z.ZodTypeDef,
    GetProjectsProjectIdSharingsSharingIdRequest
  > = z.object({
    projectId: z.string(),
    sharingId: z.number().int(),
  }).transform((v) => {
    return remap$(v, {
      projectId: "project-id",
      sharingId: "sharing-id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetProjectsProjectIdSharingsSharingIdRequest$ {
  /** @deprecated use `GetProjectsProjectIdSharingsSharingIdRequest$inboundSchema` instead. */
  export const inboundSchema =
    GetProjectsProjectIdSharingsSharingIdRequest$inboundSchema;
  /** @deprecated use `GetProjectsProjectIdSharingsSharingIdRequest$outboundSchema` instead. */
  export const outboundSchema =
    GetProjectsProjectIdSharingsSharingIdRequest$outboundSchema;
  /** @deprecated use `GetProjectsProjectIdSharingsSharingIdRequest$Outbound` instead. */
  export type Outbound = GetProjectsProjectIdSharingsSharingIdRequest$Outbound;
}

export function getProjectsProjectIdSharingsSharingIdRequestToJSON(
  getProjectsProjectIdSharingsSharingIdRequest:
    GetProjectsProjectIdSharingsSharingIdRequest,
): string {
  return JSON.stringify(
    GetProjectsProjectIdSharingsSharingIdRequest$outboundSchema.parse(
      getProjectsProjectIdSharingsSharingIdRequest,
    ),
  );
}

export function getProjectsProjectIdSharingsSharingIdRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  GetProjectsProjectIdSharingsSharingIdRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetProjectsProjectIdSharingsSharingIdRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetProjectsProjectIdSharingsSharingIdRequest' from JSON`,
  );
}
