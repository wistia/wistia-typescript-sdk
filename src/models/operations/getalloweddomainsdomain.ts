/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const GetAllowedDomainsDomainServerList = [
  "https://api.wistia.com/v1",
] as const;

export type GetAllowedDomainsDomainRequest = {
  /**
   * The domain name to retrieve
   */
  domain: string;
};

/** @internal */
export const GetAllowedDomainsDomainRequest$inboundSchema: z.ZodType<
  GetAllowedDomainsDomainRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  domain: z.string(),
});

/** @internal */
export type GetAllowedDomainsDomainRequest$Outbound = {
  domain: string;
};

/** @internal */
export const GetAllowedDomainsDomainRequest$outboundSchema: z.ZodType<
  GetAllowedDomainsDomainRequest$Outbound,
  z.ZodTypeDef,
  GetAllowedDomainsDomainRequest
> = z.object({
  domain: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllowedDomainsDomainRequest$ {
  /** @deprecated use `GetAllowedDomainsDomainRequest$inboundSchema` instead. */
  export const inboundSchema = GetAllowedDomainsDomainRequest$inboundSchema;
  /** @deprecated use `GetAllowedDomainsDomainRequest$outboundSchema` instead. */
  export const outboundSchema = GetAllowedDomainsDomainRequest$outboundSchema;
  /** @deprecated use `GetAllowedDomainsDomainRequest$Outbound` instead. */
  export type Outbound = GetAllowedDomainsDomainRequest$Outbound;
}

export function getAllowedDomainsDomainRequestToJSON(
  getAllowedDomainsDomainRequest: GetAllowedDomainsDomainRequest,
): string {
  return JSON.stringify(
    GetAllowedDomainsDomainRequest$outboundSchema.parse(
      getAllowedDomainsDomainRequest,
    ),
  );
}

export function getAllowedDomainsDomainRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetAllowedDomainsDomainRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllowedDomainsDomainRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllowedDomainsDomainRequest' from JSON`,
  );
}
