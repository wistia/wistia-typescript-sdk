/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { RFCDate } from "../../types/rfcdate.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const GetStatsEventsServerList = [
  "https://api.wistia.com/v1",
] as const;

export type GetStatsEventsRequest = {
  /**
   * An optional identifier for a specific video.
   */
  mediaId?: string | undefined;
  /**
   * An optional identifier for a specific visitor.
   */
  visitorKey?: string | undefined;
  /**
   * Maximum number of events to retrieve (capped at 100).
   */
  perPage?: number | undefined;
  /**
   * The page of events to get data from.
   */
  page?: number | undefined;
  /**
   * Start date in the format 'YYYY-MM-DD'.
   */
  startDate?: RFCDate | undefined;
  /**
   * End date in the format 'YYYY-MM-DD'.
   */
  endDate?: RFCDate | undefined;
};

/** @internal */
export const GetStatsEventsRequest$inboundSchema: z.ZodType<
  GetStatsEventsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  media_id: z.string().optional(),
  visitor_key: z.string().optional(),
  per_page: z.number().int().optional(),
  page: z.number().int().optional(),
  start_date: z.string().transform(v => new RFCDate(v)).optional(),
  end_date: z.string().transform(v => new RFCDate(v)).optional(),
}).transform((v) => {
  return remap$(v, {
    "media_id": "mediaId",
    "visitor_key": "visitorKey",
    "per_page": "perPage",
    "start_date": "startDate",
    "end_date": "endDate",
  });
});

/** @internal */
export type GetStatsEventsRequest$Outbound = {
  media_id?: string | undefined;
  visitor_key?: string | undefined;
  per_page?: number | undefined;
  page?: number | undefined;
  start_date?: string | undefined;
  end_date?: string | undefined;
};

/** @internal */
export const GetStatsEventsRequest$outboundSchema: z.ZodType<
  GetStatsEventsRequest$Outbound,
  z.ZodTypeDef,
  GetStatsEventsRequest
> = z.object({
  mediaId: z.string().optional(),
  visitorKey: z.string().optional(),
  perPage: z.number().int().optional(),
  page: z.number().int().optional(),
  startDate: z.instanceof(RFCDate).transform(v => v.toString()).optional(),
  endDate: z.instanceof(RFCDate).transform(v => v.toString()).optional(),
}).transform((v) => {
  return remap$(v, {
    mediaId: "media_id",
    visitorKey: "visitor_key",
    perPage: "per_page",
    startDate: "start_date",
    endDate: "end_date",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetStatsEventsRequest$ {
  /** @deprecated use `GetStatsEventsRequest$inboundSchema` instead. */
  export const inboundSchema = GetStatsEventsRequest$inboundSchema;
  /** @deprecated use `GetStatsEventsRequest$outboundSchema` instead. */
  export const outboundSchema = GetStatsEventsRequest$outboundSchema;
  /** @deprecated use `GetStatsEventsRequest$Outbound` instead. */
  export type Outbound = GetStatsEventsRequest$Outbound;
}

export function getStatsEventsRequestToJSON(
  getStatsEventsRequest: GetStatsEventsRequest,
): string {
  return JSON.stringify(
    GetStatsEventsRequest$outboundSchema.parse(getStatsEventsRequest),
  );
}

export function getStatsEventsRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetStatsEventsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetStatsEventsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetStatsEventsRequest' from JSON`,
  );
}
