/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const DeleteAllowedDomainsDomainServerList = [
  "https://api.wistia.com/v1",
] as const;

export type DeleteAllowedDomainsDomainRequest = {
  /**
   * The domain name to delete
   */
  domain: string;
};

/** @internal */
export const DeleteAllowedDomainsDomainRequest$inboundSchema: z.ZodType<
  DeleteAllowedDomainsDomainRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  domain: z.string(),
});

/** @internal */
export type DeleteAllowedDomainsDomainRequest$Outbound = {
  domain: string;
};

/** @internal */
export const DeleteAllowedDomainsDomainRequest$outboundSchema: z.ZodType<
  DeleteAllowedDomainsDomainRequest$Outbound,
  z.ZodTypeDef,
  DeleteAllowedDomainsDomainRequest
> = z.object({
  domain: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteAllowedDomainsDomainRequest$ {
  /** @deprecated use `DeleteAllowedDomainsDomainRequest$inboundSchema` instead. */
  export const inboundSchema = DeleteAllowedDomainsDomainRequest$inboundSchema;
  /** @deprecated use `DeleteAllowedDomainsDomainRequest$outboundSchema` instead. */
  export const outboundSchema =
    DeleteAllowedDomainsDomainRequest$outboundSchema;
  /** @deprecated use `DeleteAllowedDomainsDomainRequest$Outbound` instead. */
  export type Outbound = DeleteAllowedDomainsDomainRequest$Outbound;
}

export function deleteAllowedDomainsDomainRequestToJSON(
  deleteAllowedDomainsDomainRequest: DeleteAllowedDomainsDomainRequest,
): string {
  return JSON.stringify(
    DeleteAllowedDomainsDomainRequest$outboundSchema.parse(
      deleteAllowedDomainsDomainRequest,
    ),
  );
}

export function deleteAllowedDomainsDomainRequestFromJSON(
  jsonString: string,
): SafeParseResult<DeleteAllowedDomainsDomainRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteAllowedDomainsDomainRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteAllowedDomainsDomainRequest' from JSON`,
  );
}
