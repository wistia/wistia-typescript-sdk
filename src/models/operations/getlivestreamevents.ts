/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Field to sort by
 */
export const GetLiveStreamEventsSortBy = {
  ScheduledFor: "scheduled_for",
  Id: "id",
} as const;
/**
 * Field to sort by
 */
export type GetLiveStreamEventsSortBy = ClosedEnum<
  typeof GetLiveStreamEventsSortBy
>;

/**
 * Sort direction (1 for ascending, -1 for descending)
 */
export const GetLiveStreamEventsSortDirection = {
  One: "1",
  Minus1: "-1",
} as const;
/**
 * Sort direction (1 for ascending, -1 for descending)
 */
export type GetLiveStreamEventsSortDirection = ClosedEnum<
  typeof GetLiveStreamEventsSortDirection
>;

export type GetLiveStreamEventsRequest = {
  /**
   * Page number to retrieve
   */
  page?: number | undefined;
  /**
   * Number of events per page (maximum 100)
   */
  perPage?: number | undefined;
  /**
   * Field to sort by
   */
  sortBy?: GetLiveStreamEventsSortBy | undefined;
  /**
   * Sort direction (1 for ascending, -1 for descending)
   */
  sortDirection?: GetLiveStreamEventsSortDirection | undefined;
  /**
   * Filter by specific event IDs
   */
  hashedIds?: Array<string> | undefined;
};

/** @internal */
export const GetLiveStreamEventsSortBy$inboundSchema: z.ZodNativeEnum<
  typeof GetLiveStreamEventsSortBy
> = z.nativeEnum(GetLiveStreamEventsSortBy);

/** @internal */
export const GetLiveStreamEventsSortBy$outboundSchema: z.ZodNativeEnum<
  typeof GetLiveStreamEventsSortBy
> = GetLiveStreamEventsSortBy$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetLiveStreamEventsSortBy$ {
  /** @deprecated use `GetLiveStreamEventsSortBy$inboundSchema` instead. */
  export const inboundSchema = GetLiveStreamEventsSortBy$inboundSchema;
  /** @deprecated use `GetLiveStreamEventsSortBy$outboundSchema` instead. */
  export const outboundSchema = GetLiveStreamEventsSortBy$outboundSchema;
}

/** @internal */
export const GetLiveStreamEventsSortDirection$inboundSchema: z.ZodNativeEnum<
  typeof GetLiveStreamEventsSortDirection
> = z.nativeEnum(GetLiveStreamEventsSortDirection);

/** @internal */
export const GetLiveStreamEventsSortDirection$outboundSchema: z.ZodNativeEnum<
  typeof GetLiveStreamEventsSortDirection
> = GetLiveStreamEventsSortDirection$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetLiveStreamEventsSortDirection$ {
  /** @deprecated use `GetLiveStreamEventsSortDirection$inboundSchema` instead. */
  export const inboundSchema = GetLiveStreamEventsSortDirection$inboundSchema;
  /** @deprecated use `GetLiveStreamEventsSortDirection$outboundSchema` instead. */
  export const outboundSchema = GetLiveStreamEventsSortDirection$outboundSchema;
}

/** @internal */
export const GetLiveStreamEventsRequest$inboundSchema: z.ZodType<
  GetLiveStreamEventsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  page: z.number().int().optional(),
  per_page: z.number().int().optional(),
  sort_by: GetLiveStreamEventsSortBy$inboundSchema.optional(),
  sort_direction: GetLiveStreamEventsSortDirection$inboundSchema.optional(),
  hashed_ids: z.array(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "per_page": "perPage",
    "sort_by": "sortBy",
    "sort_direction": "sortDirection",
    "hashed_ids": "hashedIds",
  });
});

/** @internal */
export type GetLiveStreamEventsRequest$Outbound = {
  page?: number | undefined;
  per_page?: number | undefined;
  sort_by?: string | undefined;
  sort_direction?: string | undefined;
  hashed_ids?: Array<string> | undefined;
};

/** @internal */
export const GetLiveStreamEventsRequest$outboundSchema: z.ZodType<
  GetLiveStreamEventsRequest$Outbound,
  z.ZodTypeDef,
  GetLiveStreamEventsRequest
> = z.object({
  page: z.number().int().optional(),
  perPage: z.number().int().optional(),
  sortBy: GetLiveStreamEventsSortBy$outboundSchema.optional(),
  sortDirection: GetLiveStreamEventsSortDirection$outboundSchema.optional(),
  hashedIds: z.array(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    perPage: "per_page",
    sortBy: "sort_by",
    sortDirection: "sort_direction",
    hashedIds: "hashed_ids",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetLiveStreamEventsRequest$ {
  /** @deprecated use `GetLiveStreamEventsRequest$inboundSchema` instead. */
  export const inboundSchema = GetLiveStreamEventsRequest$inboundSchema;
  /** @deprecated use `GetLiveStreamEventsRequest$outboundSchema` instead. */
  export const outboundSchema = GetLiveStreamEventsRequest$outboundSchema;
  /** @deprecated use `GetLiveStreamEventsRequest$Outbound` instead. */
  export type Outbound = GetLiveStreamEventsRequest$Outbound;
}

export function getLiveStreamEventsRequestToJSON(
  getLiveStreamEventsRequest: GetLiveStreamEventsRequest,
): string {
  return JSON.stringify(
    GetLiveStreamEventsRequest$outboundSchema.parse(getLiveStreamEventsRequest),
  );
}

export function getLiveStreamEventsRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetLiveStreamEventsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetLiveStreamEventsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetLiveStreamEventsRequest' from JSON`,
  );
}
