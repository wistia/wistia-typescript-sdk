/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type PostProjectsProjectIdSubfoldersRequest = {
  /**
   * The hashed ID of the project
   */
  projectId: string;
  /**
   * Subfolder data
   */
  subfolderInput: models.SubfolderInput;
};

/** @internal */
export const PostProjectsProjectIdSubfoldersRequest$inboundSchema: z.ZodType<
  PostProjectsProjectIdSubfoldersRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "project-id": z.string(),
  SubfolderInput: models.SubfolderInput$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "project-id": "projectId",
    "SubfolderInput": "subfolderInput",
  });
});

/** @internal */
export type PostProjectsProjectIdSubfoldersRequest$Outbound = {
  "project-id": string;
  SubfolderInput: models.SubfolderInput$Outbound;
};

/** @internal */
export const PostProjectsProjectIdSubfoldersRequest$outboundSchema: z.ZodType<
  PostProjectsProjectIdSubfoldersRequest$Outbound,
  z.ZodTypeDef,
  PostProjectsProjectIdSubfoldersRequest
> = z.object({
  projectId: z.string(),
  subfolderInput: models.SubfolderInput$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    projectId: "project-id",
    subfolderInput: "SubfolderInput",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostProjectsProjectIdSubfoldersRequest$ {
  /** @deprecated use `PostProjectsProjectIdSubfoldersRequest$inboundSchema` instead. */
  export const inboundSchema =
    PostProjectsProjectIdSubfoldersRequest$inboundSchema;
  /** @deprecated use `PostProjectsProjectIdSubfoldersRequest$outboundSchema` instead. */
  export const outboundSchema =
    PostProjectsProjectIdSubfoldersRequest$outboundSchema;
  /** @deprecated use `PostProjectsProjectIdSubfoldersRequest$Outbound` instead. */
  export type Outbound = PostProjectsProjectIdSubfoldersRequest$Outbound;
}

export function postProjectsProjectIdSubfoldersRequestToJSON(
  postProjectsProjectIdSubfoldersRequest:
    PostProjectsProjectIdSubfoldersRequest,
): string {
  return JSON.stringify(
    PostProjectsProjectIdSubfoldersRequest$outboundSchema.parse(
      postProjectsProjectIdSubfoldersRequest,
    ),
  );
}

export function postProjectsProjectIdSubfoldersRequestFromJSON(
  jsonString: string,
): SafeParseResult<PostProjectsProjectIdSubfoldersRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      PostProjectsProjectIdSubfoldersRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostProjectsProjectIdSubfoldersRequest' from JSON`,
  );
}
