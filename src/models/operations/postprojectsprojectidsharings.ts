/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export const PostProjectsProjectIdSharingsServerList = [
  "https://api.wistia.com/v1",
] as const;

export type PostProjectsProjectIdSharingsRequest = {
  /**
   * Hashed ID of the project to be shared
   */
  projectId: string;
  createProjectSharing: models.CreateProjectSharing;
};

export type PostProjectsProjectIdSharingsResponse = {
  headers: { [k: string]: Array<string> };
  result: models.ProjectSharingResponse;
};

/** @internal */
export const PostProjectsProjectIdSharingsRequest$inboundSchema: z.ZodType<
  PostProjectsProjectIdSharingsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "project-id": z.string(),
  CreateProjectSharing: models.CreateProjectSharing$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "project-id": "projectId",
    "CreateProjectSharing": "createProjectSharing",
  });
});

/** @internal */
export type PostProjectsProjectIdSharingsRequest$Outbound = {
  "project-id": string;
  CreateProjectSharing: models.CreateProjectSharing$Outbound;
};

/** @internal */
export const PostProjectsProjectIdSharingsRequest$outboundSchema: z.ZodType<
  PostProjectsProjectIdSharingsRequest$Outbound,
  z.ZodTypeDef,
  PostProjectsProjectIdSharingsRequest
> = z.object({
  projectId: z.string(),
  createProjectSharing: models.CreateProjectSharing$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    projectId: "project-id",
    createProjectSharing: "CreateProjectSharing",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostProjectsProjectIdSharingsRequest$ {
  /** @deprecated use `PostProjectsProjectIdSharingsRequest$inboundSchema` instead. */
  export const inboundSchema =
    PostProjectsProjectIdSharingsRequest$inboundSchema;
  /** @deprecated use `PostProjectsProjectIdSharingsRequest$outboundSchema` instead. */
  export const outboundSchema =
    PostProjectsProjectIdSharingsRequest$outboundSchema;
  /** @deprecated use `PostProjectsProjectIdSharingsRequest$Outbound` instead. */
  export type Outbound = PostProjectsProjectIdSharingsRequest$Outbound;
}

export function postProjectsProjectIdSharingsRequestToJSON(
  postProjectsProjectIdSharingsRequest: PostProjectsProjectIdSharingsRequest,
): string {
  return JSON.stringify(
    PostProjectsProjectIdSharingsRequest$outboundSchema.parse(
      postProjectsProjectIdSharingsRequest,
    ),
  );
}

export function postProjectsProjectIdSharingsRequestFromJSON(
  jsonString: string,
): SafeParseResult<PostProjectsProjectIdSharingsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      PostProjectsProjectIdSharingsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostProjectsProjectIdSharingsRequest' from JSON`,
  );
}

/** @internal */
export const PostProjectsProjectIdSharingsResponse$inboundSchema: z.ZodType<
  PostProjectsProjectIdSharingsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
  Result: models.ProjectSharingResponse$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type PostProjectsProjectIdSharingsResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: models.ProjectSharingResponse$Outbound;
};

/** @internal */
export const PostProjectsProjectIdSharingsResponse$outboundSchema: z.ZodType<
  PostProjectsProjectIdSharingsResponse$Outbound,
  z.ZodTypeDef,
  PostProjectsProjectIdSharingsResponse
> = z.object({
  headers: z.record(z.array(z.string())),
  result: models.ProjectSharingResponse$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostProjectsProjectIdSharingsResponse$ {
  /** @deprecated use `PostProjectsProjectIdSharingsResponse$inboundSchema` instead. */
  export const inboundSchema =
    PostProjectsProjectIdSharingsResponse$inboundSchema;
  /** @deprecated use `PostProjectsProjectIdSharingsResponse$outboundSchema` instead. */
  export const outboundSchema =
    PostProjectsProjectIdSharingsResponse$outboundSchema;
  /** @deprecated use `PostProjectsProjectIdSharingsResponse$Outbound` instead. */
  export type Outbound = PostProjectsProjectIdSharingsResponse$Outbound;
}

export function postProjectsProjectIdSharingsResponseToJSON(
  postProjectsProjectIdSharingsResponse: PostProjectsProjectIdSharingsResponse,
): string {
  return JSON.stringify(
    PostProjectsProjectIdSharingsResponse$outboundSchema.parse(
      postProjectsProjectIdSharingsResponse,
    ),
  );
}

export function postProjectsProjectIdSharingsResponseFromJSON(
  jsonString: string,
): SafeParseResult<PostProjectsProjectIdSharingsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      PostProjectsProjectIdSharingsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostProjectsProjectIdSharingsResponse' from JSON`,
  );
}
