/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type HashedId = string | Array<string>;

/** @internal */
export const HashedId$inboundSchema: z.ZodType<
  HashedId,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.array(z.string())]);

/** @internal */
export type HashedId$Outbound = string | Array<string>;

/** @internal */
export const HashedId$outboundSchema: z.ZodType<
  HashedId$Outbound,
  z.ZodTypeDef,
  HashedId
> = z.union([z.string(), z.array(z.string())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HashedId$ {
  /** @deprecated use `HashedId$inboundSchema` instead. */
  export const inboundSchema = HashedId$inboundSchema;
  /** @deprecated use `HashedId$outboundSchema` instead. */
  export const outboundSchema = HashedId$outboundSchema;
  /** @deprecated use `HashedId$Outbound` instead. */
  export type Outbound = HashedId$Outbound;
}

export function hashedIdToJSON(hashedId: HashedId): string {
  return JSON.stringify(HashedId$outboundSchema.parse(hashedId));
}

export function hashedIdFromJSON(
  jsonString: string,
): SafeParseResult<HashedId, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HashedId$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HashedId' from JSON`,
  );
}
