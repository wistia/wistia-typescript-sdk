/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type Trims = {
  /**
   * An array of strings matching the format of HH:MM:SS.mmm-HH:MM:SS.mmm where HH is hours, MM is minutes, SS is seconds and mmm is milliseconds. The ranges should contain the earliest point of the trim first and the later point of the trim second.
   */
  trims?: Array<string> | undefined;
};

/** @internal */
export const Trims$inboundSchema: z.ZodType<Trims, z.ZodTypeDef, unknown> = z
  .object({
    trims: z.array(z.string()).optional(),
  });

/** @internal */
export type Trims$Outbound = {
  trims?: Array<string> | undefined;
};

/** @internal */
export const Trims$outboundSchema: z.ZodType<
  Trims$Outbound,
  z.ZodTypeDef,
  Trims
> = z.object({
  trims: z.array(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Trims$ {
  /** @deprecated use `Trims$inboundSchema` instead. */
  export const inboundSchema = Trims$inboundSchema;
  /** @deprecated use `Trims$outboundSchema` instead. */
  export const outboundSchema = Trims$outboundSchema;
  /** @deprecated use `Trims$Outbound` instead. */
  export type Outbound = Trims$Outbound;
}

export function trimsToJSON(trims: Trims): string {
  return JSON.stringify(Trims$outboundSchema.parse(trims));
}

export function trimsFromJSON(
  jsonString: string,
): SafeParseResult<Trims, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Trims$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Trims' from JSON`,
  );
}
