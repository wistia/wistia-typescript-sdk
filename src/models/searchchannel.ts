/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type SearchChannel = {
  /**
   * A unique numeric identifier for the channel within the system.
   */
  id: number;
  /**
   * A unique alphanumeric identifier for this channel.
   */
  hashedId: string;
  /**
   * The display name for the channel.
   */
  name: string;
  /**
   * The channel's description.
   */
  description: string;
  /**
   * The number of medias in the channel.
   */
  mediaCount: number;
  /**
   * The date when the channel was originally created.
   */
  created: Date;
  /**
   * The date when the channel was last updated.
   */
  updated: Date;
};

/** @internal */
export const SearchChannel$inboundSchema: z.ZodType<
  SearchChannel,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.number().int(),
  hashedId: z.string(),
  name: z.string(),
  description: z.string(),
  mediaCount: z.number().int(),
  created: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  updated: z.string().datetime({ offset: true }).transform(v => new Date(v)),
});

/** @internal */
export type SearchChannel$Outbound = {
  id: number;
  hashedId: string;
  name: string;
  description: string;
  mediaCount: number;
  created: string;
  updated: string;
};

/** @internal */
export const SearchChannel$outboundSchema: z.ZodType<
  SearchChannel$Outbound,
  z.ZodTypeDef,
  SearchChannel
> = z.object({
  id: z.number().int(),
  hashedId: z.string(),
  name: z.string(),
  description: z.string(),
  mediaCount: z.number().int(),
  created: z.date().transform(v => v.toISOString()),
  updated: z.date().transform(v => v.toISOString()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchChannel$ {
  /** @deprecated use `SearchChannel$inboundSchema` instead. */
  export const inboundSchema = SearchChannel$inboundSchema;
  /** @deprecated use `SearchChannel$outboundSchema` instead. */
  export const outboundSchema = SearchChannel$outboundSchema;
  /** @deprecated use `SearchChannel$Outbound` instead. */
  export type Outbound = SearchChannel$Outbound;
}

export function searchChannelToJSON(searchChannel: SearchChannel): string {
  return JSON.stringify(SearchChannel$outboundSchema.parse(searchChannel));
}

export function searchChannelFromJSON(
  jsonString: string,
): SafeParseResult<SearchChannel, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SearchChannel$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SearchChannel' from JSON`,
  );
}
