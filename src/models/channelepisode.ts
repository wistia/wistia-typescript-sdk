/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type ChannelEpisodeChannels = {
  /**
   * A unique alphanumeric identifier for the channel episode's channel.
   */
  channelHashedId: string;
  /**
   * The date when the channel episode was originally created.
   */
  created: Date;
  /**
   * The channel episode's description or episode notes.
   */
  description: string;
  /**
   * A short summary of the episode that is displayed when space is limited.
   */
  summary: string;
  /**
   * A unique alphanumeric identifier for the channel episode.
   */
  hashedId: string;
  /**
   * A unique alphanumeric identifier for the channel episode's media.
   */
  mediaHashedId: string;
  /**
   * Whether the channel episode has been published or is still in draft form.
   */
  published: boolean;
  /**
   * The date and time when the episode is scheduled to be published in UTC timezone (only present when publish_status is 'scheduled').
   */
  publishAt?: Date | undefined;
  /**
   * The title of the channel episode
   */
  title: string;
  /**
   * The date when the channel was last updated.
   */
  updated: Date;
};

export type ChannelEpisode = {
  channels?: ChannelEpisodeChannels | undefined;
};

/** @internal */
export const ChannelEpisodeChannels$inboundSchema: z.ZodType<
  ChannelEpisodeChannels,
  z.ZodTypeDef,
  unknown
> = z.object({
  channelHashedId: z.string(),
  created: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  description: z.string(),
  summary: z.string(),
  hashedId: z.string(),
  mediaHashedId: z.string(),
  published: z.boolean(),
  publish_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  title: z.string(),
  updated: z.string().datetime({ offset: true }).transform(v => new Date(v)),
}).transform((v) => {
  return remap$(v, {
    "publish_at": "publishAt",
  });
});

/** @internal */
export type ChannelEpisodeChannels$Outbound = {
  channelHashedId: string;
  created: string;
  description: string;
  summary: string;
  hashedId: string;
  mediaHashedId: string;
  published: boolean;
  publish_at?: string | undefined;
  title: string;
  updated: string;
};

/** @internal */
export const ChannelEpisodeChannels$outboundSchema: z.ZodType<
  ChannelEpisodeChannels$Outbound,
  z.ZodTypeDef,
  ChannelEpisodeChannels
> = z.object({
  channelHashedId: z.string(),
  created: z.date().transform(v => v.toISOString()),
  description: z.string(),
  summary: z.string(),
  hashedId: z.string(),
  mediaHashedId: z.string(),
  published: z.boolean(),
  publishAt: z.date().transform(v => v.toISOString()).optional(),
  title: z.string(),
  updated: z.date().transform(v => v.toISOString()),
}).transform((v) => {
  return remap$(v, {
    publishAt: "publish_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChannelEpisodeChannels$ {
  /** @deprecated use `ChannelEpisodeChannels$inboundSchema` instead. */
  export const inboundSchema = ChannelEpisodeChannels$inboundSchema;
  /** @deprecated use `ChannelEpisodeChannels$outboundSchema` instead. */
  export const outboundSchema = ChannelEpisodeChannels$outboundSchema;
  /** @deprecated use `ChannelEpisodeChannels$Outbound` instead. */
  export type Outbound = ChannelEpisodeChannels$Outbound;
}

export function channelEpisodeChannelsToJSON(
  channelEpisodeChannels: ChannelEpisodeChannels,
): string {
  return JSON.stringify(
    ChannelEpisodeChannels$outboundSchema.parse(channelEpisodeChannels),
  );
}

export function channelEpisodeChannelsFromJSON(
  jsonString: string,
): SafeParseResult<ChannelEpisodeChannels, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ChannelEpisodeChannels$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ChannelEpisodeChannels' from JSON`,
  );
}

/** @internal */
export const ChannelEpisode$inboundSchema: z.ZodType<
  ChannelEpisode,
  z.ZodTypeDef,
  unknown
> = z.object({
  channels: z.lazy(() => ChannelEpisodeChannels$inboundSchema).optional(),
});

/** @internal */
export type ChannelEpisode$Outbound = {
  channels?: ChannelEpisodeChannels$Outbound | undefined;
};

/** @internal */
export const ChannelEpisode$outboundSchema: z.ZodType<
  ChannelEpisode$Outbound,
  z.ZodTypeDef,
  ChannelEpisode
> = z.object({
  channels: z.lazy(() => ChannelEpisodeChannels$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChannelEpisode$ {
  /** @deprecated use `ChannelEpisode$inboundSchema` instead. */
  export const inboundSchema = ChannelEpisode$inboundSchema;
  /** @deprecated use `ChannelEpisode$outboundSchema` instead. */
  export const outboundSchema = ChannelEpisode$outboundSchema;
  /** @deprecated use `ChannelEpisode$Outbound` instead. */
  export type Outbound = ChannelEpisode$Outbound;
}

export function channelEpisodeToJSON(channelEpisode: ChannelEpisode): string {
  return JSON.stringify(ChannelEpisode$outboundSchema.parse(channelEpisode));
}

export function channelEpisodeFromJSON(
  jsonString: string,
): SafeParseResult<ChannelEpisode, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ChannelEpisode$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ChannelEpisode' from JSON`,
  );
}
