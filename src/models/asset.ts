/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type Asset = {
  /**
   * A direct-access URL to the content of the asset.
   */
  url?: string | undefined;
  /**
   * The width of this specific asset, if applicable.
   */
  width?: number | undefined;
  /**
   * The height of this specific asset, if applicable.
   */
  height?: number | undefined;
  /**
   * The size of the asset file that’s referenced by url, measured in bytes.
   */
  fileSize?: number | undefined;
  /**
   * The asset’s content type.
   */
  contentType?: string | undefined;
  /**
   * The internal type of the asset, describing how the asset should be used. Values can include OriginalFile, FlashVideoFile, MdFlashVideoFile, HdFlashVideoFile, Mp4VideoFile, MdMp4VideoFile, HdMp4VideoFile, IPhoneVideoFile, StillImageFile, SwfFile, Mp3AudioFile, and LargeImageFile.
   *
   * @remarks
   */
  type?: string | undefined;
};

/** @internal */
export const Asset$inboundSchema: z.ZodType<Asset, z.ZodTypeDef, unknown> = z
  .object({
    url: z.string().optional(),
    width: z.number().int().optional(),
    height: z.number().int().optional(),
    fileSize: z.number().int().optional(),
    contentType: z.string().optional(),
    type: z.string().optional(),
  });

/** @internal */
export type Asset$Outbound = {
  url?: string | undefined;
  width?: number | undefined;
  height?: number | undefined;
  fileSize?: number | undefined;
  contentType?: string | undefined;
  type?: string | undefined;
};

/** @internal */
export const Asset$outboundSchema: z.ZodType<
  Asset$Outbound,
  z.ZodTypeDef,
  Asset
> = z.object({
  url: z.string().optional(),
  width: z.number().int().optional(),
  height: z.number().int().optional(),
  fileSize: z.number().int().optional(),
  contentType: z.string().optional(),
  type: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Asset$ {
  /** @deprecated use `Asset$inboundSchema` instead. */
  export const inboundSchema = Asset$inboundSchema;
  /** @deprecated use `Asset$outboundSchema` instead. */
  export const outboundSchema = Asset$outboundSchema;
  /** @deprecated use `Asset$Outbound` instead. */
  export type Outbound = Asset$Outbound;
}

export function assetToJSON(asset: Asset): string {
  return JSON.stringify(Asset$outboundSchema.parse(asset));
}

export function assetFromJSON(
  jsonString: string,
): SafeParseResult<Asset, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Asset$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Asset' from JSON`,
  );
}
