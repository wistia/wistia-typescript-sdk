/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type CreateLiveStreamEvent = {
  /**
   * The title of the live stream event
   */
  title: string;
  /**
   * The description of the live stream event
   */
  description?: string | undefined;
  /**
   * The scheduled start time in W3C format with timezone
   */
  scheduledFor: Date;
  /**
   * Duration of the event in minutes (minimum 15)
   */
  eventDuration: number;
};

/** @internal */
export const CreateLiveStreamEvent$inboundSchema: z.ZodType<
  CreateLiveStreamEvent,
  z.ZodTypeDef,
  unknown
> = z.object({
  title: z.string(),
  description: z.string().optional(),
  scheduled_for: z.string().datetime({ offset: true }).transform(v =>
    new Date(v)
  ),
  event_duration: z.number().int(),
}).transform((v) => {
  return remap$(v, {
    "scheduled_for": "scheduledFor",
    "event_duration": "eventDuration",
  });
});

/** @internal */
export type CreateLiveStreamEvent$Outbound = {
  title: string;
  description?: string | undefined;
  scheduled_for: string;
  event_duration: number;
};

/** @internal */
export const CreateLiveStreamEvent$outboundSchema: z.ZodType<
  CreateLiveStreamEvent$Outbound,
  z.ZodTypeDef,
  CreateLiveStreamEvent
> = z.object({
  title: z.string(),
  description: z.string().optional(),
  scheduledFor: z.date().transform(v => v.toISOString()),
  eventDuration: z.number().int(),
}).transform((v) => {
  return remap$(v, {
    scheduledFor: "scheduled_for",
    eventDuration: "event_duration",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateLiveStreamEvent$ {
  /** @deprecated use `CreateLiveStreamEvent$inboundSchema` instead. */
  export const inboundSchema = CreateLiveStreamEvent$inboundSchema;
  /** @deprecated use `CreateLiveStreamEvent$outboundSchema` instead. */
  export const outboundSchema = CreateLiveStreamEvent$outboundSchema;
  /** @deprecated use `CreateLiveStreamEvent$Outbound` instead. */
  export type Outbound = CreateLiveStreamEvent$Outbound;
}

export function createLiveStreamEventToJSON(
  createLiveStreamEvent: CreateLiveStreamEvent,
): string {
  return JSON.stringify(
    CreateLiveStreamEvent$outboundSchema.parse(createLiveStreamEvent),
  );
}

export function createLiveStreamEventFromJSON(
  jsonString: string,
): SafeParseResult<CreateLiveStreamEvent, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateLiveStreamEvent$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateLiveStreamEvent' from JSON`,
  );
}
