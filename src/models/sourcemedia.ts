/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * The media that the localization is associated with.
 */
export type SourceMedia = {
  /**
   * A unique alphanumeric identifier for this media.
   */
  hashedId: string;
  /**
   * The name of the media.
   */
  name: string;
  /**
   * The duration of the media in seconds.
   */
  duration: number;
  /**
   * The date when the media was created.
   */
  createdAt: Date;
  /**
   * The date when the media was last updated.
   */
  updatedAt: Date;
};

/** @internal */
export const SourceMedia$inboundSchema: z.ZodType<
  SourceMedia,
  z.ZodTypeDef,
  unknown
> = z.object({
  hashed_id: z.string(),
  name: z.string(),
  duration: z.number(),
  created_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  updated_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
}).transform((v) => {
  return remap$(v, {
    "hashed_id": "hashedId",
    "created_at": "createdAt",
    "updated_at": "updatedAt",
  });
});

/** @internal */
export type SourceMedia$Outbound = {
  hashed_id: string;
  name: string;
  duration: number;
  created_at: string;
  updated_at: string;
};

/** @internal */
export const SourceMedia$outboundSchema: z.ZodType<
  SourceMedia$Outbound,
  z.ZodTypeDef,
  SourceMedia
> = z.object({
  hashedId: z.string(),
  name: z.string(),
  duration: z.number(),
  createdAt: z.date().transform(v => v.toISOString()),
  updatedAt: z.date().transform(v => v.toISOString()),
}).transform((v) => {
  return remap$(v, {
    hashedId: "hashed_id",
    createdAt: "created_at",
    updatedAt: "updated_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SourceMedia$ {
  /** @deprecated use `SourceMedia$inboundSchema` instead. */
  export const inboundSchema = SourceMedia$inboundSchema;
  /** @deprecated use `SourceMedia$outboundSchema` instead. */
  export const outboundSchema = SourceMedia$outboundSchema;
  /** @deprecated use `SourceMedia$Outbound` instead. */
  export type Outbound = SourceMedia$Outbound;
}

export function sourceMediaToJSON(sourceMedia: SourceMedia): string {
  return JSON.stringify(SourceMedia$outboundSchema.parse(sourceMedia));
}

export function sourceMediaFromJSON(
  jsonString: string,
): SafeParseResult<SourceMedia, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SourceMedia$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SourceMedia' from JSON`,
  );
}
