/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * A flag indicating whether or not the project is enabled for public access. Set to “1” to enable and “0” to disable.
 */
export const CreateProjectPublicEnum = {
  Zero: "0",
  One: "1",
} as const;
/**
 * A flag indicating whether or not the project is enabled for public access. Set to “1” to enable and “0” to disable.
 */
export type CreateProjectPublicEnum = ClosedEnum<
  typeof CreateProjectPublicEnum
>;

export type CreateProjectPublicUnion = CreateProjectPublicEnum | boolean;

export type CreateProject = {
  /**
   * The name of the project you want to create.
   */
  name?: string | undefined;
  /**
   * The email address of the person you want to set as the owner of this project. Defaults to the Wistia Account Owner.
   */
  adminEmail?: string | undefined;
  public?: CreateProjectPublicEnum | boolean | undefined;
};

/** @internal */
export const CreateProjectPublicEnum$inboundSchema: z.ZodNativeEnum<
  typeof CreateProjectPublicEnum
> = z.nativeEnum(CreateProjectPublicEnum);

/** @internal */
export const CreateProjectPublicEnum$outboundSchema: z.ZodNativeEnum<
  typeof CreateProjectPublicEnum
> = CreateProjectPublicEnum$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectPublicEnum$ {
  /** @deprecated use `CreateProjectPublicEnum$inboundSchema` instead. */
  export const inboundSchema = CreateProjectPublicEnum$inboundSchema;
  /** @deprecated use `CreateProjectPublicEnum$outboundSchema` instead. */
  export const outboundSchema = CreateProjectPublicEnum$outboundSchema;
}

/** @internal */
export const CreateProjectPublicUnion$inboundSchema: z.ZodType<
  CreateProjectPublicUnion,
  z.ZodTypeDef,
  unknown
> = z.union([CreateProjectPublicEnum$inboundSchema, z.boolean()]);

/** @internal */
export type CreateProjectPublicUnion$Outbound = string | boolean;

/** @internal */
export const CreateProjectPublicUnion$outboundSchema: z.ZodType<
  CreateProjectPublicUnion$Outbound,
  z.ZodTypeDef,
  CreateProjectPublicUnion
> = z.union([CreateProjectPublicEnum$outboundSchema, z.boolean()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectPublicUnion$ {
  /** @deprecated use `CreateProjectPublicUnion$inboundSchema` instead. */
  export const inboundSchema = CreateProjectPublicUnion$inboundSchema;
  /** @deprecated use `CreateProjectPublicUnion$outboundSchema` instead. */
  export const outboundSchema = CreateProjectPublicUnion$outboundSchema;
  /** @deprecated use `CreateProjectPublicUnion$Outbound` instead. */
  export type Outbound = CreateProjectPublicUnion$Outbound;
}

export function createProjectPublicUnionToJSON(
  createProjectPublicUnion: CreateProjectPublicUnion,
): string {
  return JSON.stringify(
    CreateProjectPublicUnion$outboundSchema.parse(createProjectPublicUnion),
  );
}

export function createProjectPublicUnionFromJSON(
  jsonString: string,
): SafeParseResult<CreateProjectPublicUnion, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateProjectPublicUnion$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateProjectPublicUnion' from JSON`,
  );
}

/** @internal */
export const CreateProject$inboundSchema: z.ZodType<
  CreateProject,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string().optional(),
  adminEmail: z.string().optional(),
  public: z.union([CreateProjectPublicEnum$inboundSchema, z.boolean()])
    .optional(),
});

/** @internal */
export type CreateProject$Outbound = {
  name?: string | undefined;
  adminEmail?: string | undefined;
  public?: string | boolean | undefined;
};

/** @internal */
export const CreateProject$outboundSchema: z.ZodType<
  CreateProject$Outbound,
  z.ZodTypeDef,
  CreateProject
> = z.object({
  name: z.string().optional(),
  adminEmail: z.string().optional(),
  public: z.union([CreateProjectPublicEnum$outboundSchema, z.boolean()])
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProject$ {
  /** @deprecated use `CreateProject$inboundSchema` instead. */
  export const inboundSchema = CreateProject$inboundSchema;
  /** @deprecated use `CreateProject$outboundSchema` instead. */
  export const outboundSchema = CreateProject$outboundSchema;
  /** @deprecated use `CreateProject$Outbound` instead. */
  export type Outbound = CreateProject$Outbound;
}

export function createProjectToJSON(createProject: CreateProject): string {
  return JSON.stringify(CreateProject$outboundSchema.parse(createProject));
}

export function createProjectFromJSON(
  jsonString: string,
): SafeParseResult<CreateProject, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateProject$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateProject' from JSON`,
  );
}
