/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type VideoCustomizationVideoThumbnail = {
  /**
   * If set to false, removes the “Click to Play” button on video thumbnails.
   */
  clickToPlayButton?: boolean | undefined;
};

export type VideoCustomizationSocialbarV1 = {
  buttons?: string | undefined;
  showTweetCount?: boolean | undefined;
  tweetText?: string | undefined;
  height?: number | undefined;
};

export type ChapterList = {
  id?: number | undefined;
  title?: string | undefined;
  time?: number | undefined;
  deleted?: boolean | undefined;
};

export type VideoCustomizationChapters = {
  visibleOnLoad?: boolean | undefined;
  chapterList?: Array<ChapterList> | undefined;
  on?: boolean | undefined;
};

/**
 * The time when the post-roll should be displayed. Can be a string like "end" or a number representing seconds.
 */
export type Time = string | number;

export type VideoCustomizationStyle = {
  /**
   * The background color of the post-roll.
   */
  backgroundColor?: string | undefined;
};

/**
 * Adds a Call To Action to your Video
 */
export type VideoCustomizationPostRollV1 = {
  /**
   * If set to true, allows the video to be rewatched.
   */
  rewatch?: boolean | undefined;
  /**
   * The URL of the text to be displayed.
   */
  text?: string | undefined;
  /**
   * The URL of the link to be displayed.
   */
  link?: string | undefined;
  /**
   * The time when the post-roll should be displayed. Can be a string like "end" or a number representing seconds.
   */
  time?: string | number | undefined;
  /**
   * If set to true, the post-roll will automatically adjust its size.
   */
  autoSize?: boolean | undefined;
  style?: VideoCustomizationStyle | undefined;
  /**
   * The type of call-to-action to be displayed. Typically set to "text". Other options are "image" which allows for "altText", and "html".
   */
  ctaType?: string | undefined;
  /**
   * If set to true, the post-roll is enabled.
   */
  on?: boolean | undefined;
  /**
   * The key used for tracking conversion opportunities.
   */
  conversionOpportunityKey?: string | undefined;
};

/**
 * Enables closed captions for the video
 */
export type VideoCustomizationCaptionsV1 = {
  /**
   * If set to true, the captions plugin is enabled and captions controls will be available to viewers.
   */
  on?: boolean | undefined;
  /**
   * If set to true, captions will be turned on automatically when the video loads. Only takes effect when the captions plugin is enabled.
   */
  onByDefault?: boolean | undefined;
};

export type VideoCustomizationPlugin = {
  videoThumbnail?: VideoCustomizationVideoThumbnail | undefined;
  socialbarV1?: VideoCustomizationSocialbarV1 | undefined;
  chapters?: VideoCustomizationChapters | undefined;
  /**
   * Adds a Call To Action to your Video
   */
  postRollV1?: VideoCustomizationPostRollV1 | undefined;
  /**
   * Enables closed captions for the video
   */
  captionsV1?: VideoCustomizationCaptionsV1 | undefined;
};

/**
 * Examples:
 *
 * @remarks
 * ```json
 * {
 *   "minWidth": 400,
 *   "maxWidth": 960
 * }
 * ```
 * ```json
 * {
 *   "minHeight": 300,
 *   "maxHeight": 450
 * }
 * ```
 */
export type VideoFoam = {
  /**
   * Minimum width the video can be resized to.
   */
  minWidth?: number | undefined;
  /**
   * Maximum width the video can be resized to.
   */
  maxWidth?: number | undefined;
  /**
   * Minimum height the video can be resized to.
   */
  minHeight?: number | undefined;
  /**
   * Maximum height the video can be resized to.
   */
  maxHeight?: number | undefined;
};

/**
 * When set to true, the video will adjust its size according to its parent element. It can also be an object specifying min/max width or height.
 */
export type VideoFoamUnion = VideoFoam | boolean;

export type VideoCustomization = {
  /**
   * If set to true, the video will play as soon as it’s ready. Note that autoplay might not work on some devices and browsers.
   */
  autoPlay?: boolean | undefined;
  /**
   * If set to true, controls like the big play button, playbar, volume, etc. will be visible as soon as the video is embedded.
   */
  controlsVisibleOnLoad?: boolean | undefined;
  /**
   * If set to false, the option to “Copy Link and Thumbnail” will be removed when right-clicking on the video.
   */
  copyLinkAndThumbnailEnabled?: boolean | undefined;
  /**
   * If set to true, data for each viewing session will not be tracked.
   */
  doNotTrack?: boolean | undefined;
  /**
   * Associate a specific email address with this video’s viewing sessions.
   */
  email?: string | undefined;
  /**
   * Determines what happens when the video ends. Options are default (stays on the last frame), reset (shows thumbnail and controls), and loop (plays again from the start).
   */
  endVideoBehavior?: string | undefined;
  /**
   * If set to true, the video will try to play in a pseudo-fullscreen mode on certain mobile devices.
   */
  fakeFullscreen?: boolean | undefined;
  /**
   * Resizes the video when there's a discrepancy between its aspect ratio and that of its parent container. Options are contain, cover, fill, and none.
   */
  fitStrategy?: string | undefined;
  /**
   * If set to true, the fullscreen button will be available as a video control.
   */
  fullscreenButton?: boolean | undefined;
  /**
   * If set to false, the video will not automatically go to fullscreen mode on mobile when rotated to landscape.
   */
  fullscreenOnRotateToLandscape?: boolean | undefined;
  /**
   * If set to false, the key moments feature will be disabled.
   */
  keyMoments?: boolean | undefined;
  /**
   * If set to true, the video will start in a muted state.
   */
  muted?: boolean | undefined;
  /**
   * If set to false, the playback speed controls in the settings menu will be hidden.
   */
  playbackRateControl?: boolean | undefined;
  /**
   * If set to true, the playbar will be available. If set to false, it will be hidden.
   */
  playbar?: boolean | undefined;
  /**
   * Indicates if the play button is visible.
   */
  playButton?: boolean | undefined;
  /**
   * Changes the base color of the player. Expects a hexadecimal rgb string.
   */
  playerColor?: string | undefined;
  /**
   * Enables the use of specially crafted links on the page to associate with a video, turning them into a playlist.
   */
  playlistLinks?: boolean | undefined;
  /**
   * If set to true and this video has a playlist, it will loop back to the first video after the last one has finished.
   */
  playlistLoop?: boolean | undefined;
  /**
   * If set to false, videos will play within the native mobile player.
   */
  playsinline?: boolean | undefined;
  /**
   * If set to false, animations for the Pause and Play symbols will be removed.
   */
  playPauseNotifier?: boolean | undefined;
  /**
   * If set to false for a muted autoplay video, the video won't pause when out of view.
   */
  playSuspendedOffScreen?: boolean | undefined;
  plugin?: VideoCustomizationPlugin | undefined;
  /**
   * Sets the video’s preload property. Possible values are metadata, auto, none, true, and false.
   */
  preload?: string | undefined;
  /**
   * If set to false, the video quality selector in the settings menu will be hidden.
   */
  qualityControl?: boolean | undefined;
  /**
   * Specifies the maximum quality the video will play at.
   */
  qualityMax?: number | undefined;
  /**
   * Specifies the minimum quality the video will play at.
   */
  qualityMin?: number | undefined;
  /**
   * Determines if the video should resume from where the viewer left off. Options are true, false, and auto.
   */
  resumable?: string | undefined;
  /**
   * If set to true, the video’s metadata will be injected into the page’s markup for SEO.
   */
  seo?: boolean | undefined;
  /**
   * If set to true, the settings control will be available.
   */
  settingsControl?: boolean | undefined;
  /**
   * Determines how videos handle autoplay in contexts where normal autoplay might be blocked. Options are true, allow, and false.
   */
  silentAutoPlay?: string | undefined;
  smallPlayButton?: boolean | undefined;
  /**
   * Overrides the thumbnail image that appears before the video plays.
   */
  stillUrl?: string | undefined;
  /**
   * Sets the starting time of the video.
   */
  time?: string | undefined;
  /**
   * Sets the Thumbnail Alt Text for the media.
   */
  thumbnailAltText?: string | undefined;
  /**
   * When set to true, the video will adjust its size according to its parent element. It can also be an object specifying min/max width or height.
   */
  videoFoam?: VideoFoam | boolean | undefined;
  /**
   * Sets the volume of the video.
   */
  volume?: number | undefined;
  /**
   * When set to true, a volume control is available over the video.
   */
  volumeControl?: boolean | undefined;
  /**
   * If set to transparent, the background behind the player will be transparent instead of black.
   */
  wmode?: string | undefined;
};

/** @internal */
export const VideoCustomizationVideoThumbnail$inboundSchema: z.ZodType<
  VideoCustomizationVideoThumbnail,
  z.ZodTypeDef,
  unknown
> = z.object({
  clickToPlayButton: z.boolean().optional(),
});

/** @internal */
export type VideoCustomizationVideoThumbnail$Outbound = {
  clickToPlayButton?: boolean | undefined;
};

/** @internal */
export const VideoCustomizationVideoThumbnail$outboundSchema: z.ZodType<
  VideoCustomizationVideoThumbnail$Outbound,
  z.ZodTypeDef,
  VideoCustomizationVideoThumbnail
> = z.object({
  clickToPlayButton: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VideoCustomizationVideoThumbnail$ {
  /** @deprecated use `VideoCustomizationVideoThumbnail$inboundSchema` instead. */
  export const inboundSchema = VideoCustomizationVideoThumbnail$inboundSchema;
  /** @deprecated use `VideoCustomizationVideoThumbnail$outboundSchema` instead. */
  export const outboundSchema = VideoCustomizationVideoThumbnail$outboundSchema;
  /** @deprecated use `VideoCustomizationVideoThumbnail$Outbound` instead. */
  export type Outbound = VideoCustomizationVideoThumbnail$Outbound;
}

export function videoCustomizationVideoThumbnailToJSON(
  videoCustomizationVideoThumbnail: VideoCustomizationVideoThumbnail,
): string {
  return JSON.stringify(
    VideoCustomizationVideoThumbnail$outboundSchema.parse(
      videoCustomizationVideoThumbnail,
    ),
  );
}

export function videoCustomizationVideoThumbnailFromJSON(
  jsonString: string,
): SafeParseResult<VideoCustomizationVideoThumbnail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => VideoCustomizationVideoThumbnail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'VideoCustomizationVideoThumbnail' from JSON`,
  );
}

/** @internal */
export const VideoCustomizationSocialbarV1$inboundSchema: z.ZodType<
  VideoCustomizationSocialbarV1,
  z.ZodTypeDef,
  unknown
> = z.object({
  buttons: z.string().optional(),
  showTweetCount: z.boolean().optional(),
  tweetText: z.string().optional(),
  height: z.number().int().optional(),
});

/** @internal */
export type VideoCustomizationSocialbarV1$Outbound = {
  buttons?: string | undefined;
  showTweetCount?: boolean | undefined;
  tweetText?: string | undefined;
  height?: number | undefined;
};

/** @internal */
export const VideoCustomizationSocialbarV1$outboundSchema: z.ZodType<
  VideoCustomizationSocialbarV1$Outbound,
  z.ZodTypeDef,
  VideoCustomizationSocialbarV1
> = z.object({
  buttons: z.string().optional(),
  showTweetCount: z.boolean().optional(),
  tweetText: z.string().optional(),
  height: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VideoCustomizationSocialbarV1$ {
  /** @deprecated use `VideoCustomizationSocialbarV1$inboundSchema` instead. */
  export const inboundSchema = VideoCustomizationSocialbarV1$inboundSchema;
  /** @deprecated use `VideoCustomizationSocialbarV1$outboundSchema` instead. */
  export const outboundSchema = VideoCustomizationSocialbarV1$outboundSchema;
  /** @deprecated use `VideoCustomizationSocialbarV1$Outbound` instead. */
  export type Outbound = VideoCustomizationSocialbarV1$Outbound;
}

export function videoCustomizationSocialbarV1ToJSON(
  videoCustomizationSocialbarV1: VideoCustomizationSocialbarV1,
): string {
  return JSON.stringify(
    VideoCustomizationSocialbarV1$outboundSchema.parse(
      videoCustomizationSocialbarV1,
    ),
  );
}

export function videoCustomizationSocialbarV1FromJSON(
  jsonString: string,
): SafeParseResult<VideoCustomizationSocialbarV1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => VideoCustomizationSocialbarV1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'VideoCustomizationSocialbarV1' from JSON`,
  );
}

/** @internal */
export const ChapterList$inboundSchema: z.ZodType<
  ChapterList,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.number().int().optional(),
  title: z.string().optional(),
  time: z.number().optional(),
  deleted: z.boolean().optional(),
});

/** @internal */
export type ChapterList$Outbound = {
  id?: number | undefined;
  title?: string | undefined;
  time?: number | undefined;
  deleted?: boolean | undefined;
};

/** @internal */
export const ChapterList$outboundSchema: z.ZodType<
  ChapterList$Outbound,
  z.ZodTypeDef,
  ChapterList
> = z.object({
  id: z.number().int().optional(),
  title: z.string().optional(),
  time: z.number().optional(),
  deleted: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChapterList$ {
  /** @deprecated use `ChapterList$inboundSchema` instead. */
  export const inboundSchema = ChapterList$inboundSchema;
  /** @deprecated use `ChapterList$outboundSchema` instead. */
  export const outboundSchema = ChapterList$outboundSchema;
  /** @deprecated use `ChapterList$Outbound` instead. */
  export type Outbound = ChapterList$Outbound;
}

export function chapterListToJSON(chapterList: ChapterList): string {
  return JSON.stringify(ChapterList$outboundSchema.parse(chapterList));
}

export function chapterListFromJSON(
  jsonString: string,
): SafeParseResult<ChapterList, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ChapterList$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ChapterList' from JSON`,
  );
}

/** @internal */
export const VideoCustomizationChapters$inboundSchema: z.ZodType<
  VideoCustomizationChapters,
  z.ZodTypeDef,
  unknown
> = z.object({
  visibleOnLoad: z.boolean().optional(),
  chapterList: z.array(z.lazy(() => ChapterList$inboundSchema)).optional(),
  on: z.boolean().optional(),
});

/** @internal */
export type VideoCustomizationChapters$Outbound = {
  visibleOnLoad?: boolean | undefined;
  chapterList?: Array<ChapterList$Outbound> | undefined;
  on?: boolean | undefined;
};

/** @internal */
export const VideoCustomizationChapters$outboundSchema: z.ZodType<
  VideoCustomizationChapters$Outbound,
  z.ZodTypeDef,
  VideoCustomizationChapters
> = z.object({
  visibleOnLoad: z.boolean().optional(),
  chapterList: z.array(z.lazy(() => ChapterList$outboundSchema)).optional(),
  on: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VideoCustomizationChapters$ {
  /** @deprecated use `VideoCustomizationChapters$inboundSchema` instead. */
  export const inboundSchema = VideoCustomizationChapters$inboundSchema;
  /** @deprecated use `VideoCustomizationChapters$outboundSchema` instead. */
  export const outboundSchema = VideoCustomizationChapters$outboundSchema;
  /** @deprecated use `VideoCustomizationChapters$Outbound` instead. */
  export type Outbound = VideoCustomizationChapters$Outbound;
}

export function videoCustomizationChaptersToJSON(
  videoCustomizationChapters: VideoCustomizationChapters,
): string {
  return JSON.stringify(
    VideoCustomizationChapters$outboundSchema.parse(videoCustomizationChapters),
  );
}

export function videoCustomizationChaptersFromJSON(
  jsonString: string,
): SafeParseResult<VideoCustomizationChapters, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => VideoCustomizationChapters$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'VideoCustomizationChapters' from JSON`,
  );
}

/** @internal */
export const Time$inboundSchema: z.ZodType<Time, z.ZodTypeDef, unknown> = z
  .union([z.string(), z.number()]);

/** @internal */
export type Time$Outbound = string | number;

/** @internal */
export const Time$outboundSchema: z.ZodType<Time$Outbound, z.ZodTypeDef, Time> =
  z.union([z.string(), z.number()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Time$ {
  /** @deprecated use `Time$inboundSchema` instead. */
  export const inboundSchema = Time$inboundSchema;
  /** @deprecated use `Time$outboundSchema` instead. */
  export const outboundSchema = Time$outboundSchema;
  /** @deprecated use `Time$Outbound` instead. */
  export type Outbound = Time$Outbound;
}

export function timeToJSON(time: Time): string {
  return JSON.stringify(Time$outboundSchema.parse(time));
}

export function timeFromJSON(
  jsonString: string,
): SafeParseResult<Time, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Time$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Time' from JSON`,
  );
}

/** @internal */
export const VideoCustomizationStyle$inboundSchema: z.ZodType<
  VideoCustomizationStyle,
  z.ZodTypeDef,
  unknown
> = z.object({
  backgroundColor: z.string().optional(),
});

/** @internal */
export type VideoCustomizationStyle$Outbound = {
  backgroundColor?: string | undefined;
};

/** @internal */
export const VideoCustomizationStyle$outboundSchema: z.ZodType<
  VideoCustomizationStyle$Outbound,
  z.ZodTypeDef,
  VideoCustomizationStyle
> = z.object({
  backgroundColor: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VideoCustomizationStyle$ {
  /** @deprecated use `VideoCustomizationStyle$inboundSchema` instead. */
  export const inboundSchema = VideoCustomizationStyle$inboundSchema;
  /** @deprecated use `VideoCustomizationStyle$outboundSchema` instead. */
  export const outboundSchema = VideoCustomizationStyle$outboundSchema;
  /** @deprecated use `VideoCustomizationStyle$Outbound` instead. */
  export type Outbound = VideoCustomizationStyle$Outbound;
}

export function videoCustomizationStyleToJSON(
  videoCustomizationStyle: VideoCustomizationStyle,
): string {
  return JSON.stringify(
    VideoCustomizationStyle$outboundSchema.parse(videoCustomizationStyle),
  );
}

export function videoCustomizationStyleFromJSON(
  jsonString: string,
): SafeParseResult<VideoCustomizationStyle, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => VideoCustomizationStyle$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'VideoCustomizationStyle' from JSON`,
  );
}

/** @internal */
export const VideoCustomizationPostRollV1$inboundSchema: z.ZodType<
  VideoCustomizationPostRollV1,
  z.ZodTypeDef,
  unknown
> = z.object({
  rewatch: z.boolean().optional(),
  text: z.string().optional(),
  link: z.string().optional(),
  time: z.union([z.string(), z.number()]).optional(),
  autoSize: z.boolean().optional(),
  style: z.lazy(() => VideoCustomizationStyle$inboundSchema).optional(),
  ctaType: z.string().optional(),
  on: z.boolean().optional(),
  conversionOpportunityKey: z.string().optional(),
});

/** @internal */
export type VideoCustomizationPostRollV1$Outbound = {
  rewatch?: boolean | undefined;
  text?: string | undefined;
  link?: string | undefined;
  time?: string | number | undefined;
  autoSize?: boolean | undefined;
  style?: VideoCustomizationStyle$Outbound | undefined;
  ctaType?: string | undefined;
  on?: boolean | undefined;
  conversionOpportunityKey?: string | undefined;
};

/** @internal */
export const VideoCustomizationPostRollV1$outboundSchema: z.ZodType<
  VideoCustomizationPostRollV1$Outbound,
  z.ZodTypeDef,
  VideoCustomizationPostRollV1
> = z.object({
  rewatch: z.boolean().optional(),
  text: z.string().optional(),
  link: z.string().optional(),
  time: z.union([z.string(), z.number()]).optional(),
  autoSize: z.boolean().optional(),
  style: z.lazy(() => VideoCustomizationStyle$outboundSchema).optional(),
  ctaType: z.string().optional(),
  on: z.boolean().optional(),
  conversionOpportunityKey: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VideoCustomizationPostRollV1$ {
  /** @deprecated use `VideoCustomizationPostRollV1$inboundSchema` instead. */
  export const inboundSchema = VideoCustomizationPostRollV1$inboundSchema;
  /** @deprecated use `VideoCustomizationPostRollV1$outboundSchema` instead. */
  export const outboundSchema = VideoCustomizationPostRollV1$outboundSchema;
  /** @deprecated use `VideoCustomizationPostRollV1$Outbound` instead. */
  export type Outbound = VideoCustomizationPostRollV1$Outbound;
}

export function videoCustomizationPostRollV1ToJSON(
  videoCustomizationPostRollV1: VideoCustomizationPostRollV1,
): string {
  return JSON.stringify(
    VideoCustomizationPostRollV1$outboundSchema.parse(
      videoCustomizationPostRollV1,
    ),
  );
}

export function videoCustomizationPostRollV1FromJSON(
  jsonString: string,
): SafeParseResult<VideoCustomizationPostRollV1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => VideoCustomizationPostRollV1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'VideoCustomizationPostRollV1' from JSON`,
  );
}

/** @internal */
export const VideoCustomizationCaptionsV1$inboundSchema: z.ZodType<
  VideoCustomizationCaptionsV1,
  z.ZodTypeDef,
  unknown
> = z.object({
  on: z.boolean().optional(),
  onByDefault: z.boolean().optional(),
});

/** @internal */
export type VideoCustomizationCaptionsV1$Outbound = {
  on?: boolean | undefined;
  onByDefault?: boolean | undefined;
};

/** @internal */
export const VideoCustomizationCaptionsV1$outboundSchema: z.ZodType<
  VideoCustomizationCaptionsV1$Outbound,
  z.ZodTypeDef,
  VideoCustomizationCaptionsV1
> = z.object({
  on: z.boolean().optional(),
  onByDefault: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VideoCustomizationCaptionsV1$ {
  /** @deprecated use `VideoCustomizationCaptionsV1$inboundSchema` instead. */
  export const inboundSchema = VideoCustomizationCaptionsV1$inboundSchema;
  /** @deprecated use `VideoCustomizationCaptionsV1$outboundSchema` instead. */
  export const outboundSchema = VideoCustomizationCaptionsV1$outboundSchema;
  /** @deprecated use `VideoCustomizationCaptionsV1$Outbound` instead. */
  export type Outbound = VideoCustomizationCaptionsV1$Outbound;
}

export function videoCustomizationCaptionsV1ToJSON(
  videoCustomizationCaptionsV1: VideoCustomizationCaptionsV1,
): string {
  return JSON.stringify(
    VideoCustomizationCaptionsV1$outboundSchema.parse(
      videoCustomizationCaptionsV1,
    ),
  );
}

export function videoCustomizationCaptionsV1FromJSON(
  jsonString: string,
): SafeParseResult<VideoCustomizationCaptionsV1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => VideoCustomizationCaptionsV1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'VideoCustomizationCaptionsV1' from JSON`,
  );
}

/** @internal */
export const VideoCustomizationPlugin$inboundSchema: z.ZodType<
  VideoCustomizationPlugin,
  z.ZodTypeDef,
  unknown
> = z.object({
  videoThumbnail: z.lazy(() => VideoCustomizationVideoThumbnail$inboundSchema)
    .optional(),
  "socialbar-v1": z.lazy(() => VideoCustomizationSocialbarV1$inboundSchema)
    .optional(),
  chapters: z.lazy(() => VideoCustomizationChapters$inboundSchema).optional(),
  "postRoll-v1": z.lazy(() => VideoCustomizationPostRollV1$inboundSchema)
    .optional(),
  "captions-v1": z.lazy(() => VideoCustomizationCaptionsV1$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "socialbar-v1": "socialbarV1",
    "postRoll-v1": "postRollV1",
    "captions-v1": "captionsV1",
  });
});

/** @internal */
export type VideoCustomizationPlugin$Outbound = {
  videoThumbnail?: VideoCustomizationVideoThumbnail$Outbound | undefined;
  "socialbar-v1"?: VideoCustomizationSocialbarV1$Outbound | undefined;
  chapters?: VideoCustomizationChapters$Outbound | undefined;
  "postRoll-v1"?: VideoCustomizationPostRollV1$Outbound | undefined;
  "captions-v1"?: VideoCustomizationCaptionsV1$Outbound | undefined;
};

/** @internal */
export const VideoCustomizationPlugin$outboundSchema: z.ZodType<
  VideoCustomizationPlugin$Outbound,
  z.ZodTypeDef,
  VideoCustomizationPlugin
> = z.object({
  videoThumbnail: z.lazy(() => VideoCustomizationVideoThumbnail$outboundSchema)
    .optional(),
  socialbarV1: z.lazy(() => VideoCustomizationSocialbarV1$outboundSchema)
    .optional(),
  chapters: z.lazy(() => VideoCustomizationChapters$outboundSchema).optional(),
  postRollV1: z.lazy(() => VideoCustomizationPostRollV1$outboundSchema)
    .optional(),
  captionsV1: z.lazy(() => VideoCustomizationCaptionsV1$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    socialbarV1: "socialbar-v1",
    postRollV1: "postRoll-v1",
    captionsV1: "captions-v1",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VideoCustomizationPlugin$ {
  /** @deprecated use `VideoCustomizationPlugin$inboundSchema` instead. */
  export const inboundSchema = VideoCustomizationPlugin$inboundSchema;
  /** @deprecated use `VideoCustomizationPlugin$outboundSchema` instead. */
  export const outboundSchema = VideoCustomizationPlugin$outboundSchema;
  /** @deprecated use `VideoCustomizationPlugin$Outbound` instead. */
  export type Outbound = VideoCustomizationPlugin$Outbound;
}

export function videoCustomizationPluginToJSON(
  videoCustomizationPlugin: VideoCustomizationPlugin,
): string {
  return JSON.stringify(
    VideoCustomizationPlugin$outboundSchema.parse(videoCustomizationPlugin),
  );
}

export function videoCustomizationPluginFromJSON(
  jsonString: string,
): SafeParseResult<VideoCustomizationPlugin, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => VideoCustomizationPlugin$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'VideoCustomizationPlugin' from JSON`,
  );
}

/** @internal */
export const VideoFoam$inboundSchema: z.ZodType<
  VideoFoam,
  z.ZodTypeDef,
  unknown
> = z.object({
  minWidth: z.number().int().optional(),
  maxWidth: z.number().int().optional(),
  minHeight: z.number().int().optional(),
  maxHeight: z.number().int().optional(),
});

/** @internal */
export type VideoFoam$Outbound = {
  minWidth?: number | undefined;
  maxWidth?: number | undefined;
  minHeight?: number | undefined;
  maxHeight?: number | undefined;
};

/** @internal */
export const VideoFoam$outboundSchema: z.ZodType<
  VideoFoam$Outbound,
  z.ZodTypeDef,
  VideoFoam
> = z.object({
  minWidth: z.number().int().optional(),
  maxWidth: z.number().int().optional(),
  minHeight: z.number().int().optional(),
  maxHeight: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VideoFoam$ {
  /** @deprecated use `VideoFoam$inboundSchema` instead. */
  export const inboundSchema = VideoFoam$inboundSchema;
  /** @deprecated use `VideoFoam$outboundSchema` instead. */
  export const outboundSchema = VideoFoam$outboundSchema;
  /** @deprecated use `VideoFoam$Outbound` instead. */
  export type Outbound = VideoFoam$Outbound;
}

export function videoFoamToJSON(videoFoam: VideoFoam): string {
  return JSON.stringify(VideoFoam$outboundSchema.parse(videoFoam));
}

export function videoFoamFromJSON(
  jsonString: string,
): SafeParseResult<VideoFoam, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => VideoFoam$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'VideoFoam' from JSON`,
  );
}

/** @internal */
export const VideoFoamUnion$inboundSchema: z.ZodType<
  VideoFoamUnion,
  z.ZodTypeDef,
  unknown
> = z.union([z.lazy(() => VideoFoam$inboundSchema), z.boolean()]);

/** @internal */
export type VideoFoamUnion$Outbound = VideoFoam$Outbound | boolean;

/** @internal */
export const VideoFoamUnion$outboundSchema: z.ZodType<
  VideoFoamUnion$Outbound,
  z.ZodTypeDef,
  VideoFoamUnion
> = z.union([z.lazy(() => VideoFoam$outboundSchema), z.boolean()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VideoFoamUnion$ {
  /** @deprecated use `VideoFoamUnion$inboundSchema` instead. */
  export const inboundSchema = VideoFoamUnion$inboundSchema;
  /** @deprecated use `VideoFoamUnion$outboundSchema` instead. */
  export const outboundSchema = VideoFoamUnion$outboundSchema;
  /** @deprecated use `VideoFoamUnion$Outbound` instead. */
  export type Outbound = VideoFoamUnion$Outbound;
}

export function videoFoamUnionToJSON(videoFoamUnion: VideoFoamUnion): string {
  return JSON.stringify(VideoFoamUnion$outboundSchema.parse(videoFoamUnion));
}

export function videoFoamUnionFromJSON(
  jsonString: string,
): SafeParseResult<VideoFoamUnion, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => VideoFoamUnion$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'VideoFoamUnion' from JSON`,
  );
}

/** @internal */
export const VideoCustomization$inboundSchema: z.ZodType<
  VideoCustomization,
  z.ZodTypeDef,
  unknown
> = z.object({
  autoPlay: z.boolean().optional(),
  controlsVisibleOnLoad: z.boolean().optional(),
  copyLinkAndThumbnailEnabled: z.boolean().optional(),
  doNotTrack: z.boolean().optional(),
  email: z.string().optional(),
  endVideoBehavior: z.string().optional(),
  fakeFullscreen: z.boolean().optional(),
  fitStrategy: z.string().optional(),
  fullscreenButton: z.boolean().optional(),
  fullscreenOnRotateToLandscape: z.boolean().optional(),
  keyMoments: z.boolean().optional(),
  muted: z.boolean().optional(),
  playbackRateControl: z.boolean().optional(),
  playbar: z.boolean().optional(),
  playButton: z.boolean().optional(),
  playerColor: z.string().optional(),
  playlistLinks: z.boolean().optional(),
  playlistLoop: z.boolean().optional(),
  playsinline: z.boolean().optional(),
  playPauseNotifier: z.boolean().optional(),
  playSuspendedOffScreen: z.boolean().optional(),
  plugin: z.lazy(() => VideoCustomizationPlugin$inboundSchema).optional(),
  preload: z.string().optional(),
  qualityControl: z.boolean().optional(),
  qualityMax: z.number().int().optional(),
  qualityMin: z.number().int().optional(),
  resumable: z.string().optional(),
  seo: z.boolean().optional(),
  settingsControl: z.boolean().optional(),
  silentAutoPlay: z.string().optional(),
  smallPlayButton: z.boolean().optional(),
  stillUrl: z.string().optional(),
  time: z.string().optional(),
  thumbnailAltText: z.string().optional(),
  videoFoam: z.union([z.lazy(() => VideoFoam$inboundSchema), z.boolean()])
    .optional(),
  volume: z.number().optional(),
  volumeControl: z.boolean().optional(),
  wmode: z.string().optional(),
});

/** @internal */
export type VideoCustomization$Outbound = {
  autoPlay?: boolean | undefined;
  controlsVisibleOnLoad?: boolean | undefined;
  copyLinkAndThumbnailEnabled?: boolean | undefined;
  doNotTrack?: boolean | undefined;
  email?: string | undefined;
  endVideoBehavior?: string | undefined;
  fakeFullscreen?: boolean | undefined;
  fitStrategy?: string | undefined;
  fullscreenButton?: boolean | undefined;
  fullscreenOnRotateToLandscape?: boolean | undefined;
  keyMoments?: boolean | undefined;
  muted?: boolean | undefined;
  playbackRateControl?: boolean | undefined;
  playbar?: boolean | undefined;
  playButton?: boolean | undefined;
  playerColor?: string | undefined;
  playlistLinks?: boolean | undefined;
  playlistLoop?: boolean | undefined;
  playsinline?: boolean | undefined;
  playPauseNotifier?: boolean | undefined;
  playSuspendedOffScreen?: boolean | undefined;
  plugin?: VideoCustomizationPlugin$Outbound | undefined;
  preload?: string | undefined;
  qualityControl?: boolean | undefined;
  qualityMax?: number | undefined;
  qualityMin?: number | undefined;
  resumable?: string | undefined;
  seo?: boolean | undefined;
  settingsControl?: boolean | undefined;
  silentAutoPlay?: string | undefined;
  smallPlayButton?: boolean | undefined;
  stillUrl?: string | undefined;
  time?: string | undefined;
  thumbnailAltText?: string | undefined;
  videoFoam?: VideoFoam$Outbound | boolean | undefined;
  volume?: number | undefined;
  volumeControl?: boolean | undefined;
  wmode?: string | undefined;
};

/** @internal */
export const VideoCustomization$outboundSchema: z.ZodType<
  VideoCustomization$Outbound,
  z.ZodTypeDef,
  VideoCustomization
> = z.object({
  autoPlay: z.boolean().optional(),
  controlsVisibleOnLoad: z.boolean().optional(),
  copyLinkAndThumbnailEnabled: z.boolean().optional(),
  doNotTrack: z.boolean().optional(),
  email: z.string().optional(),
  endVideoBehavior: z.string().optional(),
  fakeFullscreen: z.boolean().optional(),
  fitStrategy: z.string().optional(),
  fullscreenButton: z.boolean().optional(),
  fullscreenOnRotateToLandscape: z.boolean().optional(),
  keyMoments: z.boolean().optional(),
  muted: z.boolean().optional(),
  playbackRateControl: z.boolean().optional(),
  playbar: z.boolean().optional(),
  playButton: z.boolean().optional(),
  playerColor: z.string().optional(),
  playlistLinks: z.boolean().optional(),
  playlistLoop: z.boolean().optional(),
  playsinline: z.boolean().optional(),
  playPauseNotifier: z.boolean().optional(),
  playSuspendedOffScreen: z.boolean().optional(),
  plugin: z.lazy(() => VideoCustomizationPlugin$outboundSchema).optional(),
  preload: z.string().optional(),
  qualityControl: z.boolean().optional(),
  qualityMax: z.number().int().optional(),
  qualityMin: z.number().int().optional(),
  resumable: z.string().optional(),
  seo: z.boolean().optional(),
  settingsControl: z.boolean().optional(),
  silentAutoPlay: z.string().optional(),
  smallPlayButton: z.boolean().optional(),
  stillUrl: z.string().optional(),
  time: z.string().optional(),
  thumbnailAltText: z.string().optional(),
  videoFoam: z.union([z.lazy(() => VideoFoam$outboundSchema), z.boolean()])
    .optional(),
  volume: z.number().optional(),
  volumeControl: z.boolean().optional(),
  wmode: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VideoCustomization$ {
  /** @deprecated use `VideoCustomization$inboundSchema` instead. */
  export const inboundSchema = VideoCustomization$inboundSchema;
  /** @deprecated use `VideoCustomization$outboundSchema` instead. */
  export const outboundSchema = VideoCustomization$outboundSchema;
  /** @deprecated use `VideoCustomization$Outbound` instead. */
  export type Outbound = VideoCustomization$Outbound;
}

export function videoCustomizationToJSON(
  videoCustomization: VideoCustomization,
): string {
  return JSON.stringify(
    VideoCustomization$outboundSchema.parse(videoCustomization),
  );
}

export function videoCustomizationFromJSON(
  jsonString: string,
): SafeParseResult<VideoCustomization, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => VideoCustomization$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'VideoCustomization' from JSON`,
  );
}
