/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type AllowedDomain = {
  /**
   * The allowed domain name.
   */
  domain: string;
  /**
   * The date that the allowed domain was originally created.
   */
  createdAt: Date;
};

/** @internal */
export const AllowedDomain$inboundSchema: z.ZodType<
  AllowedDomain,
  z.ZodTypeDef,
  unknown
> = z.object({
  domain: z.string(),
  created_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
}).transform((v) => {
  return remap$(v, {
    "created_at": "createdAt",
  });
});

/** @internal */
export type AllowedDomain$Outbound = {
  domain: string;
  created_at: string;
};

/** @internal */
export const AllowedDomain$outboundSchema: z.ZodType<
  AllowedDomain$Outbound,
  z.ZodTypeDef,
  AllowedDomain
> = z.object({
  domain: z.string(),
  createdAt: z.date().transform(v => v.toISOString()),
}).transform((v) => {
  return remap$(v, {
    createdAt: "created_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AllowedDomain$ {
  /** @deprecated use `AllowedDomain$inboundSchema` instead. */
  export const inboundSchema = AllowedDomain$inboundSchema;
  /** @deprecated use `AllowedDomain$outboundSchema` instead. */
  export const outboundSchema = AllowedDomain$outboundSchema;
  /** @deprecated use `AllowedDomain$Outbound` instead. */
  export type Outbound = AllowedDomain$Outbound;
}

export function allowedDomainToJSON(allowedDomain: AllowedDomain): string {
  return JSON.stringify(AllowedDomain$outboundSchema.parse(allowedDomain));
}

export function allowedDomainFromJSON(
  jsonString: string,
): SafeParseResult<AllowedDomain, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AllowedDomain$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AllowedDomain' from JSON`,
  );
}
