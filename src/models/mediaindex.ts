/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  Asset,
  Asset$inboundSchema,
  Asset$Outbound,
  Asset$outboundSchema,
} from "./asset.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  SlimProjectSchemaProject,
  SlimProjectSchemaProject$inboundSchema,
  SlimProjectSchemaProject$Outbound,
  SlimProjectSchemaProject$outboundSchema,
} from "./slimprojectschemaproject.js";
import {
  Subfolder,
  Subfolder$inboundSchema,
  Subfolder$Outbound,
  Subfolder$outboundSchema,
} from "./subfolder.js";
import {
  Thumbnail,
  Thumbnail$inboundSchema,
  Thumbnail$Outbound,
  Thumbnail$outboundSchema,
} from "./thumbnail.js";

/**
 * A string representing what type of media this is.
 */
export const MediaIndexType = {
  Video: "Video",
  Audio: "Audio",
  Image: "Image",
  PdfDocument: "PdfDocument",
  MicrosoftOfficeDocument: "MicrosoftOfficeDocument",
  Swf: "Swf",
  UnknownType: "UnknownType",
} as const;
/**
 * A string representing what type of media this is.
 */
export type MediaIndexType = ClosedEnum<typeof MediaIndexType>;

/**
 * Post upload processing status. - `queued`: the file is waiting in the queue to be processed. - `processing`: the file is actively being processed. - `ready`: the file has been fully processed and is ready for embedding and viewing. - `failed`: the file was unable to be processed (usually a format or size error).
 *
 * @remarks
 */
export const MediaIndexStatus = {
  Queued: "queued",
  Processing: "processing",
  Ready: "ready",
  Failed: "failed",
} as const;
/**
 * Post upload processing status. - `queued`: the file is waiting in the queue to be processed. - `processing`: the file is actively being processed. - `ready`: the file has been fully processed and is ready for embedding and viewing. - `failed`: the file was unable to be processed (usually a format or size error).
 *
 * @remarks
 */
export type MediaIndexStatus = ClosedEnum<typeof MediaIndexStatus>;

export type MediaIndex = {
  /**
   * A unique numeric identifier for the media within the system.
   */
  id?: number | undefined;
  /**
   * The display name of the media.
   */
  name?: string | undefined;
  /**
   * A string representing what type of media this is.
   */
  type?: MediaIndexType | undefined;
  /**
   * Whether or not the media is archived, either true or false.
   */
  archived?: boolean | undefined;
  /**
   * The date when the media was originally uploaded.
   */
  created?: Date | undefined;
  /**
   * The date when the media was last changed.
   */
  updated?: Date | undefined;
  /**
   * Specifies the length (in seconds) for audio and video files. Specifies number of pages in the document. Omitted for other types of media.
   */
  duration?: number | undefined;
  /**
   * DEPRECATED: If you want to programmatically embed videos, follow the construct an embed code guide.
   *
   * @remarks
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  embedCode?: string | undefined;
  /**
   * A unique alphanumeric identifier for this media.
   */
  hashedId?: string | undefined;
  /**
   * A description for the media which usually appears near the top of the sidebar on the media's page.
   */
  description?: string | undefined;
  /**
   * A floating point value between 0 and 1 that indicates the progress of the processing for this file.
   */
  progress?: number | undefined;
  /**
   * Post upload processing status. - `queued`: the file is waiting in the queue to be processed. - `processing`: the file is actively being processed. - `ready`: the file has been fully processed and is ready for embedding and viewing. - `failed`: the file was unable to be processed (usually a format or size error).
   *
   * @remarks
   */
  status?: MediaIndexStatus | undefined;
  /**
   * The title of the section in which the media appears. This attribute is omitted if the media is not in a section (default).
   */
  section?: string | undefined;
  thumbnail?: Thumbnail | undefined;
  project?: SlimProjectSchemaProject | undefined;
  /**
   * An array of the assets available for this media.
   */
  assets?: Array<Asset> | undefined;
  /**
   * A subfolder within a project that contains media files.
   */
  subfolder?: Subfolder | undefined;
  /**
   * A cursor for stable pagination based on current `sort_by` order. You can pass this to `cursor_before` or `cursor_after` as a parameter to fetch the records before or after this record in the same sort order. This is only populated if medias were fetched with `use_cursor`, or `cursor_before` or `cursor_after`.
   */
  cursor?: string | null | undefined;
};

/** @internal */
export const MediaIndexType$inboundSchema: z.ZodNativeEnum<
  typeof MediaIndexType
> = z.nativeEnum(MediaIndexType);

/** @internal */
export const MediaIndexType$outboundSchema: z.ZodNativeEnum<
  typeof MediaIndexType
> = MediaIndexType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MediaIndexType$ {
  /** @deprecated use `MediaIndexType$inboundSchema` instead. */
  export const inboundSchema = MediaIndexType$inboundSchema;
  /** @deprecated use `MediaIndexType$outboundSchema` instead. */
  export const outboundSchema = MediaIndexType$outboundSchema;
}

/** @internal */
export const MediaIndexStatus$inboundSchema: z.ZodNativeEnum<
  typeof MediaIndexStatus
> = z.nativeEnum(MediaIndexStatus);

/** @internal */
export const MediaIndexStatus$outboundSchema: z.ZodNativeEnum<
  typeof MediaIndexStatus
> = MediaIndexStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MediaIndexStatus$ {
  /** @deprecated use `MediaIndexStatus$inboundSchema` instead. */
  export const inboundSchema = MediaIndexStatus$inboundSchema;
  /** @deprecated use `MediaIndexStatus$outboundSchema` instead. */
  export const outboundSchema = MediaIndexStatus$outboundSchema;
}

/** @internal */
export const MediaIndex$inboundSchema: z.ZodType<
  MediaIndex,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.number().int().optional(),
  name: z.string().optional(),
  type: MediaIndexType$inboundSchema.optional(),
  archived: z.boolean().optional(),
  created: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  updated: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  duration: z.number().optional(),
  embedCode: z.string().optional(),
  hashed_id: z.string().optional(),
  description: z.string().optional(),
  progress: z.number().optional(),
  status: MediaIndexStatus$inboundSchema.optional(),
  section: z.string().optional(),
  thumbnail: Thumbnail$inboundSchema.optional(),
  project: SlimProjectSchemaProject$inboundSchema.optional(),
  assets: z.array(Asset$inboundSchema).optional(),
  subfolder: Subfolder$inboundSchema.optional(),
  cursor: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "hashed_id": "hashedId",
  });
});

/** @internal */
export type MediaIndex$Outbound = {
  id?: number | undefined;
  name?: string | undefined;
  type?: string | undefined;
  archived?: boolean | undefined;
  created?: string | undefined;
  updated?: string | undefined;
  duration?: number | undefined;
  embedCode?: string | undefined;
  hashed_id?: string | undefined;
  description?: string | undefined;
  progress?: number | undefined;
  status?: string | undefined;
  section?: string | undefined;
  thumbnail?: Thumbnail$Outbound | undefined;
  project?: SlimProjectSchemaProject$Outbound | undefined;
  assets?: Array<Asset$Outbound> | undefined;
  subfolder?: Subfolder$Outbound | undefined;
  cursor?: string | null | undefined;
};

/** @internal */
export const MediaIndex$outboundSchema: z.ZodType<
  MediaIndex$Outbound,
  z.ZodTypeDef,
  MediaIndex
> = z.object({
  id: z.number().int().optional(),
  name: z.string().optional(),
  type: MediaIndexType$outboundSchema.optional(),
  archived: z.boolean().optional(),
  created: z.date().transform(v => v.toISOString()).optional(),
  updated: z.date().transform(v => v.toISOString()).optional(),
  duration: z.number().optional(),
  embedCode: z.string().optional(),
  hashedId: z.string().optional(),
  description: z.string().optional(),
  progress: z.number().optional(),
  status: MediaIndexStatus$outboundSchema.optional(),
  section: z.string().optional(),
  thumbnail: Thumbnail$outboundSchema.optional(),
  project: SlimProjectSchemaProject$outboundSchema.optional(),
  assets: z.array(Asset$outboundSchema).optional(),
  subfolder: Subfolder$outboundSchema.optional(),
  cursor: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    hashedId: "hashed_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MediaIndex$ {
  /** @deprecated use `MediaIndex$inboundSchema` instead. */
  export const inboundSchema = MediaIndex$inboundSchema;
  /** @deprecated use `MediaIndex$outboundSchema` instead. */
  export const outboundSchema = MediaIndex$outboundSchema;
  /** @deprecated use `MediaIndex$Outbound` instead. */
  export type Outbound = MediaIndex$Outbound;
}

export function mediaIndexToJSON(mediaIndex: MediaIndex): string {
  return JSON.stringify(MediaIndex$outboundSchema.parse(mediaIndex));
}

export function mediaIndexFromJSON(
  jsonString: string,
): SafeParseResult<MediaIndex, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MediaIndex$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MediaIndex' from JSON`,
  );
}
