/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  ProjectSharingSchema,
  ProjectSharingSchema$inboundSchema,
  ProjectSharingSchema$Outbound,
  ProjectSharingSchema$outboundSchema,
} from "./projectsharingschema.js";

/**
 * The response includes a link for the user to access the project.
 */
export type CreateProjectSharingResponse = {
  project?: string | undefined;
  sharing?: ProjectSharingSchema | undefined;
};

/** @internal */
export const CreateProjectSharingResponse$inboundSchema: z.ZodType<
  CreateProjectSharingResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  project: z.string().optional(),
  sharing: ProjectSharingSchema$inboundSchema.optional(),
});

/** @internal */
export type CreateProjectSharingResponse$Outbound = {
  project?: string | undefined;
  sharing?: ProjectSharingSchema$Outbound | undefined;
};

/** @internal */
export const CreateProjectSharingResponse$outboundSchema: z.ZodType<
  CreateProjectSharingResponse$Outbound,
  z.ZodTypeDef,
  CreateProjectSharingResponse
> = z.object({
  project: z.string().optional(),
  sharing: ProjectSharingSchema$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectSharingResponse$ {
  /** @deprecated use `CreateProjectSharingResponse$inboundSchema` instead. */
  export const inboundSchema = CreateProjectSharingResponse$inboundSchema;
  /** @deprecated use `CreateProjectSharingResponse$outboundSchema` instead. */
  export const outboundSchema = CreateProjectSharingResponse$outboundSchema;
  /** @deprecated use `CreateProjectSharingResponse$Outbound` instead. */
  export type Outbound = CreateProjectSharingResponse$Outbound;
}

export function createProjectSharingResponseToJSON(
  createProjectSharingResponse: CreateProjectSharingResponse,
): string {
  return JSON.stringify(
    CreateProjectSharingResponse$outboundSchema.parse(
      createProjectSharingResponse,
    ),
  );
}

export function createProjectSharingResponseFromJSON(
  jsonString: string,
): SafeParseResult<CreateProjectSharingResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateProjectSharingResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateProjectSharingResponse' from JSON`,
  );
}
