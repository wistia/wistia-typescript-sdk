/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * Input data for creating or updating a subfolder.
 */
export type SubfolderInput = {
  /**
   * The display name of the subfolder.
   */
  name: string;
  /**
   * A description for the subfolder.
   */
  description?: string | null | undefined;
};

/** @internal */
export const SubfolderInput$inboundSchema: z.ZodType<
  SubfolderInput,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  description: z.nullable(z.string()).optional(),
});

/** @internal */
export type SubfolderInput$Outbound = {
  name: string;
  description?: string | null | undefined;
};

/** @internal */
export const SubfolderInput$outboundSchema: z.ZodType<
  SubfolderInput$Outbound,
  z.ZodTypeDef,
  SubfolderInput
> = z.object({
  name: z.string(),
  description: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubfolderInput$ {
  /** @deprecated use `SubfolderInput$inboundSchema` instead. */
  export const inboundSchema = SubfolderInput$inboundSchema;
  /** @deprecated use `SubfolderInput$outboundSchema` instead. */
  export const outboundSchema = SubfolderInput$outboundSchema;
  /** @deprecated use `SubfolderInput$Outbound` instead. */
  export type Outbound = SubfolderInput$Outbound;
}

export function subfolderInputToJSON(subfolderInput: SubfolderInput): string {
  return JSON.stringify(SubfolderInput$outboundSchema.parse(subfolderInput));
}

export function subfolderInputFromJSON(
  jsonString: string,
): SafeParseResult<SubfolderInput, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SubfolderInput$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SubfolderInput' from JSON`,
  );
}
