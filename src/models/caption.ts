/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type Caption = {
  /**
   * English name of the language.
   */
  englishName?: string | undefined;
  /**
   * Native name of the language.
   */
  nativeName?: string | undefined;
  /**
   * A 3 character language code as specified by ISO-639â€“2.
   */
  language: string;
  /**
   * The text of the captions for the specified language in SRT format.
   */
  text?: string | undefined;
  isDraft: boolean;
  /**
   * The unique hashed identifier of the time-coded transcript.
   */
  id: string;
};

/** @internal */
export const Caption$inboundSchema: z.ZodType<Caption, z.ZodTypeDef, unknown> =
  z.object({
    english_name: z.string().optional(),
    native_name: z.string().optional(),
    language: z.string(),
    text: z.string().optional(),
    is_draft: z.boolean(),
    id: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "english_name": "englishName",
      "native_name": "nativeName",
      "is_draft": "isDraft",
    });
  });

/** @internal */
export type Caption$Outbound = {
  english_name?: string | undefined;
  native_name?: string | undefined;
  language: string;
  text?: string | undefined;
  is_draft: boolean;
  id: string;
};

/** @internal */
export const Caption$outboundSchema: z.ZodType<
  Caption$Outbound,
  z.ZodTypeDef,
  Caption
> = z.object({
  englishName: z.string().optional(),
  nativeName: z.string().optional(),
  language: z.string(),
  text: z.string().optional(),
  isDraft: z.boolean(),
  id: z.string(),
}).transform((v) => {
  return remap$(v, {
    englishName: "english_name",
    nativeName: "native_name",
    isDraft: "is_draft",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Caption$ {
  /** @deprecated use `Caption$inboundSchema` instead. */
  export const inboundSchema = Caption$inboundSchema;
  /** @deprecated use `Caption$outboundSchema` instead. */
  export const outboundSchema = Caption$outboundSchema;
  /** @deprecated use `Caption$Outbound` instead. */
  export type Outbound = Caption$Outbound;
}

export function captionToJSON(caption: Caption): string {
  return JSON.stringify(Caption$outboundSchema.parse(caption));
}

export function captionFromJSON(
  jsonString: string,
): SafeParseResult<Caption, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Caption$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Caption' from JSON`,
  );
}
