/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  LocalizationTranscript,
  LocalizationTranscript$inboundSchema,
  LocalizationTranscript$Outbound,
  LocalizationTranscript$outboundSchema,
} from "./localizationtranscript.js";
import {
  SourceMedia,
  SourceMedia$inboundSchema,
  SourceMedia$Outbound,
  SourceMedia$outboundSchema,
} from "./sourcemedia.js";

export type LocalizationWithPurchaseData = {
  /**
   * A unique alphanumeric identifier for this localization.
   */
  hashedId: string;
  /**
   * A 3-character language code as specified by IETF.
   */
  languageCode: string;
  /**
   * A 2-character language code as specified by ISO-639â€“2.
   */
  iso6392LanguageCode: string;
  /**
   * The name of the language in English.
   */
  languageName: string;
  /**
   * The name of the language in the language of the localization.
   */
  nativeLanguageName: string;
  /**
   * The date when the localization was created.
   */
  createdAt: Date;
  /**
   * The date when the localization was last updated.
   */
  updatedAt: Date;
  /**
   * The date when the localization was ordered.
   */
  orderedAt: Date | null;
  /**
   * The date when the localization was enabled.
   */
  enabledAt: Date | null;
  /**
   * Whether or not the localization is enabled.
   */
  enabled: boolean;
  /**
   * The media that the localization is associated with.
   */
  sourceMedia: SourceMedia;
  /**
   * The transcript for the localization. Selectively serialized in some endpoints. See properties for endpoint.
   */
  transcript?: LocalizationTranscript | null | undefined;
  /**
   * Whether or not the dubbing will be automatically enabled when completed.
   */
  autoEnableDubbing: boolean;
  /**
   * The expected number of minutes that will be billed for the dubbing.
   */
  expectedBilledMinutes: number | null;
  /**
   * The expected price per minute that will be billed for the dubbing.
   */
  expectedBilledPricePerMinute: number | null;
  /**
   * The expected total price that will be billed for the dubbing.
   */
  expectedBilledPrice: number | null;
  /**
   * The date when the dubbing was billed.
   */
  billedAt: Date | null;
};

/** @internal */
export const LocalizationWithPurchaseData$inboundSchema: z.ZodType<
  LocalizationWithPurchaseData,
  z.ZodTypeDef,
  unknown
> = z.object({
  hashed_id: z.string(),
  language_code: z.string(),
  iso639_2_language_code: z.string(),
  language_name: z.string(),
  native_language_name: z.string(),
  created_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  updated_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ordered_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ),
  enabled_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ),
  enabled: z.boolean(),
  source_media: SourceMedia$inboundSchema,
  transcript: z.nullable(LocalizationTranscript$inboundSchema).optional(),
  auto_enable_dubbing: z.boolean(),
  expected_billed_minutes: z.nullable(z.number()),
  expected_billed_price_per_minute: z.nullable(z.number()),
  expected_billed_price: z.nullable(z.number()),
  billed_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ),
}).transform((v) => {
  return remap$(v, {
    "hashed_id": "hashedId",
    "language_code": "languageCode",
    "iso639_2_language_code": "iso6392LanguageCode",
    "language_name": "languageName",
    "native_language_name": "nativeLanguageName",
    "created_at": "createdAt",
    "updated_at": "updatedAt",
    "ordered_at": "orderedAt",
    "enabled_at": "enabledAt",
    "source_media": "sourceMedia",
    "auto_enable_dubbing": "autoEnableDubbing",
    "expected_billed_minutes": "expectedBilledMinutes",
    "expected_billed_price_per_minute": "expectedBilledPricePerMinute",
    "expected_billed_price": "expectedBilledPrice",
    "billed_at": "billedAt",
  });
});

/** @internal */
export type LocalizationWithPurchaseData$Outbound = {
  hashed_id: string;
  language_code: string;
  iso639_2_language_code: string;
  language_name: string;
  native_language_name: string;
  created_at: string;
  updated_at: string;
  ordered_at: string | null;
  enabled_at: string | null;
  enabled: boolean;
  source_media: SourceMedia$Outbound;
  transcript?: LocalizationTranscript$Outbound | null | undefined;
  auto_enable_dubbing: boolean;
  expected_billed_minutes: number | null;
  expected_billed_price_per_minute: number | null;
  expected_billed_price: number | null;
  billed_at: string | null;
};

/** @internal */
export const LocalizationWithPurchaseData$outboundSchema: z.ZodType<
  LocalizationWithPurchaseData$Outbound,
  z.ZodTypeDef,
  LocalizationWithPurchaseData
> = z.object({
  hashedId: z.string(),
  languageCode: z.string(),
  iso6392LanguageCode: z.string(),
  languageName: z.string(),
  nativeLanguageName: z.string(),
  createdAt: z.date().transform(v => v.toISOString()),
  updatedAt: z.date().transform(v => v.toISOString()),
  orderedAt: z.nullable(z.date().transform(v => v.toISOString())),
  enabledAt: z.nullable(z.date().transform(v => v.toISOString())),
  enabled: z.boolean(),
  sourceMedia: SourceMedia$outboundSchema,
  transcript: z.nullable(LocalizationTranscript$outboundSchema).optional(),
  autoEnableDubbing: z.boolean(),
  expectedBilledMinutes: z.nullable(z.number()),
  expectedBilledPricePerMinute: z.nullable(z.number()),
  expectedBilledPrice: z.nullable(z.number()),
  billedAt: z.nullable(z.date().transform(v => v.toISOString())),
}).transform((v) => {
  return remap$(v, {
    hashedId: "hashed_id",
    languageCode: "language_code",
    iso6392LanguageCode: "iso639_2_language_code",
    languageName: "language_name",
    nativeLanguageName: "native_language_name",
    createdAt: "created_at",
    updatedAt: "updated_at",
    orderedAt: "ordered_at",
    enabledAt: "enabled_at",
    sourceMedia: "source_media",
    autoEnableDubbing: "auto_enable_dubbing",
    expectedBilledMinutes: "expected_billed_minutes",
    expectedBilledPricePerMinute: "expected_billed_price_per_minute",
    expectedBilledPrice: "expected_billed_price",
    billedAt: "billed_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LocalizationWithPurchaseData$ {
  /** @deprecated use `LocalizationWithPurchaseData$inboundSchema` instead. */
  export const inboundSchema = LocalizationWithPurchaseData$inboundSchema;
  /** @deprecated use `LocalizationWithPurchaseData$outboundSchema` instead. */
  export const outboundSchema = LocalizationWithPurchaseData$outboundSchema;
  /** @deprecated use `LocalizationWithPurchaseData$Outbound` instead. */
  export type Outbound = LocalizationWithPurchaseData$Outbound;
}

export function localizationWithPurchaseDataToJSON(
  localizationWithPurchaseData: LocalizationWithPurchaseData,
): string {
  return JSON.stringify(
    LocalizationWithPurchaseData$outboundSchema.parse(
      localizationWithPurchaseData,
    ),
  );
}

export function localizationWithPurchaseDataFromJSON(
  jsonString: string,
): SafeParseResult<LocalizationWithPurchaseData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LocalizationWithPurchaseData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LocalizationWithPurchaseData' from JSON`,
  );
}
