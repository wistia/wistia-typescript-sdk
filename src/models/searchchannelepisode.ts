/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type SearchChannelEpisode = {
  /**
   * A unique numeric identifier for the channel episode within the system.
   */
  id: number;
  /**
   * A unique alphanumeric identifier for this channel episode.
   */
  hashedId: string;
  /**
   * The title of the channel episode.
   */
  title?: string | null | undefined;
  /**
   * The episode notes for the channel episode.
   */
  description: string;
  /**
   * The description of the channel episode.
   */
  summary: string;
  /**
   * The hashed ID of the channel this episode belongs to.
   */
  channelHashedId: string;
  /**
   * The hashed ID of the media associated with this channel episode.
   */
  mediaHashedId: string;
  /**
   * Whether the channel episode is published.
   */
  published: boolean;
  /**
   * The date when the channel episode was originally created.
   */
  created: Date;
  /**
   * The date when the channel episode was last updated.
   */
  updated: Date;
  /**
   * The scheduled publish date (only present if scheduled).
   */
  publishAt?: Date | null | undefined;
};

/** @internal */
export const SearchChannelEpisode$inboundSchema: z.ZodType<
  SearchChannelEpisode,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.number().int(),
  hashedId: z.string(),
  title: z.nullable(z.string()).optional(),
  description: z.string(),
  summary: z.string(),
  channelHashedId: z.string(),
  mediaHashedId: z.string(),
  published: z.boolean(),
  created: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  updated: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  publish_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "publish_at": "publishAt",
  });
});

/** @internal */
export type SearchChannelEpisode$Outbound = {
  id: number;
  hashedId: string;
  title?: string | null | undefined;
  description: string;
  summary: string;
  channelHashedId: string;
  mediaHashedId: string;
  published: boolean;
  created: string;
  updated: string;
  publish_at?: string | null | undefined;
};

/** @internal */
export const SearchChannelEpisode$outboundSchema: z.ZodType<
  SearchChannelEpisode$Outbound,
  z.ZodTypeDef,
  SearchChannelEpisode
> = z.object({
  id: z.number().int(),
  hashedId: z.string(),
  title: z.nullable(z.string()).optional(),
  description: z.string(),
  summary: z.string(),
  channelHashedId: z.string(),
  mediaHashedId: z.string(),
  published: z.boolean(),
  created: z.date().transform(v => v.toISOString()),
  updated: z.date().transform(v => v.toISOString()),
  publishAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
}).transform((v) => {
  return remap$(v, {
    publishAt: "publish_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchChannelEpisode$ {
  /** @deprecated use `SearchChannelEpisode$inboundSchema` instead. */
  export const inboundSchema = SearchChannelEpisode$inboundSchema;
  /** @deprecated use `SearchChannelEpisode$outboundSchema` instead. */
  export const outboundSchema = SearchChannelEpisode$outboundSchema;
  /** @deprecated use `SearchChannelEpisode$Outbound` instead. */
  export type Outbound = SearchChannelEpisode$Outbound;
}

export function searchChannelEpisodeToJSON(
  searchChannelEpisode: SearchChannelEpisode,
): string {
  return JSON.stringify(
    SearchChannelEpisode$outboundSchema.parse(searchChannelEpisode),
  );
}

export function searchChannelEpisodeFromJSON(
  jsonString: string,
): SafeParseResult<SearchChannelEpisode, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SearchChannelEpisode$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SearchChannelEpisode' from JSON`,
  );
}
