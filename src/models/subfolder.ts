/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * A subfolder within a project that contains media files.
 */
export type Subfolder = {
  /**
   * A unique alphanumeric identifier for this subfolder.
   */
  hashedId: string;
  /**
   * The display name of the subfolder.
   */
  name?: string | null | undefined;
  /**
   * A description for the subfolder.
   */
  description?: string | null | undefined;
  /**
   * The position of this subfolder within its project, used for ordering.
   */
  position: number | null;
  /**
   * The date when the subfolder was created.
   */
  created: Date | null;
  /**
   * The date when the subfolder was last modified.
   */
  updated: Date | null;
};

/** @internal */
export const Subfolder$inboundSchema: z.ZodType<
  Subfolder,
  z.ZodTypeDef,
  unknown
> = z.object({
  hashed_id: z.string(),
  name: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  position: z.nullable(z.number().int()),
  created: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ),
  updated: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ),
}).transform((v) => {
  return remap$(v, {
    "hashed_id": "hashedId",
  });
});

/** @internal */
export type Subfolder$Outbound = {
  hashed_id: string;
  name?: string | null | undefined;
  description?: string | null | undefined;
  position: number | null;
  created: string | null;
  updated: string | null;
};

/** @internal */
export const Subfolder$outboundSchema: z.ZodType<
  Subfolder$Outbound,
  z.ZodTypeDef,
  Subfolder
> = z.object({
  hashedId: z.string(),
  name: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  position: z.nullable(z.number().int()),
  created: z.nullable(z.date().transform(v => v.toISOString())),
  updated: z.nullable(z.date().transform(v => v.toISOString())),
}).transform((v) => {
  return remap$(v, {
    hashedId: "hashed_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Subfolder$ {
  /** @deprecated use `Subfolder$inboundSchema` instead. */
  export const inboundSchema = Subfolder$inboundSchema;
  /** @deprecated use `Subfolder$outboundSchema` instead. */
  export const outboundSchema = Subfolder$outboundSchema;
  /** @deprecated use `Subfolder$Outbound` instead. */
  export type Outbound = Subfolder$Outbound;
}

export function subfolderToJSON(subfolder: Subfolder): string {
  return JSON.stringify(Subfolder$outboundSchema.parse(subfolder));
}

export function subfolderFromJSON(
  jsonString: string,
): SafeParseResult<Subfolder, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Subfolder$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Subfolder' from JSON`,
  );
}
