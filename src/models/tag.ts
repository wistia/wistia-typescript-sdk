/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type Tag = {
  /**
   * The tagâ€™s display name.
   */
  name?: string | undefined;
  /**
   * The number of different medias that have been associated with this tag.
   */
  taggingsCount?: number | undefined;
  /**
   * The date that the tag was originally created.
   */
  created?: Date | undefined;
  /**
   * The date that the tag was last updated.
   */
  updated?: Date | undefined;
};

/** @internal */
export const Tag$inboundSchema: z.ZodType<Tag, z.ZodTypeDef, unknown> = z
  .object({
    name: z.string().optional(),
    taggingsCount: z.number().int().optional(),
    created: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updated: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type Tag$Outbound = {
  name?: string | undefined;
  taggingsCount?: number | undefined;
  created?: string | undefined;
  updated?: string | undefined;
};

/** @internal */
export const Tag$outboundSchema: z.ZodType<Tag$Outbound, z.ZodTypeDef, Tag> = z
  .object({
    name: z.string().optional(),
    taggingsCount: z.number().int().optional(),
    created: z.date().transform(v => v.toISOString()).optional(),
    updated: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Tag$ {
  /** @deprecated use `Tag$inboundSchema` instead. */
  export const inboundSchema = Tag$inboundSchema;
  /** @deprecated use `Tag$outboundSchema` instead. */
  export const outboundSchema = Tag$outboundSchema;
  /** @deprecated use `Tag$Outbound` instead. */
  export type Outbound = Tag$Outbound;
}

export function tagToJSON(tag: Tag): string {
  return JSON.stringify(Tag$outboundSchema.parse(tag));
}

export function tagFromJSON(
  jsonString: string,
): SafeParseResult<Tag, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Tag$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Tag' from JSON`,
  );
}
