/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type UpdateSharingRequestSharing = {
  /**
   * Allow the user or group to share the project with others.
   */
  canShare?: boolean | undefined;
  /**
   * Allow the user or group to download media from the project.
   */
  canDownload?: boolean | undefined;
  /**
   * Allow the user or group to upload media to the project.
   */
  canUpload?: boolean | undefined;
  /**
   * Give this user admin rights to the project.
   */
  isAdmin?: boolean | undefined;
};

export type UpdateSharingRequest = {
  sharing?: UpdateSharingRequestSharing | undefined;
};

/** @internal */
export const UpdateSharingRequestSharing$inboundSchema: z.ZodType<
  UpdateSharingRequestSharing,
  z.ZodTypeDef,
  unknown
> = z.object({
  canShare: z.boolean().optional(),
  canDownload: z.boolean().optional(),
  canUpload: z.boolean().optional(),
  isAdmin: z.boolean().optional(),
});

/** @internal */
export type UpdateSharingRequestSharing$Outbound = {
  canShare?: boolean | undefined;
  canDownload?: boolean | undefined;
  canUpload?: boolean | undefined;
  isAdmin?: boolean | undefined;
};

/** @internal */
export const UpdateSharingRequestSharing$outboundSchema: z.ZodType<
  UpdateSharingRequestSharing$Outbound,
  z.ZodTypeDef,
  UpdateSharingRequestSharing
> = z.object({
  canShare: z.boolean().optional(),
  canDownload: z.boolean().optional(),
  canUpload: z.boolean().optional(),
  isAdmin: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateSharingRequestSharing$ {
  /** @deprecated use `UpdateSharingRequestSharing$inboundSchema` instead. */
  export const inboundSchema = UpdateSharingRequestSharing$inboundSchema;
  /** @deprecated use `UpdateSharingRequestSharing$outboundSchema` instead. */
  export const outboundSchema = UpdateSharingRequestSharing$outboundSchema;
  /** @deprecated use `UpdateSharingRequestSharing$Outbound` instead. */
  export type Outbound = UpdateSharingRequestSharing$Outbound;
}

export function updateSharingRequestSharingToJSON(
  updateSharingRequestSharing: UpdateSharingRequestSharing,
): string {
  return JSON.stringify(
    UpdateSharingRequestSharing$outboundSchema.parse(
      updateSharingRequestSharing,
    ),
  );
}

export function updateSharingRequestSharingFromJSON(
  jsonString: string,
): SafeParseResult<UpdateSharingRequestSharing, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateSharingRequestSharing$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateSharingRequestSharing' from JSON`,
  );
}

/** @internal */
export const UpdateSharingRequest$inboundSchema: z.ZodType<
  UpdateSharingRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  sharing: z.lazy(() => UpdateSharingRequestSharing$inboundSchema).optional(),
});

/** @internal */
export type UpdateSharingRequest$Outbound = {
  sharing?: UpdateSharingRequestSharing$Outbound | undefined;
};

/** @internal */
export const UpdateSharingRequest$outboundSchema: z.ZodType<
  UpdateSharingRequest$Outbound,
  z.ZodTypeDef,
  UpdateSharingRequest
> = z.object({
  sharing: z.lazy(() => UpdateSharingRequestSharing$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateSharingRequest$ {
  /** @deprecated use `UpdateSharingRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateSharingRequest$inboundSchema;
  /** @deprecated use `UpdateSharingRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateSharingRequest$outboundSchema;
  /** @deprecated use `UpdateSharingRequest$Outbound` instead. */
  export type Outbound = UpdateSharingRequest$Outbound;
}

export function updateSharingRequestToJSON(
  updateSharingRequest: UpdateSharingRequest,
): string {
  return JSON.stringify(
    UpdateSharingRequest$outboundSchema.parse(updateSharingRequest),
  );
}

export function updateSharingRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateSharingRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateSharingRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateSharingRequest' from JSON`,
  );
}
