/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  NoAssetMediaSchemaMedia,
  NoAssetMediaSchemaMedia$inboundSchema,
  NoAssetMediaSchemaMedia$Outbound,
  NoAssetMediaSchemaMedia$outboundSchema,
} from "./noassetmediaschemamedia.js";

export type ProjectWithMedias = {
  /**
   * A unique numeric identifier for the project within the system.
   */
  id: number;
  /**
   * The project's display name.
   */
  name: string;
  /**
   * The project's description.
   */
  description?: string | null | undefined;
  medias?: Array<NoAssetMediaSchemaMedia> | undefined;
  /**
   * The number of different medias that have been uploaded to the project.
   */
  mediaCount: number;
  /**
   * The date that the project was originally created.
   */
  created: Date;
  /**
   * The date that the project was last updated.
   */
  updated: Date;
  /**
   * A private hashed id, uniquely identifying the project within the system.
   */
  hashedId: string;
  /**
   * A boolean indicating whether the project is available for public (anonymous) viewing.
   */
  public: boolean;
  /**
   * If the project is public, this field contains a string representing the ID used for referencing the project in public URLs.
   */
  publicId: string | null;
  anonymousCanUpload?: boolean | undefined;
  anonymousCanDownload?: boolean | undefined;
};

/** @internal */
export const ProjectWithMedias$inboundSchema: z.ZodType<
  ProjectWithMedias,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.number().int(),
  name: z.string(),
  description: z.nullable(z.string()).optional(),
  medias: z.array(NoAssetMediaSchemaMedia$inboundSchema).optional(),
  mediaCount: z.number().int(),
  created: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  updated: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  hashedId: z.string(),
  public: z.boolean(),
  publicId: z.nullable(z.string()),
  anonymousCanUpload: z.boolean().optional(),
  anonymousCanDownload: z.boolean().optional(),
});

/** @internal */
export type ProjectWithMedias$Outbound = {
  id: number;
  name: string;
  description?: string | null | undefined;
  medias?: Array<NoAssetMediaSchemaMedia$Outbound> | undefined;
  mediaCount: number;
  created: string;
  updated: string;
  hashedId: string;
  public: boolean;
  publicId: string | null;
  anonymousCanUpload?: boolean | undefined;
  anonymousCanDownload?: boolean | undefined;
};

/** @internal */
export const ProjectWithMedias$outboundSchema: z.ZodType<
  ProjectWithMedias$Outbound,
  z.ZodTypeDef,
  ProjectWithMedias
> = z.object({
  id: z.number().int(),
  name: z.string(),
  description: z.nullable(z.string()).optional(),
  medias: z.array(NoAssetMediaSchemaMedia$outboundSchema).optional(),
  mediaCount: z.number().int(),
  created: z.date().transform(v => v.toISOString()),
  updated: z.date().transform(v => v.toISOString()),
  hashedId: z.string(),
  public: z.boolean(),
  publicId: z.nullable(z.string()),
  anonymousCanUpload: z.boolean().optional(),
  anonymousCanDownload: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ProjectWithMedias$ {
  /** @deprecated use `ProjectWithMedias$inboundSchema` instead. */
  export const inboundSchema = ProjectWithMedias$inboundSchema;
  /** @deprecated use `ProjectWithMedias$outboundSchema` instead. */
  export const outboundSchema = ProjectWithMedias$outboundSchema;
  /** @deprecated use `ProjectWithMedias$Outbound` instead. */
  export type Outbound = ProjectWithMedias$Outbound;
}

export function projectWithMediasToJSON(
  projectWithMedias: ProjectWithMedias,
): string {
  return JSON.stringify(
    ProjectWithMedias$outboundSchema.parse(projectWithMedias),
  );
}

export function projectWithMediasFromJSON(
  jsonString: string,
): SafeParseResult<ProjectWithMedias, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ProjectWithMedias$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ProjectWithMedias' from JSON`,
  );
}
