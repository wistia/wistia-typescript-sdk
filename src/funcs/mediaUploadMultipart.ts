/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { WistiaCore } from "../core.js";
import { appendForm } from "../lib/encodings.js";
import {
  getContentTypeFromFileName,
  readableStreamToArrayBuffer,
} from "../lib/files.js";
import * as M from "../lib/matchers.js";
import { compactMap } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { RequestOptions } from "../lib/sdks.js";
import { extractSecurity, resolveGlobalSecurity } from "../lib/security.js";
import { pathToFunc } from "../lib/url.js";
import {
  ConnectionError,
  InvalidRequestError,
  RequestAbortedError,
  RequestTimeoutError,
  UnexpectedClientError,
} from "../models/errors/httpclienterrors.js";
import * as errors from "../models/errors/index.js";
import { ResponseValidationError } from "../models/errors/responsevalidationerror.js";
import { SDKValidationError } from "../models/errors/sdkvalidationerror.js";
import { WistiaError } from "../models/errors/wistiaerror.js";
import * as operations from "../models/operations/index.js";
import { PostMultipartServerList } from "../models/operations/postmultipart.js";
import { APICall, APIPromise } from "../types/async.js";
import { isBlobLike } from "../types/blobs.js";
import { Result } from "../types/fp.js";
import { isReadableStream } from "../types/streams.js";

/**
 * Upload or Import Media
 *
 * @remarks
 * Endpoint to upload media files from a local system or import from a web URL.
 *
 * - Use `multipart/form-data` with a `file` parameter to upload from local system
 * - Use `application/x-www-form-urlencoded` with a `url` parameter to import from web URL
 */
export function mediaUploadMultipart(
  client: WistiaCore,
  request?: operations.PostMultipartRequest | undefined,
  options?: RequestOptions,
): APIPromise<
  Result<
    operations.PostMultipartResponse,
    | errors.PostMultipartBadRequestError
    | WistiaError
    | ResponseValidationError
    | ConnectionError
    | RequestAbortedError
    | RequestTimeoutError
    | InvalidRequestError
    | UnexpectedClientError
    | SDKValidationError
  >
> {
  return new APIPromise($do(
    client,
    request,
    options,
  ));
}

async function $do(
  client: WistiaCore,
  request?: operations.PostMultipartRequest | undefined,
  options?: RequestOptions,
): Promise<
  [
    Result<
      operations.PostMultipartResponse,
      | errors.PostMultipartBadRequestError
      | WistiaError
      | ResponseValidationError
      | ConnectionError
      | RequestAbortedError
      | RequestTimeoutError
      | InvalidRequestError
      | UnexpectedClientError
      | SDKValidationError
    >,
    APICall,
  ]
> {
  const parsed = safeParse(
    request,
    (value) =>
      operations.PostMultipartRequest$outboundSchema.optional().parse(value),
    "Input validation failed",
  );
  if (!parsed.ok) {
    return [parsed, { status: "invalid" }];
  }
  const payload = parsed.value;
  const body = new FormData();
  if (payload != null) {
    if (isBlobLike(payload?.file)) {
      appendForm(body, "file", payload?.file);
    } else if (isReadableStream(payload?.file.content)) {
      const buffer = await readableStreamToArrayBuffer(payload?.file.content);
      const contentType = getContentTypeFromFileName(payload?.file.fileName)
        || "application/octet-stream";
      const blob = new Blob([buffer], { type: contentType });
      appendForm(body, "file", blob, payload?.file.fileName);
    } else {
      const contentType = getContentTypeFromFileName(payload?.file.fileName)
        || "application/octet-stream";
      appendForm(
        body,
        "file",
        new Blob([payload?.file.content], { type: contentType }),
        payload?.file.fileName,
      );
    }
    if (payload?.access_token !== undefined) {
      appendForm(body, "access_token", payload?.access_token);
    }
    if (payload?.contact_id !== undefined) {
      appendForm(body, "contact_id", payload?.contact_id);
    }
    if (payload?.description !== undefined) {
      appendForm(body, "description", payload?.description);
    }
    if (payload?.name !== undefined) {
      appendForm(body, "name", payload?.name);
    }
    if (payload?.project_id !== undefined) {
      appendForm(body, "project_id", payload?.project_id);
    }
  }

  const baseURL = options?.serverURL
    || pathToFunc(PostMultipartServerList[0], { charEncoding: "percent" })();

  const path = pathToFunc("/")();

  const headers = new Headers(compactMap({
    Accept: "application/json",
  }));

  const secConfig = await extractSecurity(client._options.bearerAuth);
  const securityInput = secConfig == null ? {} : { bearerAuth: secConfig };
  const requestSecurity = resolveGlobalSecurity(securityInput);

  const context = {
    options: client._options,
    baseURL: baseURL ?? "",
    operationID: "post_/_multipart",
    oAuth2Scopes: [],

    resolvedSecurity: requestSecurity,

    securitySource: client._options.bearerAuth,
    retryConfig: options?.retries
      || client._options.retryConfig
      || { strategy: "none" },
    retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
  };

  const requestRes = client._createRequest(context, {
    security: requestSecurity,
    method: "POST",
    baseURL: baseURL,
    path: path,
    headers: headers,
    body: body,
    userAgent: client._options.userAgent,
    timeoutMs: options?.timeoutMs || client._options.timeoutMs || -1,
  }, options);
  if (!requestRes.ok) {
    return [requestRes, { status: "invalid" }];
  }
  const req = requestRes.value;

  const doResult = await client._do(req, {
    context,
    errorCodes: ["400", "401", "4XX", "5XX"],
    retryConfig: context.retryConfig,
    retryCodes: context.retryCodes,
  });
  if (!doResult.ok) {
    return [doResult, { status: "request-error", request: req }];
  }
  const response = doResult.value;

  const responseFields = {
    HttpMeta: { Response: response, Request: req },
  };

  const [result] = await M.match<
    operations.PostMultipartResponse,
    | errors.PostMultipartBadRequestError
    | WistiaError
    | ResponseValidationError
    | ConnectionError
    | RequestAbortedError
    | RequestTimeoutError
    | InvalidRequestError
    | UnexpectedClientError
    | SDKValidationError
  >(
    M.json(200, operations.PostMultipartResponse$inboundSchema),
    M.jsonErr(400, errors.PostMultipartBadRequestError$inboundSchema),
    M.fail([401, "4XX"]),
    M.fail("5XX"),
  )(response, req, { extraFields: responseFields });
  if (!result.ok) {
    return [result, { status: "complete", request: req, response }];
  }

  return [result, { status: "complete", request: req, response }];
}
