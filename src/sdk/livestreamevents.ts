/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { liveStreamEventsDeleteLiveStreamEventsId } from "../funcs/liveStreamEventsDeleteLiveStreamEventsId.js";
import { liveStreamEventsGetLiveStreamEvents } from "../funcs/liveStreamEventsGetLiveStreamEvents.js";
import { liveStreamEventsGetLiveStreamEventsId } from "../funcs/liveStreamEventsGetLiveStreamEventsId.js";
import { liveStreamEventsPostLiveStreamEvents } from "../funcs/liveStreamEventsPostLiveStreamEvents.js";
import { liveStreamEventsPutLiveStreamEventsId } from "../funcs/liveStreamEventsPutLiveStreamEventsId.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class LiveStreamEvents extends ClientSDK {
  /**
   * Live Stream Events List
   *
   * @remarks
   * Use this endpoint to request a list of Live Stream Events in your Wistia account. This request supports paging and sorting.
   *
   * ## Requires api token with one of the following permissions
   * ```
   * Read, update & delete anything
   * Read all data
   * Read all project and video data
   * ```
   */
  async getLiveStreamEvents(
    request?: operations.GetLiveStreamEventsRequest | undefined,
    options?: RequestOptions,
  ): Promise<Array<models.LiveStreamEvent>> {
    return unwrapAsync(liveStreamEventsGetLiveStreamEvents(
      this,
      request,
      options,
    ));
  }

  /**
   * Live Stream Event Create
   *
   * @remarks
   * Create a new live stream event. The event will be created synchronously and return the event details with audience and host links.
   *
   * ## Requires api token with one of the following permissions
   * ```
   * Read, update & delete anything
   * ```
   *
   * ## Rate Limiting
   * This endpoint is rate limited to 60 requests per minute per IP address.
   *
   * ## Feature Access
   * This endpoint requires the live streaming feature to be enabled on your account plan.
   */
  async postLiveStreamEvents(
    request: models.CreateLiveStreamEvent,
    options?: RequestOptions,
  ): Promise<models.CreateLiveStreamEventResponse> {
    return unwrapAsync(liveStreamEventsPostLiveStreamEvents(
      this,
      request,
      options,
    ));
  }

  /**
   * Live Stream Event Show
   *
   * @remarks
   * Retrieve information for a single live stream event.
   *
   * ## Requires api token with one of the following permissions
   * ```
   * Read, update & delete anything
   * Read all data
   * Read all project and video data
   * ```
   */
  async getLiveStreamEventsId(
    request: operations.GetLiveStreamEventsIdRequest,
    options?: RequestOptions,
  ): Promise<models.LiveStreamEvent> {
    return unwrapAsync(liveStreamEventsGetLiveStreamEventsId(
      this,
      request,
      options,
    ));
  }

  /**
   * Live Stream Event Update
   *
   * @remarks
   * Update an existing live stream event.
   *
   * ## Requires api token with one of the following permissions
   * ```
   * Read, update & delete anything
   * ```
   */
  async putLiveStreamEventsId(
    request: operations.PutLiveStreamEventsIdRequest,
    options?: RequestOptions,
  ): Promise<models.LiveStreamEvent> {
    return unwrapAsync(liveStreamEventsPutLiveStreamEventsId(
      this,
      request,
      options,
    ));
  }

  /**
   * Live Stream Event Delete
   *
   * @remarks
   * Delete an existing live stream event.
   *
   * ## Requires api token with one of the following permissions
   * ```
   * Read, update & delete anything
   * ```
   */
  async deleteLiveStreamEventsId(
    request: operations.DeleteLiveStreamEventsIdRequest,
    options?: RequestOptions,
  ): Promise<models.LiveStreamEvent> {
    return unwrapAsync(liveStreamEventsDeleteLiveStreamEventsId(
      this,
      request,
      options,
    ));
  }
}
