/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { projectSharingsDeleteProjectsProjectIdSharingsSharingId } from "../funcs/projectSharingsDeleteProjectsProjectIdSharingsSharingId.js";
import { projectSharingsGetProjectsProjectIdSharings } from "../funcs/projectSharingsGetProjectsProjectIdSharings.js";
import { projectSharingsGetProjectsProjectIdSharingsSharingId } from "../funcs/projectSharingsGetProjectsProjectIdSharingsSharingId.js";
import { projectSharingsPostProjectsProjectIdSharings } from "../funcs/projectSharingsPostProjectsProjectIdSharings.js";
import { projectSharingsPutProjectsProjectIdSharingsSharingId } from "../funcs/projectSharingsPutProjectsProjectIdSharingsSharingId.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class ProjectSharings extends ClientSDK {
  /**
   * Project Sharing List
   *
   * @remarks
   * A sharing is an object that links either a contact or a contact group to a project, including information about the contacts' permissions to that project.
   * Retrieve a list of all sharings for a given project. Supports paging and sorting.
   *
   * ## Requires api token with one of the following permissions
   * ```
   * Read, update & delete anything
   * Read all data
   * ```
   */
  async getProjectsProjectIdSharings(
    request: operations.GetProjectsProjectIdSharingsRequest,
    options?: RequestOptions,
  ): Promise<Array<models.ProjectSharingDetail>> {
    return unwrapAsync(projectSharingsGetProjectsProjectIdSharings(
      this,
      request,
      options,
    ));
  }

  /**
   * Project Sharing Create
   *
   * @remarks
   * Create a new sharing object for a project by specifying the email of the person to share with and other optional parameters.
   *
   * ## Requires api token with one of the following permissions
   * ```
   * Read, update & delete anything
   * ```
   */
  async postProjectsProjectIdSharings(
    request: operations.PostProjectsProjectIdSharingsRequest,
    options?: RequestOptions,
  ): Promise<operations.PostProjectsProjectIdSharingsResponse> {
    return unwrapAsync(projectSharingsPostProjectsProjectIdSharings(
      this,
      request,
      options,
    ));
  }

  /**
   * Project Sharing Show
   *
   * @remarks
   * Retrieve the details of a specific sharing object for a given project.
   *
   * ## Requires api token with one of the following permissions
   * ```
   * Read, update & delete anything
   * Read all data
   * ```
   */
  async getProjectsProjectIdSharingsSharingId(
    request: operations.GetProjectsProjectIdSharingsSharingIdRequest,
    options?: RequestOptions,
  ): Promise<models.ProjectSharingDetail> {
    return unwrapAsync(projectSharingsGetProjectsProjectIdSharingsSharingId(
      this,
      request,
      options,
    ));
  }

  /**
   * Project Sharing Update
   *
   * @remarks
   * Update a sharing on a project.
   *
   * ## Requires api token with one of the following permissions
   * ```
   * Read, update & delete anything
   * ```
   */
  async putProjectsProjectIdSharingsSharingId(
    request: operations.PutProjectsProjectIdSharingsSharingIdRequest,
    options?: RequestOptions,
  ): Promise<models.ProjectSharingSchema> {
    return unwrapAsync(projectSharingsPutProjectsProjectIdSharingsSharingId(
      this,
      request,
      options,
    ));
  }

  /**
   * Project Sharing Delete
   *
   * @remarks
   * Delete a sharing on a project.
   *
   * ## Requires api token with one of the following permissions
   * ```
   * Read, update & delete anything
   * ```
   */
  async deleteProjectsProjectIdSharingsSharingId(
    request: operations.DeleteProjectsProjectIdSharingsSharingIdRequest,
    options?: RequestOptions,
  ): Promise<models.ProjectSharingSchema> {
    return unwrapAsync(projectSharingsDeleteProjectsProjectIdSharingsSharingId(
      this,
      request,
      options,
    ));
  }
}
