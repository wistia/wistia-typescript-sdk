/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { allowedDomainsDeleteAllowedDomainsDomain } from "../funcs/allowedDomainsDeleteAllowedDomainsDomain.js";
import { allowedDomainsGetAllowedDomains } from "../funcs/allowedDomainsGetAllowedDomains.js";
import { allowedDomainsGetAllowedDomainsDomain } from "../funcs/allowedDomainsGetAllowedDomainsDomain.js";
import { allowedDomainsPostAllowedDomains } from "../funcs/allowedDomainsPostAllowedDomains.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class AllowedDomains extends ClientSDK {
  /**
   * Allowed Domains List
   *
   * @remarks
   * List all allowed domains for the account.
   *
   * ## Requires api token with one of the following permissions
   * ```
   * Read, update & delete anything
   * ```
   */
  async getAllowedDomains(
    request?: operations.GetAllowedDomainsRequest | undefined,
    options?: RequestOptions,
  ): Promise<Array<models.AllowedDomain>> {
    return unwrapAsync(allowedDomainsGetAllowedDomains(
      this,
      request,
      options,
    ));
  }

  /**
   * Allowed Domain Create
   *
   * @remarks
   * Create a new allowed domain for the account.
   *
   * ## Requires api token with one of the following permissions
   * ```
   * Read, update & delete anything
   * ```
   */
  async postAllowedDomains(
    request: operations.PostAllowedDomainsRequest,
    options?: RequestOptions,
  ): Promise<models.AllowedDomain> {
    return unwrapAsync(allowedDomainsPostAllowedDomains(
      this,
      request,
      options,
    ));
  }

  /**
   * Allowed Domain Show
   *
   * @remarks
   * Get details for a specific allowed domain.
   *
   * ## Requires api token with one of the following permissions
   * ```
   * Read, update & delete anything
   * ```
   */
  async getAllowedDomainsDomain(
    request: operations.GetAllowedDomainsDomainRequest,
    options?: RequestOptions,
  ): Promise<models.AllowedDomain> {
    return unwrapAsync(allowedDomainsGetAllowedDomainsDomain(
      this,
      request,
      options,
    ));
  }

  /**
   * Allowed Domain Delete
   *
   * @remarks
   * Delete an allowed domain from the account.
   *
   * ## Requires api token with one of the following permissions
   * ```
   * Read, update & delete anything
   * ```
   */
  async deleteAllowedDomainsDomain(
    request: operations.DeleteAllowedDomainsDomainRequest,
    options?: RequestOptions,
  ): Promise<models.AllowedDomain> {
    return unwrapAsync(allowedDomainsDeleteAllowedDomainsDomain(
      this,
      request,
      options,
    ));
  }
}
