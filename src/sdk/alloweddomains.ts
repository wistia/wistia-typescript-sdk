/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { allowedDomainsCreate } from "../funcs/allowedDomainsCreate.js";
import { allowedDomainsDelete } from "../funcs/allowedDomainsDelete.js";
import { allowedDomainsGet } from "../funcs/allowedDomainsGet.js";
import { allowedDomainsList } from "../funcs/allowedDomainsList.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class AllowedDomains extends ClientSDK {
  /**
   * Allowed Domains List
   *
   * @remarks
   * List all allowed domains for the account.
   *
   * ## Requires api token with one of the following permissions
   * ```
   * Read, update & delete anything
   * ```
   */
  async list(
    request?: operations.GetAllowedDomainsRequest | undefined,
    options?: RequestOptions,
  ): Promise<Array<models.AllowedDomain>> {
    return unwrapAsync(allowedDomainsList(
      this,
      request,
      options,
    ));
  }

  /**
   * Allowed Domain Create
   *
   * @remarks
   * Create a new allowed domain for the account.
   *
   * ## Requires api token with one of the following permissions
   * ```
   * Read, update & delete anything
   * ```
   */
  async create(
    request: operations.PostAllowedDomainsRequest,
    options?: RequestOptions,
  ): Promise<models.AllowedDomain> {
    return unwrapAsync(allowedDomainsCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * Allowed Domain Show
   *
   * @remarks
   * Get details for a specific allowed domain.
   *
   * ## Requires api token with one of the following permissions
   * ```
   * Read, update & delete anything
   * ```
   */
  async get(
    request: operations.GetAllowedDomainsDomainRequest,
    options?: RequestOptions,
  ): Promise<models.AllowedDomain> {
    return unwrapAsync(allowedDomainsGet(
      this,
      request,
      options,
    ));
  }

  /**
   * Allowed Domain Delete
   *
   * @remarks
   * Delete an allowed domain from the account.
   *
   * ## Requires api token with one of the following permissions
   * ```
   * Read, update & delete anything
   * ```
   */
  async delete(
    request: operations.DeleteAllowedDomainsDomainRequest,
    options?: RequestOptions,
  ): Promise<models.AllowedDomain> {
    return unwrapAsync(allowedDomainsDelete(
      this,
      request,
      options,
    ));
  }
}
