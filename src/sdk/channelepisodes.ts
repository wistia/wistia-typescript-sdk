/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { channelEpisodesCreate } from "../funcs/channelEpisodesCreate.js";
import { channelEpisodesGet } from "../funcs/channelEpisodesGet.js";
import { channelEpisodesList } from "../funcs/channelEpisodesList.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class ChannelEpisodes extends ClientSDK {
  /**
   * Channel Episodes Show
   *
   * @remarks
   * Returns the Channel Episode associated with the hashedId.
   *
   * ## Requires api token with one of the following permissions
   * ```
   * Read, update & delete anything
   * Read all data
   * Read all project and video data
   * ```
   */
  async get(
    request:
      operations.GetChannelsChannelHashedIdChannelEpisodesChannelEpisodeIdRequest,
    options?: RequestOptions,
  ): Promise<models.ChannelEpisode> {
    return unwrapAsync(channelEpisodesGet(
      this,
      request,
      options,
    ));
  }

  /**
   * Channel Episode Create
   *
   * @remarks
   * Creates a new channel episode in a channel.
   *
   * ## Requires api token with one of the following permissions
   * ```
   * Read, update & delete anything
   * ```
   */
  async create(
    request: operations.PostChannelsChannelHashedIdChannelEpisodesRequest,
    options?: RequestOptions,
  ): Promise<models.ChannelEpisode> {
    return unwrapAsync(channelEpisodesCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * Channel Episodes List
   *
   * @remarks
   * Returns all the Channel Episodes associated with the account, and allows for filtering by a particular channel.
   *
   * ## Requires api token with one of the following permissions
   * ```
   * Read, update & delete anything
   * Read all data
   * Read all project and video data
   * ```
   */
  async list(
    request?: operations.GetChannelEpisodesRequest | undefined,
    options?: RequestOptions,
  ): Promise<Array<models.ChannelEpisode>> {
    return unwrapAsync(channelEpisodesList(
      this,
      request,
      options,
    ));
  }
}
