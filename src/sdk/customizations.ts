/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { customizationsDeleteMediasMediaIdCustomizations } from "../funcs/customizationsDeleteMediasMediaIdCustomizations.js";
import { customizationsGetMediasMediaIdCustomizations } from "../funcs/customizationsGetMediasMediaIdCustomizations.js";
import { customizationsPostMediasMediaIdCustomizations } from "../funcs/customizationsPostMediasMediaIdCustomizations.js";
import { customizationsPutMediasMediaIdCustomizations } from "../funcs/customizationsPutMediasMediaIdCustomizations.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Customizations extends ClientSDK {
  /**
   * Customizations Show
   *
   * @remarks
   * Fetches explicitly defined customizations for the video.
   *
   * ## Requires api token with one of the following permissions
   * ```
   * Read, update & delete anything
   * Read all data
   * Read all project and video data
   * ```
   */
  async getMediasMediaIdCustomizations(
    request: operations.GetMediasMediaIdCustomizationsRequest,
    options?: RequestOptions,
  ): Promise<models.VideoCustomizationResponse> {
    return unwrapAsync(customizationsGetMediasMediaIdCustomizations(
      this,
      request,
      options,
    ));
  }

  /**
   * Customizations Create
   *
   * @remarks
   * Set customizations for a video. Replaces the customizations explicitly set for this video.
   *
   * ## Requires api token with one of the following permissions
   * ```
   * Read, update & delete anything
   * ```
   */
  async postMediasMediaIdCustomizations(
    request: operations.PostMediasMediaIdCustomizationsRequest,
    options?: RequestOptions,
  ): Promise<models.VideoCustomizationResponse> {
    return unwrapAsync(customizationsPostMediasMediaIdCustomizations(
      this,
      request,
      options,
    ));
  }

  /**
   * Customizations Update
   *
   * @remarks
   * Allows for partial updates on a videoâ€™s customizations. If a value is null, then that key will be deleted from the saved customizations. If it is not null, that value will be set.
   *
   * ## Requires api token with one of the following permissions
   * ```
   * Read, update & delete anything
   * ```
   */
  async putMediasMediaIdCustomizations(
    request: operations.PutMediasMediaIdCustomizationsRequest,
    options?: RequestOptions,
  ): Promise<models.VideoCustomizationResponse> {
    return unwrapAsync(customizationsPutMediasMediaIdCustomizations(
      this,
      request,
      options,
    ));
  }

  /**
   * Customizations Delete
   *
   * @remarks
   * Deletes all explicit customizations for a video, making it act as if it has never been customized.
   *
   * ## Requires api token with one of the following permissions
   * ```
   * Read, update & delete anything
   * ```
   */
  async deleteMediasMediaIdCustomizations(
    request: operations.DeleteMediasMediaIdCustomizationsRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(customizationsDeleteMediasMediaIdCustomizations(
      this,
      request,
      options,
    ));
  }
}
