/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { projectsDeleteProjectsId } from "../funcs/projectsDeleteProjectsId.js";
import { projectsGetProjects } from "../funcs/projectsGetProjects.js";
import { projectsGetProjectsId } from "../funcs/projectsGetProjectsId.js";
import { projectsPostProjects } from "../funcs/projectsPostProjects.js";
import { projectsPostProjectsIdCopy } from "../funcs/projectsPostProjectsIdCopy.js";
import { projectsPutProjectsId } from "../funcs/projectsPutProjectsId.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Projects extends ClientSDK {
  /**
   * Project List
   *
   * @remarks
   * Use this endpoint to request a list of Projects in your Wistia account. This request supports paging and sorting.
   *
   * ## Requires api token with one of the following permissions
   * ```
   * Read, update & delete anything
   * Read all data
   * Read all project and video data
   * ```
   */
  async getProjects(
    request?: operations.GetProjectsRequest | undefined,
    options?: RequestOptions,
  ): Promise<Array<models.Project>> {
    return unwrapAsync(projectsGetProjects(
      this,
      request,
      options,
    ));
  }

  /**
   * Project Create
   *
   * @remarks
   * Create a new project. If the project is created successfully the Location HTTP header will point to the new project.
   *
   * ## Requires api token with one of the following permissions
   * ```
   * Read, update & delete anything
   * ```
   */
  async postProjects(
    request?: models.CreateProject | undefined,
    options?: RequestOptions,
  ): Promise<models.Project> {
    return unwrapAsync(projectsPostProjects(
      this,
      request,
      options,
    ));
  }

  /**
   * Project Show
   *
   * @remarks
   * Retrieve a single project. Projects#show uses pagination by default - we’ll return up to the first 500 medias in a Project. If you have more than 500 medias in a Project, you’ll need to add a query param, page=2 to get the second page of medias (and the third, etc.). You can check how many pages you will need by looking at the media_count in your first request.
   *
   * ## Requires api token with one of the following permissions
   * ```
   * Read, update & delete anything
   * Read all data
   * Read all project and video data
   * ```
   */
  async getProjectsId(
    request: operations.GetProjectsIdRequest,
    options?: RequestOptions,
  ): Promise<models.ProjectWithMedias> {
    return unwrapAsync(projectsGetProjectsId(
      this,
      request,
      options,
    ));
  }

  /**
   * Project Update
   *
   * @remarks
   * Update a project
   *
   * ## Requires api token with one of the following permissions
   * ```
   * Read, update & delete anything
   * ```
   */
  async putProjectsId(
    request: operations.PutProjectsIdRequest,
    options?: RequestOptions,
  ): Promise<models.Project> {
    return unwrapAsync(projectsPutProjectsId(
      this,
      request,
      options,
    ));
  }

  /**
   * Project Delete
   *
   * @remarks
   * Delete a project
   *
   * ## Requires api token with one of the following permissions
   * ```
   * Read, update & delete anything
   * ```
   */
  async deleteProjectsId(
    request: operations.DeleteProjectsIdRequest,
    options?: RequestOptions,
  ): Promise<models.Project> {
    return unwrapAsync(projectsDeleteProjectsId(
      this,
      request,
      options,
    ));
  }

  /**
   * Project Copy
   *
   * @remarks
   * This method does not copy the project’s sharing information (i.e. users that could see the old project will not automatically be able to see the new one).
   * For the request you can specify the owner of a new project by passing an optional parameter. The person you specify must be a Manager in the account.
   * For the response, the HTTP Location header will be set to the URL where the new project resource resides. The body of the response will contain an object representing the new copy of the project that was just created.
   *
   * ## Requires api token with one of the following permissions
   * ```
   * Read, update & delete anything
   * ```
   */
  async postProjectsIdCopy(
    request: operations.PostProjectsIdCopyRequest,
    options?: RequestOptions,
  ): Promise<operations.PostProjectsIdCopyResponse> {
    return unwrapAsync(projectsPostProjectsIdCopy(
      this,
      request,
      options,
    ));
  }
}
