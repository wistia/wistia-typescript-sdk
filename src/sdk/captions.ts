/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { captionsCreate } from "../funcs/captionsCreate.js";
import { captionsCreateMultipart } from "../funcs/captionsCreateMultipart.js";
import { captionsDelete } from "../funcs/captionsDelete.js";
import { captionsGet, GetAcceptEnum } from "../funcs/captionsGet.js";
import { captionsList } from "../funcs/captionsList.js";
import { captionsPurchase } from "../funcs/captionsPurchase.js";
import { captionsUpdate } from "../funcs/captionsUpdate.js";
import { captionsUpdateMultipart } from "../funcs/captionsUpdateMultipart.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export { GetAcceptEnum } from "../funcs/captionsGet.js";

export class Captions extends ClientSDK {
  /**
   * Captions List
   *
   * @remarks
   * Returns all the captions associated with a specified video.
   * If captions do not exist for this video, the response will be an empty JSON array.
   * If this video does not exist, the response will be an empty HTTP 404 Not Found.
   *
   * ## Requires api token with one of the following permissions
   * ```
   * Read, update & delete anything
   * Read all data
   * Read all project and video data
   * ```
   */
  async list(
    request: operations.GetMediasMediaHashedIdCaptionsRequest,
    options?: RequestOptions,
  ): Promise<Array<models.Caption>> {
    return unwrapAsync(captionsList(
      this,
      request,
      options,
    ));
  }

  /**
   * Captions Create
   *
   * @remarks
   * Adds captions to a specified video by providing an SRT file or its contents directly.
   *
   * ## Requires api token with one of the following permissions
   * ```
   * Read, update & delete anything
   * ```
   */
  async createMultipart(
    request: operations.PostMediasMediaHashedIdCaptionsMultipartRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(captionsCreateMultipart(
      this,
      request,
      options,
    ));
  }

  /**
   * Captions Create
   *
   * @remarks
   * Adds captions to a specified video by providing an SRT file or its contents directly.
   *
   * ## Requires api token with one of the following permissions
   * ```
   * Read, update & delete anything
   * ```
   */
  async create(
    request: operations.PostMediasMediaHashedIdCaptionsRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(captionsCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * Captions Purchase
   *
   * @remarks
   * This method is for purchasing English captions for a video. The request will charge the credit card on the account if successful. A saved credit card is required to use this endpoint.
   *
   * ## Requires api token with one of the following permissions
   * ```
   * Read, update & delete anything
   * ```
   */
  async purchase(
    request: operations.PostMediasMediaHashedIdCaptionsPurchaseRequest,
    options?: RequestOptions,
  ): Promise<operations.PostMediasMediaHashedIdCaptionsPurchaseResponse> {
    return unwrapAsync(captionsPurchase(
      this,
      request,
      options,
    ));
  }

  /**
   * Captions Show
   *
   * @remarks
   * Returns a video's captions in the specified language.
   * Supports multiple formats: JSON (default), SRT, VTT, and TXT.
   * Use file extensions (.srt, .vtt, .txt) or Accept headers to specify format.
   *
   * ## Requires api token with one of the following permissions
   * ```
   * Read, update & delete anything
   * Read all data
   * Read all project and video data
   * ```
   */
  async get(
    request: operations.GetMediasMediaHashedIdCaptionsLanguageCodeRequest,
    options?: RequestOptions & { acceptHeaderOverride?: GetAcceptEnum },
  ): Promise<operations.GetMediasMediaHashedIdCaptionsLanguageCodeResponse> {
    return unwrapAsync(captionsGet(
      this,
      request,
      options,
    ));
  }

  /**
   * Captions Update
   *
   * @remarks
   * This method is for replacing the captions on a video for the specified language.
   *
   * ## Requires api token with one of the following permissions
   * ```
   * Read, update & delete anything
   * ```
   */
  async update(
    request: operations.PutMediasMediaHashedIdCaptionsLanguageCodeRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(captionsUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * Captions Update
   *
   * @remarks
   * This method is for replacing the captions on a video for the specified language.
   *
   * ## Requires api token with one of the following permissions
   * ```
   * Read, update & delete anything
   * ```
   */
  async updateMultipart(
    request:
      operations.PutMediasMediaHashedIdCaptionsLanguageCodeMultipartRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(captionsUpdateMultipart(
      this,
      request,
      options,
    ));
  }

  /**
   * Captions Delete
   *
   * @remarks
   * This method is for removing the captions file from a video for the specified language.
   *
   * ## Requires api token with one of the following permissions
   * ```
   * Read, update & delete anything
   * ```
   */
  async delete(
    request: operations.DeleteMediasMediaHashedIdCaptionsLanguageCodeRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(captionsDelete(
      this,
      request,
      options,
    ));
  }
}
