/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { captionsDeleteMediasMediaHashedIdCaptionsLanguageCode } from "../funcs/captionsDeleteMediasMediaHashedIdCaptionsLanguageCode.js";
import { captionsGetMediasMediaHashedIdCaptions } from "../funcs/captionsGetMediasMediaHashedIdCaptions.js";
import {
  captionsGetMediasMediaHashedIdCaptionsLanguageCode,
  GetMediasMediaHashedIdCaptionsLanguageCodeAcceptEnum,
} from "../funcs/captionsGetMediasMediaHashedIdCaptionsLanguageCode.js";
import { captionsPostMediasMediaHashedIdCaptions } from "../funcs/captionsPostMediasMediaHashedIdCaptions.js";
import { captionsPostMediasMediaHashedIdCaptionsMultipart } from "../funcs/captionsPostMediasMediaHashedIdCaptionsMultipart.js";
import { captionsPostMediasMediaHashedIdCaptionsPurchase } from "../funcs/captionsPostMediasMediaHashedIdCaptionsPurchase.js";
import { captionsPutMediasMediaHashedIdCaptionsLanguageCode } from "../funcs/captionsPutMediasMediaHashedIdCaptionsLanguageCode.js";
import { captionsPutMediasMediaHashedIdCaptionsLanguageCodeMultipart } from "../funcs/captionsPutMediasMediaHashedIdCaptionsLanguageCodeMultipart.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export { GetMediasMediaHashedIdCaptionsLanguageCodeAcceptEnum } from "../funcs/captionsGetMediasMediaHashedIdCaptionsLanguageCode.js";

export class Captions extends ClientSDK {
  /**
   * Captions List
   *
   * @remarks
   * Returns all the captions associated with a specified video.
   * If captions do not exist for this video, the response will be an empty JSON array.
   * If this video does not exist, the response will be an empty HTTP 404 Not Found.
   *
   * ## Requires api token with one of the following permissions
   * ```
   * Read, update & delete anything
   * Read all data
   * Read all project and video data
   * ```
   */
  async getMediasMediaHashedIdCaptions(
    request: operations.GetMediasMediaHashedIdCaptionsRequest,
    options?: RequestOptions,
  ): Promise<Array<models.Caption>> {
    return unwrapAsync(captionsGetMediasMediaHashedIdCaptions(
      this,
      request,
      options,
    ));
  }

  /**
   * Captions Create
   *
   * @remarks
   * Adds captions to a specified video by providing an SRT file or its contents directly.
   *
   * ## Requires api token with one of the following permissions
   * ```
   * Read, update & delete anything
   * ```
   */
  async postMediasMediaHashedIdCaptionsMultipart(
    request: operations.PostMediasMediaHashedIdCaptionsMultipartRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(captionsPostMediasMediaHashedIdCaptionsMultipart(
      this,
      request,
      options,
    ));
  }

  /**
   * Captions Create
   *
   * @remarks
   * Adds captions to a specified video by providing an SRT file or its contents directly.
   *
   * ## Requires api token with one of the following permissions
   * ```
   * Read, update & delete anything
   * ```
   */
  async postMediasMediaHashedIdCaptions(
    request: operations.PostMediasMediaHashedIdCaptionsRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(captionsPostMediasMediaHashedIdCaptions(
      this,
      request,
      options,
    ));
  }

  /**
   * Captions Purchase
   *
   * @remarks
   * This method is for purchasing English captions for a video. The request will charge the credit card on the account if successful. A saved credit card is required to use this endpoint.
   *
   * ## Requires api token with one of the following permissions
   * ```
   * Read, update & delete anything
   * ```
   */
  async postMediasMediaHashedIdCaptionsPurchase(
    request: operations.PostMediasMediaHashedIdCaptionsPurchaseRequest,
    options?: RequestOptions,
  ): Promise<operations.PostMediasMediaHashedIdCaptionsPurchaseResponse> {
    return unwrapAsync(captionsPostMediasMediaHashedIdCaptionsPurchase(
      this,
      request,
      options,
    ));
  }

  /**
   * Captions Show
   *
   * @remarks
   * Returns a video's captions in the specified language.
   * Supports multiple formats: JSON (default), SRT, VTT, and TXT.
   * Use file extensions (.srt, .vtt, .txt) or Accept headers to specify format.
   *
   * ## Requires api token with one of the following permissions
   * ```
   * Read, update & delete anything
   * Read all data
   * Read all project and video data
   * ```
   */
  async getMediasMediaHashedIdCaptionsLanguageCode(
    request: operations.GetMediasMediaHashedIdCaptionsLanguageCodeRequest,
    options?: RequestOptions & {
      acceptHeaderOverride?:
        GetMediasMediaHashedIdCaptionsLanguageCodeAcceptEnum;
    },
  ): Promise<operations.GetMediasMediaHashedIdCaptionsLanguageCodeResponse> {
    return unwrapAsync(captionsGetMediasMediaHashedIdCaptionsLanguageCode(
      this,
      request,
      options,
    ));
  }

  /**
   * Captions Update
   *
   * @remarks
   * This method is for replacing the captions on a video for the specified language.
   *
   * ## Requires api token with one of the following permissions
   * ```
   * Read, update & delete anything
   * ```
   */
  async putMediasMediaHashedIdCaptionsLanguageCode(
    request: operations.PutMediasMediaHashedIdCaptionsLanguageCodeRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(captionsPutMediasMediaHashedIdCaptionsLanguageCode(
      this,
      request,
      options,
    ));
  }

  /**
   * Captions Update
   *
   * @remarks
   * This method is for replacing the captions on a video for the specified language.
   *
   * ## Requires api token with one of the following permissions
   * ```
   * Read, update & delete anything
   * ```
   */
  async putMediasMediaHashedIdCaptionsLanguageCodeMultipart(
    request:
      operations.PutMediasMediaHashedIdCaptionsLanguageCodeMultipartRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(
      captionsPutMediasMediaHashedIdCaptionsLanguageCodeMultipart(
        this,
        request,
        options,
      ),
    );
  }

  /**
   * Captions Delete
   *
   * @remarks
   * This method is for removing the captions file from a video for the specified language.
   *
   * ## Requires api token with one of the following permissions
   * ```
   * Read, update & delete anything
   * ```
   */
  async deleteMediasMediaHashedIdCaptionsLanguageCode(
    request: operations.DeleteMediasMediaHashedIdCaptionsLanguageCodeRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(captionsDeleteMediasMediaHashedIdCaptionsLanguageCode(
      this,
      request,
      options,
    ));
  }
}
