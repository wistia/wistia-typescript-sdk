/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { localizationsCreate } from "../funcs/localizationsCreate.js";
import { localizationsDelete } from "../funcs/localizationsDelete.js";
import { localizationsGet } from "../funcs/localizationsGet.js";
import { localizationsList } from "../funcs/localizationsList.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Localizations extends ClientSDK {
  /**
   * Localizations List
   *
   * @remarks
   * Obtain a list of all the localizations for a media.
   *
   * ## Requires api token with one of the following permissions
   * ```
   * Read, update & delete anything
   * Read all data
   * Read all project and video data
   * ```
   */
  async list(
    request: operations.GetMediasMediaHashedIdLocalizationsRequest,
    options?: RequestOptions,
  ): Promise<Array<models.Localization>> {
    return unwrapAsync(localizationsList(
      this,
      request,
      options,
    ));
  }

  /**
   * Localizations Create
   *
   * @remarks
   * Create a new localization.
   *
   * ## Requires api token with one of the following permissions
   * ```
   * Read, update & delete anything
   * ```
   */
  async create(
    request: operations.PostMediasMediaHashedIdLocalizationsRequest,
    options?: RequestOptions,
  ): Promise<models.LocalizationWithPurchaseData> {
    return unwrapAsync(localizationsCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * Localizations Show
   *
   * @remarks
   * Obtain detailed information about a localization.
   *
   * ## Requires api token with one of the following permissions
   * ```
   * Read, update & delete anything
   * Read all data
   * Read all project and video data
   * ```
   */
  async get(
    request:
      operations.GetMediasMediaHashedIdLocalizationsLocalizationHashedIdRequest,
    options?: RequestOptions,
  ): Promise<models.Localization> {
    return unwrapAsync(localizationsGet(
      this,
      request,
      options,
    ));
  }

  /**
   * Localizations Delete
   *
   * @remarks
   * Delete a localization.
   *
   * ## Requires api token with one of the following permissions
   * ```
   * Read, update & delete anything
   * ```
   */
  async delete(
    request:
      operations.DeleteMediasMediaHashedIdLocalizationsLocalizationHashedIdRequest,
    options?: RequestOptions,
  ): Promise<models.Localization> {
    return unwrapAsync(localizationsDelete(
      this,
      request,
      options,
    ));
  }
}
