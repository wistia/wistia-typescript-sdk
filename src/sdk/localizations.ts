/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { localizationsDeleteMediasMediaHashedIdLocalizationsLocalizationHashedId } from "../funcs/localizationsDeleteMediasMediaHashedIdLocalizationsLocalizationHashedId.js";
import { localizationsGetMediasMediaHashedIdLocalizations } from "../funcs/localizationsGetMediasMediaHashedIdLocalizations.js";
import { localizationsGetMediasMediaHashedIdLocalizationsLocalizationHashedId } from "../funcs/localizationsGetMediasMediaHashedIdLocalizationsLocalizationHashedId.js";
import { localizationsPostMediasMediaHashedIdLocalizations } from "../funcs/localizationsPostMediasMediaHashedIdLocalizations.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Localizations extends ClientSDK {
  /**
   * Localizations List
   *
   * @remarks
   * Obtain a list of all the localizations for a media.
   *
   * ## Requires api token with one of the following permissions
   * ```
   * Read, update & delete anything
   * Read all data
   * Read all project and video data
   * ```
   */
  async getMediasMediaHashedIdLocalizations(
    request: operations.GetMediasMediaHashedIdLocalizationsRequest,
    options?: RequestOptions,
  ): Promise<Array<models.Localization>> {
    return unwrapAsync(localizationsGetMediasMediaHashedIdLocalizations(
      this,
      request,
      options,
    ));
  }

  /**
   * Localizations Create
   *
   * @remarks
   * Create a new localization.
   *
   * ## Requires api token with one of the following permissions
   * ```
   * Read, update & delete anything
   * ```
   */
  async postMediasMediaHashedIdLocalizations(
    request: operations.PostMediasMediaHashedIdLocalizationsRequest,
    options?: RequestOptions,
  ): Promise<models.LocalizationWithPurchaseData> {
    return unwrapAsync(localizationsPostMediasMediaHashedIdLocalizations(
      this,
      request,
      options,
    ));
  }

  /**
   * Localizations Show
   *
   * @remarks
   * Obtain detailed information about a localization.
   *
   * ## Requires api token with one of the following permissions
   * ```
   * Read, update & delete anything
   * Read all data
   * Read all project and video data
   * ```
   */
  async getMediasMediaHashedIdLocalizationsLocalizationHashedId(
    request:
      operations.GetMediasMediaHashedIdLocalizationsLocalizationHashedIdRequest,
    options?: RequestOptions,
  ): Promise<models.Localization> {
    return unwrapAsync(
      localizationsGetMediasMediaHashedIdLocalizationsLocalizationHashedId(
        this,
        request,
        options,
      ),
    );
  }

  /**
   * Localizations Delete
   *
   * @remarks
   * Delete a localization.
   *
   * ## Requires api token with one of the following permissions
   * ```
   * Read, update & delete anything
   * ```
   */
  async deleteMediasMediaHashedIdLocalizationsLocalizationHashedId(
    request:
      operations.DeleteMediasMediaHashedIdLocalizationsLocalizationHashedIdRequest,
    options?: RequestOptions,
  ): Promise<models.Localization> {
    return unwrapAsync(
      localizationsDeleteMediasMediaHashedIdLocalizationsLocalizationHashedId(
        this,
        request,
        options,
      ),
    );
  }
}
