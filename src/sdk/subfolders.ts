/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { subfoldersDeleteProjectsProjectIdSubfoldersSubfolderId } from "../funcs/subfoldersDeleteProjectsProjectIdSubfoldersSubfolderId.js";
import { subfoldersGetProjectsProjectIdSubfolders } from "../funcs/subfoldersGetProjectsProjectIdSubfolders.js";
import { subfoldersGetProjectsProjectIdSubfoldersSubfolderId } from "../funcs/subfoldersGetProjectsProjectIdSubfoldersSubfolderId.js";
import { subfoldersPostProjectsProjectIdSubfolders } from "../funcs/subfoldersPostProjectsProjectIdSubfolders.js";
import { subfoldersPutProjectsProjectIdSubfoldersSubfolderId } from "../funcs/subfoldersPutProjectsProjectIdSubfoldersSubfolderId.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Subfolders extends ClientSDK {
  /**
   * Subfolder List
   *
   * @remarks
   * Use this endpoint to request a list of subfolders in a specific project. This request supports paging and sorting.
   *
   * ## Requires api token with one of the following permissions
   * ```
   * Read, update & delete anything
   * Read all data
   * Read all project and video data
   * ```
   */
  async getProjectsProjectIdSubfolders(
    request: operations.GetProjectsProjectIdSubfoldersRequest,
    options?: RequestOptions,
  ): Promise<Array<models.Subfolder>> {
    return unwrapAsync(subfoldersGetProjectsProjectIdSubfolders(
      this,
      request,
      options,
    ));
  }

  /**
   * Create Subfolder
   *
   * @remarks
   * Create a new subfolder within a project. The subfolder will be created with the next available position.
   *
   * ## Requires api token with one of the following permissions
   * ```
   * Read, update & delete anything
   * ```
   */
  async postProjectsProjectIdSubfolders(
    request: operations.PostProjectsProjectIdSubfoldersRequest,
    options?: RequestOptions,
  ): Promise<models.Subfolder> {
    return unwrapAsync(subfoldersPostProjectsProjectIdSubfolders(
      this,
      request,
      options,
    ));
  }

  /**
   * Show Subfolder
   *
   * @remarks
   * Retrieve detailed information about a specific subfolder, including all media files contained within it.
   *
   * ## Requires api token with one of the following permissions
   * ```
   * Read, update & delete anything
   * Read all data
   * Read all project and video data
   * ```
   */
  async getProjectsProjectIdSubfoldersSubfolderId(
    request: operations.GetProjectsProjectIdSubfoldersSubfolderIdRequest,
    options?: RequestOptions,
  ): Promise<models.SubfolderWithMedia> {
    return unwrapAsync(subfoldersGetProjectsProjectIdSubfoldersSubfolderId(
      this,
      request,
      options,
    ));
  }

  /**
   * Update Subfolder
   *
   * @remarks
   * Update a subfolder's name and/or description.
   *
   * ## Requires api token with one of the following permissions
   * ```
   * Read, update & delete anything
   * ```
   */
  async putProjectsProjectIdSubfoldersSubfolderId(
    request: operations.PutProjectsProjectIdSubfoldersSubfolderIdRequest,
    options?: RequestOptions,
  ): Promise<models.Subfolder> {
    return unwrapAsync(subfoldersPutProjectsProjectIdSubfoldersSubfolderId(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete Subfolder
   *
   * @remarks
   * Delete a subfolder from a project. All media files in the subfolder will be moved to the project's root level.
   *
   * The subfolder is soft-deleted and may be recoverable through other means, but is no longer accessible via the API.
   *
   * ## Requires api token with one of the following permissions
   * ```
   * Read, update & delete anything
   * ```
   */
  async deleteProjectsProjectIdSubfoldersSubfolderId(
    request: operations.DeleteProjectsProjectIdSubfoldersSubfolderIdRequest,
    options?: RequestOptions,
  ): Promise<models.Subfolder> {
    return unwrapAsync(subfoldersDeleteProjectsProjectIdSubfoldersSubfolderId(
      this,
      request,
      options,
    ));
  }
}
