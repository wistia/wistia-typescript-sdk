openapi: 3.0.3
info:
  title: Upload API
  version: 1.0.0
tags:
  - name: Projects
    x-displayName: Projects
  - name: Subfolders
    x-displayName: Subfolders
  - name: Project Sharings
    x-displayName: Project Sharings
  - name: Media
    x-displayName: Media
  - name: Account
    x-displayName: Account
  - name: AllowedDomains
    x-displayName: AllowedDomains
  - name: Background Job Status
    x-displayName: Background Job Status
  - name: Customizations
    x-displayName: Customizations
  - name: Captions
    x-displayName: Captions
  - name: Trims
    x-displayName: Trims
  - name: Localizations
    x-displayName: Localizations
  - name: Tags
    x-displayName: Tags
  - name: Search
    x-displayName: Search
  - name: Channels
    x-displayName: Channels
  - name: Channel Episodes
    x-displayName: Channel Episodes
  - name: Expiring Access Tokens
    x-displayName: Expiring Access Tokens
  - name: Live Stream Events
    x-displayName: Live Stream Events
  - name: Stats:Account
    x-displayName: Stats:Account
  - name: Stats:Projects
    x-displayName: Stats:Projects
  - name: Stats:Media
    x-displayName: Stats:Media
  - name: Stats:Visitors
    x-displayName: Stats:Visitors
  - name: Stats:Events
    x-displayName: Stats:Events
paths:
  /projects:
    get:
      summary: Project List
      description: >
        Use this endpoint to request a list of Projects in your Wistia account. This request supports paging and sorting.


        ## Requires api token with one of the following permissions

        ```

        Read, update & delete anything

        Read all data

        Read all project and video data

        ```

      tags:
        - Projects
      parameters:
        - name: page
          in: query
          description: Page number to retrieve
          required: false
          schema:
            type: integer
        - name: per_page
          in: query
          description: Number of projects per page
          required: false
          schema:
            type: integer
        - name: sort_by
          in: query
          description: Ordering
          required: false
          schema:
            type: string
            enum:
              - name
              - created
              - updated
              - mediaCount
              - id
        - name: sort_direction
          in: query
          description: Ordering Sort Direction (0 = desc, 1 = asc; default is 1)
          required: false
          schema:
            type: integer
            enum:
              - 0
              - 1
      responses:
        '200':
          description: A list of projects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Project'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
      security:
        - BearerAuth: []
      x-speakeasy-name-override: list
    post:
      summary: Project Create
      description: >
        Create a new project. If the project is created successfully the Location HTTP header will point to the new project.


        ## Requires api token with one of the following permissions

        ```

        Read, update & delete anything

        ```

      tags:
        - Projects
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProject'
      responses:
        '201':
          description: Project created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
      security:
        - BearerAuth: []
      x-speakeasy-name-override: create
  /projects/{id}:
    get:
      summary: Project Show
      description: >
        Retrieve a single project. Projects#show uses pagination by default - we’ll return up to the first 500 medias in a Project. If you have more than 500 medias in a Project, you’ll need to add a query param, page=2 to get the second page of medias (and the third, etc.). You can check how many pages you will need by looking at the media_count in your first request.


        ## Requires api token with one of the following permissions

        ```

        Read, update & delete anything

        Read all data

        Read all project and video data

        ```

      tags:
        - Projects
      parameters:
        - name: id
          in: path
          description: Project Hashed ID
          required: true
          schema:
            type: string
            description: Hashed ID of the project (e.g., "4d23503f70")
      responses:
        '200':
          description: A single project
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectWithMedias'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
      security:
        - BearerAuth: []
      x-speakeasy-name-override: get
    put:
      summary: Project Update
      description: |
        Update a project

        ## Requires api token with one of the following permissions
        ```
        Read, update & delete anything
        ```
      tags:
        - Projects
      parameters:
        - name: id
          in: path
          description: Project Hashed ID
          required: true
          schema:
            type: string
            description: Hashed ID of the project (e.g., "4d23503f70")
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProject'
      responses:
        '200':
          description: A single project
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
      security:
        - BearerAuth: []
      x-speakeasy-name-override: update
    delete:
      summary: Project Delete
      description: |
        Delete a project

        ## Requires api token with one of the following permissions
        ```
        Read, update & delete anything
        ```
      tags:
        - Projects
      parameters:
        - name: id
          in: path
          description: Project Hashed ID
          required: true
          schema:
            type: string
            description: Hashed ID of the project (e.g., "4d23503f70")
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
      security:
        - BearerAuth: []
      x-speakeasy-name-override: delete
  /projects/{id}/copy:
    post:
      summary: Project Copy
      description: >
        This method does not copy the project’s sharing information (i.e. users that could see the old project will not automatically be able to see the new one).

        For the request you can specify the owner of a new project by passing an optional parameter. The person you specify must be a Manager in the account.

        For the response, the HTTP Location header will be set to the URL where the new project resource resides. The body of the response will contain an object representing the new copy of the project that was just created.


        ## Requires api token with one of the following permissions

        ```

        Read, update & delete anything

        ```

      tags:
        - Projects
      parameters:
        - name: id
          in: path
          description: Project Hashed ID
          required: true
          schema:
            type: string
            description: Hashed ID of the project (e.g., "4d23503f70")
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                adminEmail:
                  type: string
                  description: >-
                    The email address of the account Manager that will be the owner of the new project. Defaults to the Account Owner if invalid or omitted.
                  example: admin@example.com
      responses:
        '201':
          description: Project copied successfully
          headers:
            Location:
              description: The URL where the new project resource resides.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
      security:
        - BearerAuth: []
      x-speakeasy-name-override: copy
  /projects/{project-id}/subfolders:
    get:
      summary: Subfolder List
      description: >
        Use this endpoint to request a list of subfolders in a specific project. This request supports paging and sorting.


        ## Requires api token with one of the following permissions

        ```

        Read, update & delete anything

        Read all data

        Read all project and video data

        ```

      tags:
        - Subfolders
      parameters:
        - name: project-id
          in: path
          description: The hashed ID of the project
          required: true
          schema:
            type: string
            example: abc123def4
        - name: page
          in: query
          description: Page number to retrieve
          required: false
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: per_page
          in: query
          description: Number of subfolders per page
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 100
        - name: sort_by
          in: query
          description: Field to sort by
          required: false
          schema:
            type: string
            enum:
              - name
              - created
              - updated
              - position
              - id
            default: position
        - name: sort_direction
          in: query
          description: Sort direction (0 = desc, 1 = asc; default is 1)
          required: false
          schema:
            type: integer
            enum:
              - 0
              - 1
            default: 1
      responses:
        '200':
          description: A list of subfolders
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Subfolder'
        '401':
          $ref: '#/components/responses/401'
        '404':
          description: Project not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Project with ID abc123def4 not found.
        '500':
          $ref: '#/components/responses/500'
      security:
        - BearerAuth: []
      x-speakeasy-name-override: list
    post:
      summary: Create Subfolder
      description: >
        Create a new subfolder within a project. The subfolder will be created with the next available position.


        ## Requires api token with one of the following permissions

        ```

        Read, update & delete anything

        ```

      tags:
        - Subfolders
      parameters:
        - name: project-id
          in: path
          description: The hashed ID of the project
          required: true
          schema:
            type: string
            example: abc123def4
      requestBody:
        description: Subfolder data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubfolderInput'
            example:
              name: Marketing Videos
              description: Collection of all marketing and promotional videos
      responses:
        '201':
          description: Subfolder created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subfolder'
        '401':
          $ref: '#/components/responses/401'
        '404':
          description: Project not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Project with ID abc123def4 not found.
        '500':
          $ref: '#/components/responses/500'
      security:
        - BearerAuth: []
      x-speakeasy-name-override: create
  /projects/{project-id}/subfolders/{subfolder-id}:
    get:
      summary: Show Subfolder
      description: >
        Retrieve detailed information about a specific subfolder, including all media files contained within it.


        ## Requires api token with one of the following permissions

        ```

        Read, update & delete anything

        Read all data

        Read all project and video data

        ```

      tags:
        - Subfolders
      parameters:
        - name: project-id
          in: path
          description: The hashed ID of the project
          required: true
          schema:
            type: string
            example: abc123def4
        - name: subfolder-id
          in: path
          description: The hashed ID of the subfolder
          required: true
          schema:
            type: string
            example: xyz789ghi0
        - name: description_format
          in: query
          description: Format for media descriptions
          required: false
          schema:
            type: string
            enum:
              - markdown
            example: markdown
      responses:
        '200':
          description: Subfolder details with contained media
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubfolderWithMedia'
        '401':
          $ref: '#/components/responses/401'
        '404':
          description: Project or subfolder not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Subfolder with ID xyz789ghi0 not found.
        '500':
          $ref: '#/components/responses/500'
      security:
        - BearerAuth: []
      x-speakeasy-name-override: get
    put:
      summary: Update Subfolder
      description: "Update a subfolder's name and/or description. \n\n## Requires api token with one of the following permissions\n```\nRead, update & delete anything\n```\n"
      tags:
        - Subfolders
      parameters:
        - name: project-id
          in: path
          description: The hashed ID of the project
          required: true
          schema:
            type: string
            example: abc123def4
        - name: subfolder-id
          in: path
          description: The hashed ID of the subfolder
          required: true
          schema:
            type: string
            example: xyz789ghi0
      requestBody:
        description: Updated subfolder data
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: The new name for the subfolder
                  example: Updated Marketing Videos
                  maxLength: 255
                description:
                  type: string
                  nullable: true
                  description: The new description for the subfolder
                  example: Updated collection of marketing materials
                  maxLength: 1000
            example:
              name: Updated Marketing Videos
              description: Updated collection of marketing materials
      responses:
        '200':
          description: Subfolder updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subfolder'
        '401':
          $ref: '#/components/responses/401'
        '404':
          description: Project or subfolder not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Subfolder with ID xyz789ghi0 not found.
        '500':
          $ref: '#/components/responses/500'
      security:
        - BearerAuth: []
      x-speakeasy-name-override: update
    delete:
      summary: Delete Subfolder
      description: >
        Delete a subfolder from a project. All media files in the subfolder will be moved to the project's root level.


        The subfolder is soft-deleted and may be recoverable through other means, but is no longer accessible via the API.


        ## Requires api token with one of the following permissions

        ```

        Read, update & delete anything

        ```

      tags:
        - Subfolders
      parameters:
        - name: project-id
          in: path
          description: The hashed ID of the project
          required: true
          schema:
            type: string
            example: abc123def4
        - name: subfolder-id
          in: path
          description: The hashed ID of the subfolder
          required: true
          schema:
            type: string
            example: xyz789ghi0
      responses:
        '200':
          description: Subfolder deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subfolder'
              example:
                id: 123
                hashed_id: xyz789ghi0
                name: Marketing Videos
                description: Collection of all marketing and promotional videos
                position: 1
                created: '2024-01-15T10:30:00+00:00'
                updated: '2024-01-20T14:45:00+00:00'
        '401':
          $ref: '#/components/responses/401'
        '404':
          description: Project or subfolder not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Subfolder with ID xyz789ghi0 not found.
        '500':
          $ref: '#/components/responses/500'
      security:
        - BearerAuth: []
      x-speakeasy-name-override: delete
  /projects/{project-id}/sharings:
    get:
      summary: Project Sharing List
      description: >
        A sharing is an object that links either a contact or a contact group to a project, including information about the contacts' permissions to that project.

        Retrieve a list of all sharings for a given project. Supports paging and sorting.


        ## Requires api token with one of the following permissions

        ```

        Read, update & delete anything

        Read all data

        ```

      tags:
        - Project Sharings
      parameters:
        - name: project-id
          in: path
          required: true
          description: Project Hashed ID
          schema:
            type: string
            description: Hashed ID of the project (e.g., "4d23503f70")
        - name: page
          in: query
          description: Page number to retrieve
          required: false
          schema:
            type: integer
        - name: per_page
          in: query
          description: Number of projects per page
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: Successfully retrieved list of sharings
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProjectSharingDetail'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
      security:
        - BearerAuth: []
      x-speakeasy-group: projectSharings
      x-speakeasy-name-override: list
    post:
      summary: Project Sharing Create
      description: >
        Create a new sharing object for a project by specifying the email of the person to share with and other optional parameters.


        ## Requires api token with one of the following permissions

        ```

        Read, update & delete anything

        ```

      tags:
        - Project Sharings
      parameters:
        - name: project-id
          in: path
          description: Hashed ID of the project to be shared
          required: true
          schema:
            type: string
            description: Hashed ID of the project (e.g., "4d23503f70")
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProjectSharing'
      responses:
        '201':
          description: Project shared successfully
          headers:
            Location:
              description: The API endpoint for the new sharing object.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectSharingResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  description: Error message detailing the reason for the bad request.
                example:
                  - email@example.com is already shared on this project.
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
      security:
        - BearerAuth: []
      x-speakeasy-group: projectSharings
      x-speakeasy-name-override: create
  /projects/{project-id}/sharings/{sharing-id}:
    get:
      summary: Project Sharing Show
      description: |
        Retrieve the details of a specific sharing object for a given project.

        ## Requires api token with one of the following permissions
        ```
        Read, update & delete anything
        Read all data
        ```
      tags:
        - Project Sharings
      parameters:
        - name: project-id
          in: path
          required: true
          description: Hashed ID for the project for which you'd like to see sharings.
          schema:
            type: string
            description: Hashed ID of the project (e.g., "4d23503f70")
        - name: sharing-id
          in: path
          required: true
          description: The ID of the specific sharing object that you want to see.
          schema:
            type: integer
      responses:
        '200':
          description: Successfully retrieved sharing details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectSharingDetail'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
      security:
        - BearerAuth: []
      x-speakeasy-group: projectSharings
      x-speakeasy-name-override: get
    put:
      summary: Project Sharing Update
      description: |
        Update a sharing on a project.

        ## Requires api token with one of the following permissions
        ```
        Read, update & delete anything
        ```
      tags:
        - Project Sharings
      parameters:
        - name: project-id
          in: path
          required: true
          description: ID of the project
          schema:
            type: string
        - name: sharing-id
          in: path
          required: true
          description: ID of the sharing to be updated
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateSharingRequest'
      responses:
        '200':
          description: Sharing updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectSharingSchema'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
      security:
        - BearerAuth: []
      x-speakeasy-group: projectSharings
      x-speakeasy-name-override: update
    delete:
      summary: Project Sharing Delete
      description: |
        Delete a sharing on a project.

        ## Requires api token with one of the following permissions
        ```
        Read, update & delete anything
        ```
      tags:
        - Project Sharings
      parameters:
        - name: project-id
          in: path
          required: true
          description: Hashed ID of the project
          schema:
            type: string
            description: Hashed ID of the project (e.g., "4d23503f70")
        - name: sharing-id
          in: path
          required: true
          description: ID of the sharing to be deleted
          schema:
            type: string
      responses:
        '200':
          description: Sharing deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectSharingSchema'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
      security:
        - BearerAuth: []
      x-speakeasy-group: projectSharings
      x-speakeasy-name-override: delete
  /medias:
    get:
      summary: Media List
      description: >
        Obtain a list of all the media in your account. For accounts with more than 100 media, you’ll want to page and sort the returned list.


        ## Requires api token with one of the following permissions

        ```

        Read, update & delete anything

        Read all data

        Read all project and video data

        ```

      tags:
        - Media
      parameters:
        - name: page
          in: query
          description: |
            The page number to retrieve. This cannot be combined with `cursor`,
            pagination.
          required: false
          schema:
            type: integer
        - name: per_page
          in: query
          description: >-
            The number of medias per page. Use this for both offset pagination and cursor pagination.
          required: false
          schema:
            type: integer
        - name: cursor
          in: query
          required: false
          description: >
            If `cursor` is set to 1 than cursor pagination is enabled and the

            first set of records are fetched up to the `per_page`. Cursor

            pagination will also be turned on if `cursor[before]` or `cursor[after]`

            are set. Records returned will have a `cursor` property set which can be used to fetch more records in the same `sort_by` ordering.

            The cursor value of the last record can be used to fetch records after the current result set and

            the cursor of the first record can be used to fetch records before the result set.


            NOTE: a cursor value is only valid if the `sort_by` value hasn't changed from the

            last fetch. For example, you cannot fetch using `sort_by` id and than pass that

            cursor value to a `sort_by` name.

          style: deepObject
          schema:
            type: object
            properties:
              enabled:
                type: integer
                enum:
                  - 0
                  - 1
                description: >
                  If `cursor[enabled]` is set to 1, the first result set will be fetched with cursor pagination enabled. This

                  values is ignored if `cursor[before]` or `cursor[after]` are set.

              before:
                type: string
                description: >
                  If `cursor[before]` is set than cursor pagination is enabled and all records

                  before the cursor up to the `per_page` are returned. This feature is useful for

                  fetching "new records", for example, in a "pull to refersh" feature when showing records in a descending

                  order.

              after:
                type: string
                description: >
                  If `cursor[after]` is set than cursor pagination is enabled and all records

                  after the cursor up to the `per_page` are returned.

        - name: sort_by
          in: query
          description: >
            Ordering. When using cursor pagination (see cursor param),

            only `id` and `created` are supported. All other sort_by options (`name`, `updated`, `position`)

            require offset pagination.

          required: false
          schema:
            type: string
            enum:
              - name
              - created
              - updated
              - position
        - name: sort_direction
          in: query
          description: Ordering Sort Direction (0 = desc, 1 = asc; default is 1)
          required: false
          schema:
            type: integer
            enum:
              - 0
              - 1
        - name: project_id
          in: query
          description: >-
            A hashed ID specifying the project from which you would like to get results.
          required: false
          schema:
            type: string
            description: Hashed ID of the project (e.g., "4d23503f70")
        - name: name
          in: query
          description: Find a media or medias whose name exactly matches this parameter.
          required: false
          schema:
            type: string
        - name: type
          in: query
          description: A string specifying which type of media you would like to get.
          required: false
          schema:
            type: string
            enum:
              - Video
              - Audio
              - Image
              - PdfDocument
              - MicrosoftOfficeDocument
              - Swf
              - UnknownType
        - name: hashed_id
          in: query
          description: Find the media by hashed_id.
          required: false
          schema:
            type: string
        - name: hashed_ids
          in: query
          description: Find all of the medias by these hashed_ids.
          required: false
          schema:
            type: array
            items:
              type: string
          style: form
          explode: true
        - name: tags
          in: query
          description: Find all of the medias that match all of these tag names.
          required: false
          schema:
            type: array
            items:
              type: string
        - name: archived
          in: query
          description: >-
            Filter by archived status. True will return only archived medias, while false will return only active medias.
          required: false
          schema:
            type: boolean
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MediaWithCursor'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
      security:
        - BearerAuth: []
      x-speakeasy-name-override: list
  /medias/{media-hashed-id}:
    get:
      summary: Media Show
      description: >
        Fetch detailed information about a media you’ve uploaded to your account using its hashed_id.


        CDN-backed medias are accessible using this url structure: https://fast.wistia.com/embed/medias/{hashed_id}.m3u8.

        For more information, see https://docs.wistia.com/docs/asset-urls#getting-hls-assets.


        ## Requires api token with one of the following permissions

        ```

        Read, update & delete anything

        Read all data

        Read all project and video data

        ```

      tags:
        - Media
      parameters:
        - name: media-hashed-id
          in: path
          description: The hashed ID of the media.
          required: true
          schema:
            type: string
            description: Hashed ID of the media (e.g., "4d23503f70")
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MediaShow'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
      security:
        - BearerAuth: []
      x-speakeasy-name-override: get
    put:
      summary: Media Update
      description: |
        Update attributes on a media.

        ## Requires api token with one of the following permissions
        ```
        Read, update & delete anything
        ```
      tags:
        - Media
      parameters:
        - name: media-hashed-id
          in: path
          description: The hashed ID of the media.
          required: true
          schema:
            type: string
            description: Hashed ID of the media (e.g., "4d23503f70")
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: The media’s new name.
                new_still_media_id:
                  type: string
                  description: >
                    The Wistia hashed ID of an image that will replace the still that’s displayed before the player starts playing.

                description:
                  type: string
                  description: >-
                    A new description for this media. Accepts plain text or markdown.
                tags:
                  type: array
                  description: >-
                    An array of tag names to apply to the media. Note that this will replace any existing tags!
                  items:
                    type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/no_asset_media_schema_Media'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
      security:
        - BearerAuth: []
      x-speakeasy-name-override: update
    delete:
      summary: Media Delete
      description: |
        Delete a media.

        ## Requires api token with one of the following permissions
        ```
        Read, update & delete anything
        ```
      tags:
        - Media
      parameters:
        - name: media-hashed-id
          in: path
          description: The hashed ID of the media.
          required: true
          schema:
            type: string
            description: Hashed ID of the media (e.g., "4d23503f70")
      responses:
        '200':
          description: Successful deletion of the media.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Media'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
      security:
        - BearerAuth: []
      x-speakeasy-name-override: delete
  /medias/{media-hashed-id}/copy:
    post:
      summary: Media Copy
      description: |
        Copy a media.

        ## Requires api token with one of the following permissions
        ```
        Read, update & delete anything
        ```
      tags:
        - Media
      parameters:
        - name: media-hashed-id
          in: path
          description: The hashed ID of the media.
          required: true
          schema:
            type: string
            description: Hashed ID of the media (e.g., "4d23503f70")
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                project_id:
                  type: integer
                  description: >-
                    The ID of the project where you want the new copy placed. Defaults to the source media’s current project if omitted or invalid.
                owner:
                  type: string
                  format: email
                  description: >-
                    An email address specifying the owner of the new media. Defaults to the source media’s current owner if omitted or invalid.
      responses:
        '201':
          description: Successful creation of the media copy.
          headers:
            Location:
              description: The URL where the newly created media resource resides.
              schema:
                type: string
                format: uri
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/media_with_thumbnail_and_project_schema_Media
        '400':
          description: Bad request, e.g. copy failure.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '405':
          description: Method not allowed, e.g. trying to copy archived media.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        '500':
          $ref: '#/components/responses/500'
      security:
        - BearerAuth: []
      x-speakeasy-name-override: copy
  /medias/{media-hashed-id}/swap:
    put:
      summary: Media Swap
      description: >
        Swap one media with another media. This operation queues a background job to replace the original media with the replacement media while preserving the original media's hashed ID and URLs.


        ## Requires api token with one of the following permissions

        ```

        Read, update & delete anything

        ```

      tags:
        - Media
      parameters:
        - name: media-hashed-id
          in: path
          description: The hashed ID of the media to be replaced.
          required: true
          schema:
            type: string
            description: Hashed ID of the media to be replaced.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                replacement_media_id:
                  type: string
                  description: >-
                    The hashed ID of the media that will replace the original media. Must be the same media type as the original.
              required:
                - replacement_media_id
      responses:
        '200':
          description: Successfully queued background job for media swap.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Media swap has been queued for processing.
                  media:
                    $ref: '#/components/schemas/Media'
                  background_job_status:
                    $ref: '#/components/schemas/BackgroundJobStatus'
        '400':
          description: >-
            Bad request, e.g. missing replacement_media_id or media type mismatch.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: >-
                      Replacement media must be the same type as the original media (Video).
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
      security:
        - BearerAuth: []
      x-speakeasy-group: medias
      x-speakeasy-name-override: swap
  /medias/{media-hashed-id}/stats:
    get:
      summary: Media Stats
      description: |
        Aggregated tracking statistics for a video embedded on your site.

        ## Requires api token with one of the following permissions
        ```
        Read, update & delete anything
        Read all data
        Read all project and video data
        ```
      tags:
        - Media
      parameters:
        - name: media-hashed-id
          in: path
          description: The hashed ID of the video.
          required: true
          schema:
            type: string
            description: Hashed ID of the media (e.g., "4d23503f70")
      responses:
        '200':
          description: Successful retrieval of video statistics.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    description: >-
                      A unique numeric identifier for the video within the system.
                  hashed_id:
                    type: string
                    description: >-
                      A unique alphanumeric identifier for the video within the system.
                  name:
                    type: string
                    description: The display name of the video.
                  stats:
                    type: object
                    description: >-
                      An object representing the aggregated embed statistics for this video.
                    properties:
                      pageLoads:
                        type: integer
                        description: >-
                          The total number of times that the page containing the embedded video has been loaded.
                      visitors:
                        type: integer
                        description: >-
                          The number of unique visitors to the page containing the embedded video.
                      percentOfVisitorsClickingPlay:
                        type: integer
                        description: >-
                          An integer between 0 and 100 that shows what percentage of the time someone who saw the page containing the embedded video played the video.
                      plays:
                        type: integer
                        description: >-
                          The total number of times that the video has been played.
                      averagePercentWatched:
                        type: integer
                        description: >-
                          An integer between 0 and 100. It shows the average percentage of the video that was watched over every time the video was played.
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
      security:
        - BearerAuth: []
      x-speakeasy-name-override: stats
  /medias/{media-hashed-id}/translate:
    post:
      summary: Media Translate
      description: |
        Translate the transcript for a media.

        ## Requires api token with one of the following permissions
        ```
        Read, update & delete anything
        ```
      tags:
        - Media
      parameters:
        - name: media-hashed-id
          description: The hashed ID of the media.
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                target_language:
                  type: string
                  description: >-
                    The language to translate the transcript to as a 3-character IETF language code.
                source_language:
                  type: string
                  description: >-
                    The language of the source transcript to be translated as a 3-character IETF language code. If not provided, the media's default transcript language will be used.
              required:
                - target_language
      responses:
        '201':
          description: >-
            Successfully queued background job for translation of the transcript.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: >-
                      Translation request has been successfully queued for processing.
                  background_job_status:
                    $ref: '#/components/schemas/BackgroundJobStatus'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '422':
          description: Unprocessible entity, parameters provided were invalid.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error message detailing why the request failed.
        '500':
          $ref: '#/components/responses/500'
      security:
        - BearerAuth: []
      x-speakeasy-name-override: translate
  /medias/archive:
    put:
      summary: Medias Archive
      description: >
        This method accepts a list of up to 100 medias to archive per request. It processes requests asynchronously and will return a background_job_status object rather than the typical Media response object. Note that Livestream medias and Soapbox videos imported to Wistia before September 1, 2023 cannot be archived.


        ## Requires api token with one of the following permissions

        ```

        Read, update & delete anything

        ```

      tags:
        - Media
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                hashed_ids:
                  type: array
                  description: An array of the media hashed IDs to be archived.
                  items:
                    type: string
              required:
                - hashed_ids
      responses:
        '200':
          description: Successful archival of media.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: >-
                      A confirmation message that the background job has been queued.
                  background_job_status:
                    $ref: '#/components/schemas/BackgroundJobStatus'
        '401':
          $ref: '#/components/responses/401'
        '403':
          description: Forbidden, e.g. account does not have access to archiving.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        '422':
          description: Unprocessable entity, e.g. too many media requested.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        '500':
          $ref: '#/components/responses/500'
      security:
        - BearerAuth: []
      x-speakeasy-name-override: archive
  /medias/move:
    put:
      summary: Media Move
      description: >
        Move one or many media to a different project and optionally to a specific subfolder.

        Max 100 media per request, and max 10 requests in 5 minutes.

        Note: this is a different rate limit than applies to the rest of the api!


        If a subfolder_id is provided, media will be moved to that subfolder. The subfolder

        must belong to the specified project.


        Returns a Background Job as the move is async.


        ## Requires api token with one of the following permissions

        ```

        Read, update & delete anything

        ```

      tags:
        - Media
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                hashed_ids:
                  type: array
                  description: An array of the media hashed IDs to be moved.
                  items:
                    type: string
                project_id:
                  description: The hashed ID of the project where you want the media moved.
                  type: string
                subfolder_id:
                  description: >-
                    Optional. The hashed ID of the subfolder where you want the media moved. If not provided, media will be moved to the project's default subfolder. The subfolder must belong to the specified project.
                  type: string
              required:
                - hashed_ids
                - project_id
      responses:
        '200':
          description: Successfully queued move of all the media.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  background_job_status:
                    $ref: '#/components/schemas/BackgroundJobStatus'
        '207':
          description: >-
            Successfully queued move of at least one media. Other provided hashed_ids failed.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  background_job_status:
                    $ref: '#/components/schemas/BackgroundJobStatus'
                  partial_errors:
                    type: array
                    items:
                      type: object
                      properties:
                        media_id:
                          type: string
                        error:
                          type: string
        '400':
          description: Invalid request.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
              example:
                error: You can only request to move 100 or less media at one time.
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
      security:
        - BearerAuth: []
      x-speakeasy-name-override: move
  /medias/restore:
    put:
      summary: Media Restore
      description: >
        Restore archived medias to your account. This method accepts a list of up to 100 medias to restore per request. It processes requests asynchronously and will return a background_job_status object rather than the typical Media response object. Your account must have access to the Archiving feature to use this method.


        ## Requires api token with one of the following permissions

        ```

        Read, update & delete anything

        ```

      tags:
        - Media
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                hashed_ids:
                  type: array
                  description: An array of the media hashed IDs to be restored.
                  items:
                    type: string
                project_id:
                  description: >-
                    The hashed ID of the project to restore the medias to. Required unless channel_id is specified.
                  type: string
                channel_id:
                  description: >-
                    The hashed ID of the channel to restore the medias to. Required unless project_id is specified.
                  type: string
              required:
                - hashed_ids
      responses:
        '200':
          description: Successful restoration of media.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: >-
                      A confirmation message that the background job has been queued.
                  container:
                    type: object
                    properties:
                      type:
                        type: string
                        description: >-
                          The type of container the medias will be restored to, either Project or Channel.
                      name:
                        type: string
                        description: >-
                          The display name of the container the medias will be restored to.
                      hashedId:
                        type: string
                        description: >-
                          The hashed ID of the container the medias will be restored to.
                  background_job_status:
                    $ref: '#/components/schemas/BackgroundJobStatus'
        '401':
          $ref: '#/components/responses/401'
        '403':
          description: Forbidden, e.g. account does not have access to archiving.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        '404':
          $ref: '#/components/responses/404'
        '422':
          description: Missing arguments for restoration of media.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: >-
                      An error message that the necessary parameters were not provided.
                    example: >-
                      Incorrect number of parameters provided. Provide one project_id or one channel_id.
        '500':
          $ref: '#/components/responses/500'
      security:
        - BearerAuth: []
      x-speakeasy-name-override: restore
  /account:
    get:
      summary: Account Show
      description: |
        Retrieve account details.

        ## Requires api token with one of the following permissions
        ```
        (any scope allowed)
        ```
      tags:
        - Account
      operationId: getAccountDetails
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
      security:
        - BearerAuth: []
      x-speakeasy-name-override: get
  /allowed_domains:
    get:
      summary: Allowed Domains List
      description: |
        List all allowed domains for the account.

        ## Requires api token with one of the following permissions
        ```
        Read, update & delete anything
        ```
      tags:
        - AllowedDomains
      parameters:
        - name: page
          in: query
          description: Page number for pagination
          required: false
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: per_page
          in: query
          description: Number of items per page
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 100
      responses:
        '200':
          description: List of allowed domains
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AllowedDomain'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
      security:
        - BearerAuth: []
      x-speakeasy-name-override: list
    post:
      summary: Allowed Domain Create
      description: |
        Create a new allowed domain for the account.

        ## Requires api token with one of the following permissions
        ```
        Read, update & delete anything
        ```
      tags:
        - AllowedDomains
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                domain:
                  type: string
                  description: The domain name to add (www will be automatically stripped)
                  example: example.com
              required:
                - domain
      responses:
        '200':
          description: Allowed domain created successfully (or already exists)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AllowedDomain'
        '400':
          description: Bad request - missing or invalid domain
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: >-
                      The domain's format doesn't look correct. It should be formatted like "mydomain.com"
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
      security:
        - BearerAuth: []
      x-speakeasy-name-override: create
  /allowed_domains/{domain}:
    get:
      summary: Allowed Domain Show
      description: |
        Get details for a specific allowed domain.

        ## Requires api token with one of the following permissions
        ```
        Read, update & delete anything
        ```
      tags:
        - AllowedDomains
      parameters:
        - name: domain
          in: path
          description: The domain name to retrieve
          required: true
          schema:
            type: string
            example: example.com
      responses:
        '200':
          description: Allowed domain details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AllowedDomain'
        '401':
          $ref: '#/components/responses/401'
        '404':
          description: Domain not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: domain was not found
        '500':
          $ref: '#/components/responses/500'
      security:
        - BearerAuth: []
      x-speakeasy-name-override: get
    delete:
      summary: Allowed Domain Delete
      description: |
        Delete an allowed domain from the account.

        ## Requires api token with one of the following permissions
        ```
        Read, update & delete anything
        ```
      tags:
        - AllowedDomains
      parameters:
        - name: domain
          in: path
          description: The domain name to delete
          required: true
          schema:
            type: string
            example: example.com
      responses:
        '200':
          description: Allowed domain deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AllowedDomain'
        '401':
          $ref: '#/components/responses/401'
        '404':
          description: Domain not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: domain was not found
        '500':
          $ref: '#/components/responses/500'
      security:
        - BearerAuth: []
      x-speakeasy-name-override: delete
  /background_job_status/{background-job-status-id}:
    get:
      summary: Background Job Status Show
      description: |
        Retrieve the status of a background job.
        ## Requires api token with one of the following permissions
        ```
        Read, update & delete anything
        Read all data
        ```
      tags:
        - Background Job Status
      parameters:
        - name: background-job-status-id
          in: path
          required: true
          description: The numeric ID of the background job
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  background_job_status:
                    $ref: '#/components/schemas/BackgroundJobStatus'
                required:
                  - background_job_status
        '401':
          $ref: '#/components/responses/401'
        '403':
          description: Background Job Status Not Associated with An Authorized Object
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: >-
                      The requested background job status is not associated with an authorized object.
        '404':
          $ref: '#/components/responses/resource_not_found_head_only_404'
        '500':
          $ref: '#/components/responses/500'
      security:
        - BearerAuth: []
      x-speakeasy-group: backgroundJobStatus
      x-speakeasy-name-override: get
  /medias/{media-id}/customizations:
    get:
      summary: Customizations Show
      description: |
        Fetches explicitly defined customizations for the video.

        ## Requires api token with one of the following permissions
        ```
        Read, update & delete anything
        Read all data
        Read all project and video data
        ```
      tags:
        - Customizations
      parameters:
        - name: media-id
          in: path
          description: The hashed ID of the video.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VideoCustomizationResponse'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
      security:
        - BearerAuth: []
      x-speakeasy-name-override: get
    post:
      summary: Customizations Create
      description: >
        Set customizations for a video. Replaces the customizations explicitly set for this video.


        ## Requires api token with one of the following permissions

        ```

        Read, update & delete anything

        ```

      tags:
        - Customizations
      parameters:
        - name: media-id
          in: path
          description: The hashed ID of the video.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VideoCustomization'
        required: true
      responses:
        '201':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VideoCustomizationResponse'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
      security:
        - BearerAuth: []
      x-speakeasy-name-override: create
    put:
      summary: Customizations Update
      description: >
        Allows for partial updates on a video’s customizations. If a value is null, then that key will be deleted from the saved customizations. If it is not null, that value will be set.


        ## Requires api token with one of the following permissions

        ```

        Read, update & delete anything

        ```

      tags:
        - Customizations
      parameters:
        - name: media-id
          in: path
          description: The hashed ID of the video to be customized.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VideoCustomization'
        required: true
      responses:
        '200':
          description: Video customization update successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VideoCustomizationResponse'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
      security:
        - BearerAuth: []
      x-speakeasy-name-override: update
    delete:
      summary: Customizations Delete
      description: >
        Deletes all explicit customizations for a video, making it act as if it has never been customized.


        ## Requires api token with one of the following permissions

        ```

        Read, update & delete anything

        ```

      tags:
        - Customizations
      parameters:
        - name: media-id
          in: path
          description: The hashed ID of the media whose customizations are to be deleted.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Video customization deletion successful
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
      security:
        - BearerAuth: []
      x-speakeasy-name-override: delete
  /medias/{media-hashed-id}/captions:
    get:
      summary: Captions List
      description: >
        Returns all the captions associated with a specified video.

        If captions do not exist for this video, the response will be an empty JSON array.

        If this video does not exist, the response will be an empty HTTP 404 Not Found.


        ## Requires api token with one of the following permissions

        ```

        Read, update & delete anything

        Read all data

        Read all project and video data

        ```

      tags:
        - Captions
      parameters:
        - name: media-hashed-id
          in: path
          description: The hashed ID of the media for which captions are to be retrieved.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Captions retrieval successful
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Caption'
        '401':
          $ref: '#/components/responses/401'
        '404':
          description: Video not found
        '500':
          $ref: '#/components/responses/500'
      security:
        - BearerAuth: []
      x-speakeasy-name-override: list
    post:
      summary: Captions Create
      description: >
        Adds captions to a specified video by providing an SRT file or its contents directly.


        ## Requires api token with one of the following permissions

        ```

        Read, update & delete anything

        ```

      tags:
        - Captions
      parameters:
        - name: media-hashed-id
          in: path
          description: The hashed ID of the media for which captions are to be added.
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                caption_file:
                  type: string
                  description: >-
                    Either an attached SRT file or a string parameter with the contents of an SRT file.
                  format: binary
                language:
                  type: string
                  description: >-
                    An optional parameter that denotes which language this file represents. Should conform to ISO-639–2. If left unspecified, the language code will be detected automatically.
              required:
                - caption_file
          application/json:
            schema:
              type: object
              properties:
                caption_file:
                  type: string
                  description: >-
                    Either an attached SRT file or a string parameter with the contents of an SRT file.
                language:
                  type: string
                  description: >-
                    An optional parameter that denotes which language this file represents. Should conform to ISO-639–2. If left unspecified, the language code will be detected automatically.
              required:
                - caption_file
      responses:
        '200':
          description: Captions added successfully
        '400':
          description: Captions already exist for this video
        '401':
          $ref: '#/components/responses/401'
        '404':
          description: Video not found
        '500':
          $ref: '#/components/responses/500'
      security:
        - BearerAuth: []
      x-speakeasy-name-override: create
  /medias/{media-hashed-id}/captions/purchase:
    post:
      summary: Captions Purchase
      description: >
        This method is for purchasing English captions for a video. The request will charge the credit card on the account if successful. A saved credit card is required to use this endpoint.


        ## Requires api token with one of the following permissions

        ```

        Read, update & delete anything

        ```

      tags:
        - Captions
      parameters:
        - name: media-hashed-id
          in: path
          description: Unique identifier for the video.
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                automated:
                  type: boolean
                  description: >-
                    Order computer-generated captions (free) or human-generated captions ($2.50/minute).
                  default: false
                rush:
                  type: boolean
                  description: >-
                    Enable rush order for one business day turnaround ($4.00/minute) or standard four business day turnaround for human-generated captions ($2.50/minute). Rush can only be used for human-generated captions.
                  default: true
                automatically_enable:
                  type: boolean
                  description: >-
                    Automatically enable captions for the video once the order is ready or hold the captions for review before manually enabling.
                  default: true
              required:
                - automated
                - rush
                - automatically_enable
      responses:
        '200':
          description: Successful operation. Captions purchased.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: >-
                      Success message indicating the captions have been purchased
                    example: >-
                      Captions purchased for this video. Your account will be charged when the captions are ready.
                  id:
                    type: string
                    description: >-
                      The unique hashed identifier of the time-coded transcript that was created
                    example: abc123def456
                required:
                  - message
                  - id
        '400':
          description: English captions already exist for this video.
        '401':
          $ref: '#/components/responses/401'
        '404':
          description: Video not found.
        '422':
          description: >-
            Unprocessable entity. Account not eligible, captions already purchased, or other validation error.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: >-
                      Error message explaining why the purchase cannot be completed
        '500':
          $ref: '#/components/responses/500'
      security:
        - BearerAuth: []
      x-speakeasy-name-override: purchase
  /medias/{media-hashed-id}/captions/{language-code}:
    get:
      summary: Captions Show
      description: >
        Returns a video's captions in the specified language.

        Supports multiple formats: JSON (default), SRT, VTT, and TXT.

        Use file extensions (.srt, .vtt, .txt) or Accept headers to specify format.


        ## Requires api token with one of the following permissions

        ```

        Read, update & delete anything

        Read all data

        Read all project and video data

        ```

      tags:
        - Captions
      parameters:
        - name: media-hashed-id
          in: path
          description: The hashed ID of the media from which captions are to be retrieved.
          required: true
          schema:
            type: string
        - name: language-code
          in: path
          description: The language code of the captions to be retrieved.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful response containing captions in the requested format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Caption'
            text/plain:
              schema:
                type: string
                description: Caption content in SRT or TXT format
            text/vtt:
              schema:
                type: string
                description: Caption content in VTT format
        '401':
          $ref: '#/components/responses/401'
        '404':
          description: Captions not found or video not found
        '500':
          $ref: '#/components/responses/500'
      security:
        - BearerAuth: []
      x-speakeasy-name-override: get
    put:
      summary: Captions Update
      description: >
        This method is for replacing the captions on a video for the specified language.


        ## Requires api token with one of the following permissions

        ```

        Read, update & delete anything

        ```

      tags:
        - Captions
      parameters:
        - name: media-hashed-id
          in: path
          description: Unique identifier for the video.
          required: true
          schema:
            type: string
        - name: language-code
          in: path
          description: >-
            Language code conforming to ISO-639-2 for which the captions should be updated.
          required: true
          schema:
            type: string
            pattern: ^[a-z]{3}$
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                caption_file:
                  description: >-
                    Either an attached SRT file or a string parameter with the contents of an SRT file.
                  type: string
              required:
                - caption_file
          multipart/form-data:
            schema:
              type: object
              properties:
                caption_file:
                  description: >-
                    Either an attached SRT file or a string parameter with the contents of an SRT file.
                  type: string
                  format: binary
              required:
                - caption_file
      responses:
        '200':
          description: Successful operation. Captions replaced.
        '401':
          $ref: '#/components/responses/401'
        '404':
          description: Captions or video not found.
        '500':
          $ref: '#/components/responses/500'
      security:
        - BearerAuth: []
      x-speakeasy-name-override: update
    delete:
      summary: Captions Delete
      description: >
        This method is for removing the captions file from a video for the specified language.


        ## Requires api token with one of the following permissions

        ```

        Read, update & delete anything

        ```

      tags:
        - Captions
      parameters:
        - name: media-hashed-id
          in: path
          description: Unique identifier for the video.
          required: true
          schema:
            type: string
        - name: language-code
          in: path
          description: >-
            Language code conforming to ISO-639-2 for which the captions should be removed.
          required: true
          schema:
            type: string
            pattern: ^[a-z]{3}$
      responses:
        '200':
          description: Successful operation. Captions removed.
        '401':
          $ref: '#/components/responses/401'
        '404':
          description: Captions or video not found.
        '500':
          $ref: '#/components/responses/500'
      security:
        - BearerAuth: []
      x-speakeasy-name-override: delete
  /medias/{media-hashed-id}/trims:
    post:
      summary: Trims Create
      description: |
        Creates a new media that trims off parts of an existing media

        ## Requires api token with one of the following permissions
        ```
        Read, update & delete anything
        ```
      tags:
        - Trims
      parameters:
        - name: media-hashed-id
          in: path
          description: The hashed ID of the media.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Trims'
        required: true
      responses:
        '200':
          description: Successful queueing of trims worker.
          content:
            application/json:
              schema:
                type: object
                properties:
                  background_job_status:
                    $ref: '#/components/schemas/BackgroundJobStatus'
        '401':
          $ref: '#/components/responses/401'
        '422':
          $ref: '#/components/responses/422'
        '500':
          $ref: '#/components/responses/500'
      security:
        - BearerAuth: []
      x-speakeasy-name-override: create
  /medias/{media-hashed-id}/localizations:
    get:
      summary: Localizations List
      description: |
        Obtain a list of all the localizations for a media.

        ## Requires api token with one of the following permissions
        ```
        Read, update & delete anything
        Read all data
        Read all project and video data
        ```
      tags:
        - Localizations
      parameters:
        - name: media-hashed-id
          description: The hashed ID of the media to list localizations for.
          in: path
          required: true
          schema:
            type: string
        - name: include_transcript
          in: query
          description: Whether to include the transcript in the response.
          required: false
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Localization'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
      security:
        - BearerAuth: []
      x-speakeasy-name-override: list
    post:
      summary: Localizations Create
      description: |
        Create a new localization.

        ## Requires api token with one of the following permissions
        ```
        Read, update & delete anything
        ```
      tags:
        - Localizations
      parameters:
        - name: media-hashed-id
          description: The hashed ID of the media to create a localization for.
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                output_language:
                  type: string
                  description: >-
                    The language to localize the media to as a 3-character IETF language code.
                auto_enable:
                  type: boolean
                  description: Whether to automatically enable the localization.
                  default: true
              required:
                - output_language
      responses:
        '201':
          description: Successful creation of the localization.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LocalizationWithPurchaseData'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '422':
          description: Unprocessible entity, parameters provided were invalid.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error message detailing why the request failed.
        '500':
          $ref: '#/components/responses/500'
      security:
        - BearerAuth: []
      x-speakeasy-name-override: create
  /medias/{media-hashed-id}/localizations/{localization-hashed-id}:
    get:
      summary: Localizations Show
      description: |
        Obtain detailed information about a localization.

        ## Requires api token with one of the following permissions
        ```
        Read, update & delete anything
        Read all data
        Read all project and video data
        ```
      tags:
        - Localizations
      parameters:
        - name: media-hashed-id
          description: The hashed ID of the localization's media.
          in: path
          required: true
          schema:
            type: string
        - name: localization-hashed-id
          description: The hashed ID of the localization.
          in: path
          required: true
          schema:
            type: string
        - name: include_transcript
          in: query
          description: Whether to include the transcript in the response.
          required: false
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Localization'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
      security:
        - BearerAuth: []
      x-speakeasy-name-override: get
    delete:
      summary: Localizations Delete
      description: |
        Delete a localization.

        ## Requires api token with one of the following permissions
        ```
        Read, update & delete anything
        ```
      tags:
        - Localizations
      parameters:
        - name: media-hashed-id
          description: The hashed ID of the localization's media.
          in: path
          required: true
          schema:
            type: string
        - name: localization-hashed-id
          description: The hashed ID of the localization to delete.
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful deletion of the localization.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Localization'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
      security:
        - BearerAuth: []
      x-speakeasy-name-override: delete
  /tags:
    get:
      summary: Tags List
      description: >
        Use this endpoint to request a list of Tags in your Wistia account. This request supports paging and sorting.


        ## Requires api token with one of the following permissions

        ```

        Read, update & delete anything

        Read all data

        ```

      tags:
        - Tags
      parameters:
        - name: page
          in: query
          description: Page number to retrieve
          required: false
          schema:
            type: integer
        - name: per_page
          in: query
          description: Number of tags per page
          required: false
          schema:
            type: integer
        - name: sort_by
          in: query
          description: Ordering
          required: false
          schema:
            type: string
            enum:
              - name
              - created
              - updated
              - taggingsCount
        - name: sort_direction
          in: query
          description: Ordering Sort Direction (0 = desc, 1 = asc)
          required: false
          schema:
            type: integer
            enum:
              - 0
              - 1
      responses:
        '200':
          description: A list of tags
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tag'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
      security:
        - BearerAuth: []
      x-speakeasy-name-override: list
    post:
      summary: Tags Create
      description: |
        Create a new tag.

        ## Requires api token with one of the following permissions
        ```
        Read, update & delete anything
        ```
      tags:
        - Tags
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
              required:
                - name
      responses:
        '200':
          description: Tag created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tag'
        '400':
          description: Bad request - missing or invalid parameters
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: 'param is missing or the value is empty: name'
        '401':
          $ref: '#/components/responses/401'
        '422':
          description: Validation error - tag already exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: 'Validation failed: Name has already been taken'
        '500':
          $ref: '#/components/responses/500'
      security:
        - BearerAuth: []
      x-speakeasy-name-override: create
  /tags/{name}:
    delete:
      summary: Tags Delete
      description: |
        Delete a tag

        ## Requires api token with one of the following permissions
        ```
        Read, update & delete anything
        ```
      tags:
        - Tags
      parameters:
        - name: name
          in: path
          description: Tag ID
          required: true
          schema:
            type: string
            description: Name of the tag to delete
      responses:
        '200':
          description: Successful response.
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/resource_not_found_head_only_404'
        '500':
          $ref: '#/components/responses/500'
      security:
        - BearerAuth: []
      x-speakeasy-name-override: delete
  /search:
    get:
      summary: Search
      description: |
        Search across projects, medias, channels, and channel episodes.

        ## Requires api token with one of the following permissions
        ```
        Read, update & delete anything
        ```
      tags:
        - Search
      parameters:
        - name: q
          in: query
          required: true
          schema:
            type: string
          description: The search query string
          example: screencast
      responses:
        '200':
          description: Search results
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      projects:
                        type: array
                        items:
                          $ref: '#/components/schemas/Project'
                      medias:
                        type: array
                        items:
                          $ref: '#/components/schemas/SearchMedia'
                      channels:
                        type: array
                        items:
                          $ref: '#/components/schemas/SearchChannel'
                      channelEpisodes:
                        type: array
                        items:
                          $ref: '#/components/schemas/SearchChannelEpisode'
                    required:
                      - projects
                      - medias
                      - channels
                      - channelEpisodes
                required:
                  - data
        '400':
          description: Bad request - missing query parameter
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: >-
                      the "q" parameter should specify the search query, e.g. "q=screencast"
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
      security:
        - BearerAuth: []
      x-speakeasy-name-override: search
  /channels:
    get:
      summary: Channels List
      description: |
        Returns all the Channels associated with the account.

        ## Requires api token with one of the following permissions
        ```
        Read, update & delete anything
        Read all data
        Read all project and video data
        ```
      tags:
        - Channels
      parameters:
        - name: page
          in: query
          description: Page number to retrieve
          required: false
          schema:
            type: integer
        - name: per_page
          in: query
          description: Number of channels per page
          required: false
          schema:
            type: integer
        - name: sort_by
          in: query
          description: Ordering. Default is ID ASC.
          required: false
          schema:
            type: string
            enum:
              - created
              - id
              - updated
              - name
        - name: sort_direction
          in: query
          description: Ordering Sort Direction (0 = desc, 1 = asc; default is 1)
          required: false
          schema:
            type: integer
            enum:
              - 0
              - 1
        - name: hashed_ids
          in: query
          description: Find all of the channels limited to these hashed_ids.
          required: false
          schema:
            type: array
            items:
              type: string
          style: form
          explode: true
      responses:
        '200':
          description: Channels retrieval successful
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Channel'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
      security:
        - BearerAuth: []
      x-speakeasy-name-override: list
  /channels/{channel-hashed-id}:
    get:
      summary: Channels Show
      description: |
        Returns the Channel associated with the hashedId.

        ## Requires api token with one of the following permissions
        ```
        Read, update & delete anything
        Read all data
        Read all project and video data
        ```
      tags:
        - Channels
      parameters:
        - name: channel-hashed-id
          in: path
          description: The hashed ID of the channel.
          required: true
          schema:
            type: string
            description: Hashed ID of the channel (e.g., "4d23503f70")
      responses:
        '200':
          description: Channel retrieval successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Channel'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
      security:
        - BearerAuth: []
      x-speakeasy-name-override: get
  /channels/{channel-hashed-id}/channel_episodes/{channel-episode-id}:
    get:
      summary: Channel Episodes Show
      description: |
        Returns the Channel Episode associated with the hashedId.

        ## Requires api token with one of the following permissions
        ```
        Read, update & delete anything
        Read all data
        Read all project and video data
        ```
      tags:
        - Channel Episodes
      parameters:
        - name: channel-hashed-id
          in: path
          description: The hashed ID of the channel.
          required: true
          schema:
            type: string
            description: Hashed ID of the channel (e.g., "4d23503f70")
        - name: channel-episode-id
          in: path
          description: The hashed ID of the channel episode.
          required: true
          schema:
            type: string
            description: Hashed ID of the channel episode (e.g., "4d23503f70")
      responses:
        '200':
          description: Channel Episode retrieval successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChannelEpisode'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
      security:
        - BearerAuth: []
      x-speakeasy-group: channelEpisodes
      x-speakeasy-name-override: get
  /channels/{channel-hashed-id}/channel_episodes:
    get:
      summary: Channel Episodes List filtered by channel
      description: >
        Returns all the Channel Episodes belonging the channel passed in the path.


        ## Requires api token with one of the following permissions

        ```

        Read, update & delete anything

        Read all data

        Read all project and video data

        ```

      tags:
        - Channel Episodes
      parameters:
        - name: channel-hashed-id
          in: path
          description: The hashed ID of the channel to grab channel episodes from.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/sort_by'
        - $ref: '#/components/parameters/sort_direction'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/per_page'
        - $ref: '#/components/parameters/media_id'
        - $ref: '#/components/parameters/hashed_id'
        - $ref: '#/components/parameters/published'
        - $ref: '#/components/parameters/title'
      responses:
        '200':
          description: Channel Episodes retrieval successful
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ChannelEpisode'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
      security:
        - BearerAuth: []
      x-speakeasy-group: channels.episodes
      x-speakeasy-name-override: list
    post:
      summary: Channel Episode Create
      description: |
        Creates a new channel episode in a channel.

        ## Requires api token with one of the following permissions
        ```
        Read, update & delete anything
        ```
      tags:
        - Channel Episodes
      parameters:
        - name: channel-hashed-id
          in: path
          description: The hashed ID of the channel to add the episode to.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateChannelEpisode'
        required: true
      responses:
        '200':
          description: Channel Episode creation successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChannelEpisode'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
      security:
        - BearerAuth: []
      x-speakeasy-group: channelEpisodes
      x-speakeasy-name-override: create
  /channel_episodes:
    get:
      summary: Channel Episodes List
      description: >
        Returns all the Channel Episodes associated with the account, and allows for filtering by a particular channel.


        ## Requires api token with one of the following permissions

        ```

        Read, update & delete anything

        Read all data

        Read all project and video data

        ```

      tags:
        - Channel Episodes
      parameters:
        - name: channel_id
          required: false
          in: query
          schema:
            type: string
          description: >-
            Find episodes for a particular channel by providing the channel hashed ID
        - $ref: '#/components/parameters/sort_by'
        - $ref: '#/components/parameters/sort_direction'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/per_page'
        - $ref: '#/components/parameters/media_id'
        - $ref: '#/components/parameters/hashed_id'
        - $ref: '#/components/parameters/published'
        - $ref: '#/components/parameters/title'
      responses:
        '200':
          description: Channel Episodes retrieval successful
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ChannelEpisode'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
      security:
        - BearerAuth: []
      x-speakeasy-group: channelEpisodes
      x-speakeasy-name-override: list
  /expiring_token:
    post:
      summary: Create an expiring access token
      description: "```\n\U0001F6AB Alert\n\nThis API is still under development and can change at any time.\n```\n\nThis endpoint is for creating expiring access tokens which can be used for some iframe embeds.\n\n## Requires api token with one of the following permissions\n```\nRead, update & delete anything\n```\n"
      tags:
        - Expiring Access Tokens
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                expiring_access_token:
                  $ref: '#/components/schemas/ExpiringAccessTokenInput'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExpiringAccessTokenResponse'
        '401':
          $ref: '#/components/responses/401'
        '422':
          $ref: '#/components/responses/422'
        '500':
          $ref: '#/components/responses/500'
        '501':
          description: >-
            Not implemented - expiring tokens cannot be created from other expiring tokens
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: >-
                      Expiring tokens can only be created from non-expiring access tokens.
      security:
        - BearerAuth: []
      x-speakeasy-group: expiringAccessTokens
      x-speakeasy-name-override: create
  /live_stream_events:
    get:
      summary: Live Stream Events List
      description: >
        Use this endpoint to request a list of Live Stream Events in your Wistia account. This request supports paging and sorting.


        ## Requires api token with one of the following permissions

        ```

        Read, update & delete anything

        Read all data

        Read all project and video data

        ```

      tags:
        - Live Stream Events
      parameters:
        - name: page
          in: query
          description: Page number to retrieve
          required: false
          schema:
            type: integer
        - name: per_page
          in: query
          description: Number of events per page (maximum 100)
          required: false
          schema:
            type: integer
            maximum: 100
        - name: sort_by
          in: query
          description: Field to sort by
          required: false
          schema:
            type: string
            enum:
              - scheduled_for
              - id
        - name: sort_direction
          in: query
          description: Sort direction (1 for ascending, -1 for descending)
          required: false
          schema:
            type: string
            enum:
              - '1'
              - '-1'
        - name: hashed_ids
          in: query
          description: Filter by specific event IDs
          required: false
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: Successful response with a list of live stream events
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LiveStreamEvent'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
      security:
        - BearerAuth: []
      x-speakeasy-group: liveStreamEvents
      x-speakeasy-name-override: list
    post:
      summary: Live Stream Event Create
      description: >
        Create a new live stream event. The event will be created synchronously and return the event details with audience and host links.


        ## Requires api token with one of the following permissions

        ```

        Read, update & delete anything

        ```


        ## Rate Limiting

        This endpoint is rate limited to 60 requests per minute per IP address.


        ## Feature Access

        This endpoint requires the live streaming feature to be enabled on your account plan.

      tags:
        - Live Stream Events
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateLiveStreamEvent'
      responses:
        '201':
          description: Live stream event created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateLiveStreamEventResponse'
        '401':
          $ref: '#/components/responses/401'
        '403':
          description: Live streaming feature not available
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Live streaming is not available on your current plan
        '422':
          description: Validation errors
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: string
                    example:
                      - Title is required
                      - Event duration must be at least 15 minutes
        '429':
          description: Rate limit exceeded
          content:
            text/plain:
              schema:
                type: string
                example: Rate limit exceeded
        '500':
          description: Internal server error during event creation
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: string
                    example:
                      - >-
                        An error occurred while creating the live stream event. Please try again.
      security:
        - BearerAuth: []
      x-speakeasy-group: liveStreamEvents
      x-speakeasy-name-override: create
  /live_stream_events/{id}:
    get:
      summary: Live Stream Event Show
      description: |
        Retrieve information for a single live stream event.

        ## Requires api token with one of the following permissions
        ```
        Read, update & delete anything
        Read all data
        Read all project and video data
        ```
      tags:
        - Live Stream Events
      parameters:
        - name: id
          in: path
          required: true
          description: The hashed ID of the live stream event
          schema:
            type: string
      responses:
        '200':
          description: Successful response with the live stream event details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LiveStreamEvent'
        '401':
          $ref: '#/components/responses/401'
        '404':
          description: Live stream event not found
        '500':
          $ref: '#/components/responses/500'
      security:
        - BearerAuth: []
      x-speakeasy-group: liveStreamEvents
      x-speakeasy-name-override: get
    put:
      summary: Live Stream Event Update
      description: |
        Update an existing live stream event.

        ## Requires api token with one of the following permissions
        ```
        Read, update & delete anything
        ```
      tags:
        - Live Stream Events
      parameters:
        - name: id
          in: path
          required: true
          description: The hashed ID of the live stream event
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateLiveStreamEvent'
      responses:
        '200':
          description: Live stream event updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LiveStreamEvent'
        '401':
          $ref: '#/components/responses/401'
        '404':
          description: Live stream event not found
        '422':
          description: Validation errors
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: string
                    example:
                      - Title is required
                      - Event duration must be at least 15 minutes
        '500':
          $ref: '#/components/responses/500'
      security:
        - BearerAuth: []
      x-speakeasy-group: liveStreamEvents
      x-speakeasy-name-override: update
    delete:
      summary: Live Stream Event Delete
      description: |
        Delete an existing live stream event.

        ## Requires api token with one of the following permissions
        ```
        Read, update & delete anything
        ```
      tags:
        - Live Stream Events
      parameters:
        - name: id
          in: path
          required: true
          description: The hashed ID of the live stream event
          schema:
            type: string
      responses:
        '200':
          description: Live stream event deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LiveStreamEvent'
        '401':
          $ref: '#/components/responses/401'
        '404':
          description: Live stream event not found
        '500':
          $ref: '#/components/responses/500'
      security:
        - BearerAuth: []
      x-speakeasy-group: liveStreamEvents
      x-speakeasy-name-override: delete
  /stats/account:
    get:
      summary: Stats:Account Show
      description: >
        Retrieve account-wide video stats. Get statistics like the number of video loads, plays, and hours watched for the entire account.


        ## Requires api token with one of the following permissions

        ```

        Read, update & delete anything

        Read all data

        Read all project and video data

        ```

      tags:
        - Stats:Account
      responses:
        '200':
          description: Successful operation. Account stats retrieved.
          content:
            application/json:
              schema:
                type: object
                properties:
                  load_count:
                    type: integer
                    description: >-
                      The total number of times all of the videos from this account have been loaded.
                  play_count:
                    type: integer
                    description: >-
                      The total number of times all of the videos from this account have been played.
                  hours_watched:
                    type: number
                    format: float
                    description: >-
                      The total amount of time spent watching all of the videos in this account.
                required:
                  - load_count
                  - play_count
                  - hours_watched
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
      security:
        - BearerAuth: []
      x-speakeasy-group: statsAccount
      x-speakeasy-name-override: get
  /stats/projects/{project-id}:
    get:
      summary: Stats:Projects Show
      description: >
        Retrieve stats for a project. This endpoint provides statistics for a specific project identified by its project-id.


        ## Requires api token with one of the following permissions

        ```

        Read, update & delete anything

        Read all data

        Read all project and video data

        ```

      tags:
        - Stats:Projects
      parameters:
        - name: project-id
          in: path
          required: true
          description: >-
            The Hashed ID or ID of the project for which you want to retrieve stats.
          schema:
            oneOf:
              - type: string
                description: Hashed ID of the project (e.g., "4d23503f70")
              - type: integer
                description: Numeric ID of the project (e.g., 22570)
      responses:
        '200':
          description: Success response with the stats of the project.
          content:
            application/json:
              schema:
                type: object
                properties:
                  load_count:
                    type: integer
                    description: >-
                      The total number of times the videos in this project have been loaded.
                  play_count:
                    type: integer
                    description: >-
                      The total number of times the videos in this project have been played.
                  hours_watched:
                    type: number
                    format: float
                    description: The total time spent viewing the videos in this project.
                  number_of_videos:
                    type: integer
                    deprecated: true
                    description: The total number of videos in this project.
        '401':
          $ref: '#/components/responses/401'
        '404':
          description: Project not found or does not belong to account
        '500':
          $ref: '#/components/responses/500'
      security:
        - BearerAuth: []
      x-speakeasy-group: statsProjects
      x-speakeasy-name-override: get
  /stats/medias/{media-id}:
    get:
      summary: Stats:Media Show
      description: >
        Retrieve stats for a video. This endpoint provides statistics for a specific video identified by its media-id.


        ## Requires api token with one of the following permissions

        ```

        Read, update & delete anything

        Read all data

        Read all project and video data

        ```

      tags:
        - Stats:Media
      parameters:
        - name: media-id
          in: path
          required: true
          description: >-
            The hashed ID or ID of the video for which you want to retrieve stats.
          schema:
            oneOf:
              - type: string
                description: Hashed ID of the media (e.g., "4d23503f70")
              - type: integer
                description: Numeric ID of the media (e.g., 22570)
      responses:
        '200':
          description: Success response with the stats of the video.
          content:
            application/json:
              schema:
                type: object
                properties:
                  load_count:
                    type: integer
                    description: The total number of times this video has been loaded.
                  play_count:
                    type: integer
                    description: The total number of times this video has been played.
                  play_rate:
                    type: number
                    format: float
                    description: >-
                      The percentage of visitors who clicked play (between 0 and 1).
                  hours_watched:
                    type: number
                    format: float
                    description: The total time spent watching this video.
                  engagement:
                    type: number
                    format: float
                    description: >-
                      The average percentage of the video that gets viewed (between 0 and 1).
                  visitors:
                    type: integer
                    description: >-
                      The total number of unique people that have loaded this video.
                  actions:
                    type: array
                    items:
                      type: object
                      properties:
                        type:
                          type: string
                          description: Type of action (e.g., "Call to Action").
                        action_count:
                          type: integer
                          description: Number of actions performed.
                        impression_count:
                          type: integer
                          description: Number of times the action was shown.
                        rate:
                          type: number
                          format: float
                          description: The rate of actions performed over impressions.
        '401':
          $ref: '#/components/responses/401'
        '404':
          description: Media not found or does not belong to account
        '500':
          $ref: '#/components/responses/500'
      security:
        - BearerAuth: []
      x-speakeasy-group: statsMedia
      x-speakeasy-name-override: get
  /stats/medias/{media-id}/by_date:
    get:
      summary: Stats:Media By Date
      description: >
        Retrieve stats for a media organized by day, between a start and end date paramater (inclusive). If start and end date are not provided, defaults to yesterday and today.


        ## Requires api token with one of the following permissions

        ```

        Read, update & delete anything

        Read all data

        Read all project and video data

        ```

      tags:
        - Stats:Media
      parameters:
        - in: path
          name: media-id
          required: true
          schema:
            type: string
          description: The ID of the media
        - in: query
          name: start_date
          required: false
          example: '2024-02-21'
          schema:
            type: string
            format: date
          description: The start date for the stats, formatted YYYY-MM-DD
        - in: query
          name: end_date
          required: false
          example: '2024-02-23'
          schema:
            type: string
            format: date
          description: The end date for the stats, formatted YYYY-MM-DD
      responses:
        '200':
          description: A list of media stats by date
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    date:
                      type: string
                      format: date
                    load_count:
                      type: integer
                    play_count:
                      type: integer
                    hours_watched:
                      type: number
        '401':
          $ref: '#/components/responses/401'
        '404':
          description: Media not found or does not belong to account
        '500':
          $ref: '#/components/responses/500'
      security:
        - BearerAuth: []
      x-speakeasy-group: statsMedia
      x-speakeasy-name-override: getByDate
  /stats/medias/{media-id}/engagement:
    get:
      summary: Stats:Media Engagement
      description: >
        Retrieve engagement data for a video. This endpoint provides engagement data for a specific video identified by its media-id.


        ## Requires api token with one of the following permissions

        ```

        Read, update & delete anything

        Read all data

        Read all project and video data

        ```

      tags:
        - Stats:Media
      parameters:
        - name: media-id
          in: path
          required: true
          description: >-
            The hashed ID or ID of the video for which you want to retrieve engagement data.
          schema:
            oneOf:
              - type: string
                description: Hashed ID of the media (e.g., "4d23503f70")
              - type: integer
                description: Numeric ID of the media (e.g., 22570)
      responses:
        '200':
          description: Success response with the engagement data of the video.
          content:
            application/json:
              schema:
                type: object
                properties:
                  engagement:
                    type: number
                    format: float
                    description: >-
                      The percentage of the video that was viewed, averaged across all viewing sessions.
                  engagement_data:
                    type: array
                    items:
                      type: integer
                    description: An array for creating an engagement graph.
                  rewatch_data:
                    type: array
                    items:
                      type: integer
                    description: >-
                      An array for creating the rewatch block on an engagement graph.
        '401':
          $ref: '#/components/responses/401'
        '404':
          description: Media not found or does not belong to account
        '500':
          $ref: '#/components/responses/500'
      security:
        - BearerAuth: []
      x-speakeasy-group: statsMedia
      x-speakeasy-name-override: getEngagement
  /stats/visitors:
    get:
      summary: Stats:Visitors List
      description: >
        This endpoint provides a list of visitors that have watched videos in your account.


        ## Requires api token with one of the following permissions

        ```

        Read, update & delete anything

        Read all data

        Read all project and video data

        ```

      tags:
        - Stats:Visitors
      parameters:
        - name: page
          in: query
          description: The page of results based on the per_page parameter.
          schema:
            type: integer
        - name: per_page
          in: query
          description: The maximum number of results to return, capped at 100.
          schema:
            type: integer
        - name: filter
          in: query
          description: Filtering parameter to narrow down the list of visitors.
          schema:
            type: string
            enum:
              - has_name
              - has_email
              - identified_by_email_gate
        - name: search
          in: query
          description: Search for visitors based on name or email address.
          schema:
            type: string
      responses:
        '200':
          description: Successful response with a list of visitors.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Visitor'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
      security:
        - BearerAuth: []
      x-speakeasy-group: statsVisitors
      x-speakeasy-name-override: list
  /stats/visitors/{visitor-key}:
    get:
      summary: Stats:Visitors Show
      description: |
        This endpoint provides detailed information about a specific visitor.

        ## Requires api token with one of the following permissions
        ```
        Read, update & delete anything
        Read all data
        Read all project and video data
        ```
      tags:
        - Stats:Visitors
      parameters:
        - name: visitor-key
          in: path
          required: true
          description: The unique key of the visitor.
          schema:
            type: string
      responses:
        '200':
          description: Successful response with details of a single visitor.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Visitor'
        '401':
          $ref: '#/components/responses/401'
        '404':
          description: Visitor not found
        '500':
          $ref: '#/components/responses/500'
      security:
        - BearerAuth: []
      x-speakeasy-group: statsVisitors
      x-speakeasy-name-override: get
  /stats/events:
    get:
      summary: Stats:Events List
      description: >
        Retrieve a list of events. Please note that due to our data retention policy,

        only events from the last 2 years are available.


        ## Requires api token with one of the following permissions

        ```

        Read, update & delete anything

        Read all data

        Read all project and video data

        ```

      tags:
        - Stats:Events
      parameters:
        - name: media_id
          in: query
          description: An optional identifier for a specific video.
          schema:
            type: string
        - name: visitor_key
          in: query
          description: An optional identifier for a specific visitor.
          schema:
            type: string
        - name: per_page
          in: query
          description: Maximum number of events to retrieve (capped at 100).
          schema:
            type: integer
        - name: page
          in: query
          description: The page of events to get data from.
          schema:
            type: integer
        - name: start_date
          in: query
          description: Start date in the format 'YYYY-MM-DD'.
          schema:
            type: string
            format: date
        - name: end_date
          in: query
          description: End date in the format 'YYYY-MM-DD'.
          schema:
            type: string
            format: date
      responses:
        '200':
          description: Successful response with a list of events.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Event'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
      security:
        - BearerAuth: []
      x-speakeasy-group: statsEvents
      x-speakeasy-name-override: list
  /stats/events/{event-key}:
    get:
      summary: Stats:Events Show
      description: >
        Retrieve information for a single event. Please note that due to our data retention policy,

        only events from the last 2 years are available.


        ## Requires api token with one of the following permissions

        ```

        Read, update & delete anything

        Read all data

        Read all project and video data

        ```

      tags:
        - Stats:Events
      parameters:
        - name: event-key
          in: path
          required: true
          description: The unique key of the event.
          schema:
            type: string
      responses:
        '200':
          description: Successful response with the details of a single event.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
        '401':
          $ref: '#/components/responses/401'
        '404':
          description: Event not found
        '500':
          $ref: '#/components/responses/500'
      security:
        - BearerAuth: []
      x-speakeasy-group: statsEvents
      x-speakeasy-name-override: get
  /:
    post:
      summary: Upload or Import Media
      description: |
        Endpoint to upload media files from a local system or import from a web URL.

        - Use `multipart/form-data` with a `file` parameter to upload from local system
        - Use `application/x-www-form-urlencoded` with a `url` parameter to import from web URL
      tags:
        - Upload or Import Media
      requestBody:
        content:
          multipart/form-data:
            schema:
              allOf:
                - $ref: '#/components/schemas/CommonUploadProperties'
                - type: object
                  required:
                    - file
                  properties:
                    file:
                      type: string
                      format: binary
                      description: The media file, multipart-form encoded into the request body.
          application/x-www-form-urlencoded:
            schema:
              allOf:
                - $ref: '#/components/schemas/CommonUploadProperties'
                - type: object
                  required:
                    - url
                  properties:
                    url:
                      type: string
                      format: uri
                      example: http://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4
                      description: The web location of the media file to import.
                    low_priority:
                      type: boolean
                      example: true
                      description: Inform the encoding service that this upload can be considered lower priority than others. This is especially useful for platform customers doing bulk uploads or migrations. Setting this to "false" has no effect.
      responses:
        '200':
          description: Successfully uploaded or imported.
          content:
            application/json:
              schema:
                type: object
                description: Response after successfully uploading or importing media
                properties:
                  id:
                    type: integer
                    description: A unique numeric identifier for the media within the system.
                  name:
                    type: string
                    description: The display name of the media.
                  type:
                    type: string
                    description: A string representing what type of media this is.
                  created:
                    type: string
                    format: date-time
                    description: The date when the media was originally uploaded.
                  updated:
                    type: string
                    format: date-time
                    description: The date when the media was last changed.
                  duration:
                    type: number
                    description: Specifies the length (in seconds) for audio and video files.
                  hashed_id:
                    type: string
                    description: A unique alphanumeric identifier for this media.
                  progress:
                    type: number
                    minimum: 0
                    maximum: 1
                    description: A floating point value between 0 and 1 that indicates the progress of the processing for this file.
                  thumbnail:
                    $ref: '#/components/schemas/Thumbnail'
        '400':
          description: Error due to reaching the video limit of your account or other issues.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: object
                    properties:
                      code:
                        type: string
                      detail:
                        type: string
              examples:
                missing_credentials:
                  value:
                    code: upload_failed
                    detail: '''api_password'' or ''access_token'' are required'
        '401':
          description: Authorization error. Check your access_token.
          content:
            text/html: {}
    servers:
      - url: https://upload.wistia.com
components:
  schemas:
    Account:
      type: object
      properties:
        id:
          type: integer
          description: Numeric id of the account
        name:
          type: string
          description: Account name
        url:
          type: string
          description: Account’s main Wistia URL (e.g. http://brendan.wistia.com)
        mediaCount:
          type: integer
          description: The total number of medias in this account
        videoLimit:
          type: integer
          description: The account's video limit
        projectCount:
          type: integer
          description: The total number of projects in this account
        channelCount:
          type: integer
          description: The total number of channels in this account
      required:
        - id
        - name
        - url
        - mediaCount
        - videoLimit
        - projectCount
        - channelCount
    Project:
      type: object
      properties:
        id:
          type: integer
          description: A unique numeric identifier for the project within the system.
          example: 22570
        name:
          type: string
          description: The project’s display name.
          example: My Project Title
        description:
          type: string
          nullable: true
          description: The project’s description.
          example: About My Project
        mediaCount:
          type: integer
          description: >-
            The number of different medias that have been uploaded to the project.
          example: 2
        created:
          type: string
          description: The date that the project was originally created.
          format: date-time
          example: '2010-08-13T18:47:39+00:00'
        updated:
          type: string
          description: The date that the project was last updated.
          format: date-time
          example: '2010-08-19T21:47:00+00:00'
        hashedId:
          type: string
          description: >-
            A private hashed id, uniquely identifying the project within the system.
          example: 4d23503f70
        public:
          type: boolean
          description: >-
            A boolean indicating whether the project is available for public (anonymous) viewing.
          example: false
        publicId:
          type: string
          nullable: true
          description: >-
            If the project is public, this field contains a string representing the ID used for referencing the project in public URLs.
          example: 4bD
        anonymousCanUpload:
          type: boolean
          example: false
        anonymousCanDownload:
          type: boolean
          example: false
      required:
        - id
        - name
        - mediaCount
        - created
        - updated
        - hashedId
        - public
        - publicId
    ProjectWithMedias:
      type: object
      properties:
        id:
          type: integer
          description: A unique numeric identifier for the project within the system.
          example: 22570
        name:
          type: string
          description: The project's display name.
          example: My Project Title
        description:
          type: string
          nullable: true
          description: The project's description.
          example: About My Project
        medias:
          type: array
          items:
            $ref: '#/components/schemas/no_asset_media_schema_Media'
        mediaCount:
          type: integer
          description: >-
            The number of different medias that have been uploaded to the project.
          example: 2
        created:
          type: string
          description: The date that the project was originally created.
          format: date-time
          example: '2010-08-13T18:47:39+00:00'
        updated:
          type: string
          description: The date that the project was last updated.
          format: date-time
          example: '2010-08-19T21:47:00+00:00'
        hashedId:
          type: string
          description: >-
            A private hashed id, uniquely identifying the project within the system.
          example: 4d23503f70
        public:
          type: boolean
          description: >-
            A boolean indicating whether the project is available for public (anonymous) viewing.
          example: false
        publicId:
          type: string
          nullable: true
          description: >-
            If the project is public, this field contains a string representing the ID used for referencing the project in public URLs.
          example: 4bD
        anonymousCanUpload:
          type: boolean
          example: false
        anonymousCanDownload:
          type: boolean
          example: false
      required:
        - id
        - name
        - mediaCount
        - created
        - updated
        - hashedId
        - public
        - publicId
    Media:
      type: object
      properties:
        id:
          type: integer
          description: A unique numeric identifier for the media within the system.
        name:
          type: string
          description: The display name of the media.
        type:
          type: string
          enum:
            - Video
            - Audio
            - Image
            - PdfDocument
            - MicrosoftOfficeDocument
            - Swf
            - UnknownType
          description: A string representing what type of media this is.
        archived:
          type: boolean
          description: Whether or not the media is archived, either true or false.
        created:
          type: string
          format: date-time
          description: The date when the media was originally uploaded.
        updated:
          type: string
          format: date-time
          description: The date when the media was last changed.
        duration:
          type: number
          description: >-
            Specifies the length (in seconds) for audio and video files. Specifies number of pages in the document. Omitted for other types of media.
        embedCode:
          type: string
          deprecated: true
          description: >
            DEPRECATED: If you want to programmatically embed videos, follow the construct an embed code guide.

        hashed_id:
          type: string
          description: A unique alphanumeric identifier for this media.
        description:
          type: string
          description: >-
            A description for the media which usually appears near the top of the sidebar on the media's page.
        progress:
          type: number
          minimum: 0
          maximum: 1
          description: >-
            A floating point value between 0 and 1 that indicates the progress of the processing for this file.
        status:
          type: string
          enum:
            - queued
            - processing
            - ready
            - failed
          description: >
            Post upload processing status. - `queued`: the file is waiting in the queue to be processed. - `processing`: the file is actively being processed. - `ready`: the file has been fully processed and is ready for embedding and viewing. - `failed`: the file was unable to be processed (usually a format or size error).

        section:
          type: string
          description: >-
            The title of the section in which the media appears. This attribute is omitted if the media is not in a section (default).
        subfolder:
          $ref: '#/components/schemas/Subfolder'
          nullable: true
          description: >-
            The subfolder (media group) in which the media appears. Null if the media is not in a subfolder.
        thumbnail:
          $ref: '#/components/schemas/Thumbnail'
        project:
          $ref: '#/components/schemas/slim_project_schema_Project'
        assets:
          type: array
          description: An array of the assets available for this media.
          items:
            $ref: '#/components/schemas/Asset'
    Tag:
      type: object
      properties:
        name:
          type: string
          description: The tag’s display name.
          example: My tag Title
        taggingsCount:
          type: integer
          description: >-
            The number of different medias that have been associated with this tag.
          example: 2
        created:
          type: string
          description: The date that the tag was originally created.
          format: date-time
          example: '2010-08-13T18:47:39+00:00'
        updated:
          type: string
          description: The date that the tag was last updated.
          format: date-time
          example: '2010-08-19T21:47:00+00:00'
    Channel:
      type: object
      properties:
        channels:
          type: object
          properties:
            id:
              type: integer
              description: The numeri d of the channel.
            created:
              type: string
              format: date-time
              description: The date when the channel was originally created.
            description:
              type: string
              description: The channel's description.
            hashedId:
              type: string
              description: A unique alphanumeric identifier for this channel.
            mediaCount:
              type: integer
              description: The number of medias in the channel.
            name:
              type: string
              description: The display name for the channel
            updated:
              type: string
              format: date-time
              description: The date when the channel was last updated.
          required:
            - id
            - created
            - description
            - hashedId
            - mediaCount
            - name
            - updated
    ChannelEpisode:
      type: object
      properties:
        channels:
          type: object
          properties:
            channelHashedId:
              type: string
              description: >-
                A unique alphanumeric identifier for the channel episode's channel.
            created:
              type: string
              format: date-time
              description: The date when the channel episode was originally created.
            description:
              type: string
              description: The channel episode's description or episode notes.
            summary:
              type: string
              description: >-
                A short summary of the episode that is displayed when space is limited.
              example: A short description.
            hashedId:
              type: string
              description: A unique alphanumeric identifier for the channel episode.
            mediaHashedId:
              type: string
              description: >-
                A unique alphanumeric identifier for the channel episode's media.
            published:
              type: boolean
              description: >-
                Whether the channel episode has been published or is still in draft form.
            publish_at:
              type: string
              format: date-time
              description: >-
                The date and time when the episode is scheduled to be published in UTC timezone (only present when publish_status is 'scheduled').
              example: '2024-12-31T23:59:59Z'
            title:
              type: string
              description: The title of the channel episode
            updated:
              type: string
              format: date-time
              description: The date when the channel was last updated.
          required:
            - channelHashedId
            - created
            - description
            - summary
            - hashedId
            - mediaHashedId
            - published
            - title
            - updated
    BackgroundJobStatus:
      type: object
      description: Status of the background job.
      properties:
        id:
          type: integer
          description: The ID of the background job that's been queued for the request.
        status:
          type: string
          description: The status of the background job that's been queued for the request.
          enum:
            - queued
            - started
            - finished
            - failed
      required:
        - id
        - status
    ExpiringAccessTokenInput:
      type: object
      properties:
        expires_at:
          type: string
          format: iso8601
          description: >-
            an ISO8601 string of when the token will expire, defaults to two days from creation
        authorizations:
          type: array
          description: a list of authorizations the token will have
          items:
            type: object
            properties:
              type:
                type: string
                description: >-
                  The type of object the permission is being performed on, only media is currently supported
              id:
                type: string
                description: >-
                  The hashed if of the object the permissions are being performed on.
              permissions:
                type: array
                description: >-
                  The types of permissions, currently only supports edit-transcripts
                items:
                  type: string
            required:
              - type
              - id
              - permissions
    ExpiringAccessTokenResponse:
      type: object
      properties:
        token:
          type: string
          description: >-
            A token which can be used to authorize requests to Wistia. Currently only for doing transcript embeds.
    Caption:
      type: object
      properties:
        captions:
          type: object
          properties:
            english_name:
              type: string
              description: English name of the language.
            native_name:
              type: string
              description: Native name of the language.
            language:
              type: string
              description: A 3 character language code as specified by ISO-639–2.
            text:
              type: string
              description: >-
                The text of the captions for the specified language in SRT format.
            is_draft:
              type: boolean
            id:
              type: string
              description: The unique hashed identifier of the time-coded transcript.
    Localization:
      type: object
      properties:
        hashed_id:
          type: string
          description: A unique alphanumeric identifier for this localization.
        language_code:
          type: string
          description: A 3-character language code as specified by IETF.
        iso639_2_language_code:
          type: string
          description: A 2-character language code as specified by ISO-639–2.
        language_name:
          type: string
          description: The name of the language in English.
        native_language_name:
          type: string
          description: The name of the language in the language of the localization.
        created_at:
          type: string
          format: date-time
          description: The date when the localization was created.
        updated_at:
          type: string
          format: date-time
          description: The date when the localization was last updated.
        ordered_at:
          type: string
          format: date-time
          description: The date when the localization was ordered.
          nullable: true
        enabled_at:
          type: string
          format: date-time
          description: The date when the localization was enabled.
          nullable: true
        enabled:
          type: boolean
          description: Whether or not the localization is enabled.
        source_media:
          $ref: '#/components/schemas/SourceMedia'
        transcript:
          $ref: '#/components/schemas/LocalizationTranscript'
      required:
        - hashed_id
        - language_code
        - iso639_2_language_code
        - language_name
        - native_language_name
        - created_at
        - updated_at
        - ordered_at
        - enabled_at
        - enabled
        - source_media
    Trims:
      type: object
      properties:
        trims:
          type: array
          description: >-
            An array of strings matching the format of HH:MM:SS.mmm-HH:MM:SS.mmm where HH is hours, MM is minutes, SS is seconds and mmm is milliseconds. The ranges should contain the earliest point of the trim first and the later point of the trim second.
          items:
            type: string
    VideoCustomization:
      type: object
      properties:
        autoPlay:
          type: boolean
          description: >-
            If set to true, the video will play as soon as it’s ready. Note that autoplay might not work on some devices and browsers.
        controlsVisibleOnLoad:
          type: boolean
          description: >-
            If set to true, controls like the big play button, playbar, volume, etc. will be visible as soon as the video is embedded.
        copyLinkAndThumbnailEnabled:
          type: boolean
          description: >-
            If set to false, the option to “Copy Link and Thumbnail” will be removed when right-clicking on the video.
        doNotTrack:
          type: boolean
          description: If set to true, data for each viewing session will not be tracked.
        email:
          type: string
          description: >-
            Associate a specific email address with this video’s viewing sessions.
        endVideoBehavior:
          type: string
          description: >-
            Determines what happens when the video ends. Options are default (stays on the last frame), reset (shows thumbnail and controls), and loop (plays again from the start).
        fakeFullscreen:
          type: boolean
          description: >-
            If set to true, the video will try to play in a pseudo-fullscreen mode on certain mobile devices.
        fitStrategy:
          type: string
          description: >-
            Resizes the video when there's a discrepancy between its aspect ratio and that of its parent container. Options are contain, cover, fill, and none.
        fullscreenButton:
          type: boolean
          description: >-
            If set to true, the fullscreen button will be available as a video control.
        fullscreenOnRotateToLandscape:
          type: boolean
          description: >-
            If set to false, the video will not automatically go to fullscreen mode on mobile when rotated to landscape.
        keyMoments:
          type: boolean
          description: If set to false, the key moments feature will be disabled.
        muted:
          type: boolean
          description: If set to true, the video will start in a muted state.
        playbackRateControl:
          type: boolean
          description: >-
            If set to false, the playback speed controls in the settings menu will be hidden.
        playbar:
          type: boolean
          description: >-
            If set to true, the playbar will be available. If set to false, it will be hidden.
        playButton:
          type: boolean
          description: Indicates if the play button is visible.
        playerColor:
          type: string
          description: >-
            Changes the base color of the player. Expects a hexadecimal rgb string.
        playlistLinks:
          type: boolean
          description: >-
            Enables the use of specially crafted links on the page to associate with a video, turning them into a playlist.
        playlistLoop:
          type: boolean
          description: >-
            If set to true and this video has a playlist, it will loop back to the first video after the last one has finished.
        playsinline:
          type: boolean
          description: If set to false, videos will play within the native mobile player.
        playPauseNotifier:
          type: boolean
          description: >-
            If set to false, animations for the Pause and Play symbols will be removed.
        playSuspendedOffScreen:
          type: boolean
          description: >-
            If set to false for a muted autoplay video, the video won't pause when out of view.
        plugin:
          type: object
          properties:
            videoThumbnail:
              type: object
              properties:
                clickToPlayButton:
                  type: boolean
                  description: >-
                    If set to false, removes the “Click to Play” button on video thumbnails.
            socialbar-v1:
              type: object
              properties:
                buttons:
                  type: string
                showTweetCount:
                  type: boolean
                tweetText:
                  type: string
                height:
                  type: integer
            chapters:
              type: object
              properties:
                visibleOnLoad:
                  type: boolean
                chapterList:
                  type: array
                  items:
                    type: object
                    properties:
                      id:
                        type: integer
                      title:
                        type: string
                      time:
                        type: number
                      deleted:
                        type: boolean
                'on':
                  type: boolean
            postRoll-v1:
              type: object
              description: Adds a Call To Action to your Video
              properties:
                rewatch:
                  type: boolean
                  description: If set to true, allows the video to be rewatched.
                text:
                  type: string
                  description: The URL of the text to be displayed.
                link:
                  type: string
                  description: The URL of the link to be displayed.
                time:
                  description: >-
                    The time when the post-roll should be displayed. Can be a string like "end" or a number representing seconds.
                  oneOf:
                    - type: string
                    - type: number
                autoSize:
                  type: boolean
                  description: >-
                    If set to true, the post-roll will automatically adjust its size.
                style:
                  type: object
                  properties:
                    backgroundColor:
                      type: string
                      description: The background color of the post-roll.
                      example: '#303030'
                ctaType:
                  type: string
                  description: >-
                    The type of call-to-action to be displayed. Typically set to "text". Other options are "image" which allows for "altText", and "html".
                  example: text
                'on':
                  type: boolean
                  description: If set to true, the post-roll is enabled.
                conversionOpportunityKey:
                  type: string
                  description: The key used for tracking conversion opportunities.
            captions-v1:
              type: object
              description: Enables closed captions for the video
              properties:
                'on':
                  type: boolean
                  description: >-
                    If set to true, the captions plugin is enabled and captions controls will be available to viewers.
                onByDefault:
                  type: boolean
                  description: >-
                    If set to true, captions will be turned on automatically when the video loads. Only takes effect when the captions plugin is enabled.
        preload:
          type: string
          description: >-
            Sets the video’s preload property. Possible values are metadata, auto, none, true, and false.
        qualityControl:
          type: boolean
          description: >-
            If set to false, the video quality selector in the settings menu will be hidden.
        qualityMax:
          type: integer
          description: Specifies the maximum quality the video will play at.
        qualityMin:
          type: integer
          description: Specifies the minimum quality the video will play at.
        resumable:
          type: string
          description: >-
            Determines if the video should resume from where the viewer left off. Options are true, false, and auto.
        seo:
          type: boolean
          description: >-
            If set to true, the video’s metadata will be injected into the page’s markup for SEO.
        settingsControl:
          type: boolean
          description: If set to true, the settings control will be available.
        silentAutoPlay:
          type: string
          description: >-
            Determines how videos handle autoplay in contexts where normal autoplay might be blocked. Options are true, allow, and false.
        smallPlayButton:
          type: boolean
        stillUrl:
          type: string
          description: Overrides the thumbnail image that appears before the video plays.
        time:
          type: string
          description: Sets the starting time of the video.
        thumbnailAltText:
          type: string
          description: Sets the Thumbnail Alt Text for the media.
        videoFoam:
          description: >-
            When set to true, the video will adjust its size according to its parent element. It can also be an object specifying min/max width or height.
          anyOf:
            - type: boolean
              example: true
            - type: object
              properties:
                minWidth:
                  type: integer
                  description: Minimum width the video can be resized to.
                maxWidth:
                  type: integer
                  description: Maximum width the video can be resized to.
                minHeight:
                  type: integer
                  description: Minimum height the video can be resized to.
                maxHeight:
                  type: integer
                  description: Maximum height the video can be resized to.
              description: |
                Examples:
                ```json
                {
                  "minWidth": 400,
                  "maxWidth": 960
                }
                ```
                ```json
                {
                  "minHeight": 300,
                  "maxHeight": 450
                }
                ```
        volume:
          type: number
          description: Sets the volume of the video.
        volumeControl:
          type: boolean
          description: When set to true, a volume control is available over the video.
        wmode:
          type: string
          description: >-
            If set to transparent, the background behind the player will be transparent instead of black.
    VideoCustomizationResponse:
      type: object
      properties:
        playerColor:
          type: string
          description: The color of the video player.
        stillUrl:
          type: string
        autoPlay:
          type: string
          description: Whether the video should auto play or not.
        bpbTime:
          type: string
        controlsVisibleOnLoad:
          type: string
        endVideoBehavior:
          type: string
          description: Behavior of the video at the end.
        fullscreenButton:
          type: string
        branding:
          type: string
        playbar:
          type: string
        playButton:
          type: string
          description: Indicates if the play button is visible.
        settingsControl:
          type: string
        showCustomerLogo:
          type: string
        qualityControl:
          type: string
        playbackRateControl:
          type: string
        smallPlayButton:
          type: string
        spherical:
          type: string
        volumeControl:
          type: string
        copyLinkAndThumbnailEnabled:
          type: string
        doNotTrack:
          type: string
        email:
          type: string
        fitStrategy:
          type: string
        fullscreenOnRotateToLandscape:
          type: string
        muted:
          type: string
        playlistLinks:
          type: string
        playlistLoop:
          type: string
        playsinline:
          type: string
        playPauseNotifier:
          type: string
        playSuspendedOffScreen:
          type: string
        preload:
          type: string
        qualityMax:
          type: string
        qualityMin:
          type: string
        resumable:
          type: string
        seo:
          type: string
        silentAutoPlay:
          type: string
        time:
          type: string
        thumbnailAltText:
          type: string
        videoFoam:
          type: string
        volume:
          type: string
        wmode:
          type: string
        plugin:
          type: object
          properties:
            passwordProtectedVideo:
              type: object
              properties:
                'on':
                  type: string
                src:
                  type: string
                challenge:
                  type: string
                async:
                  type: string
            videoThumbnail:
              type: object
              properties:
                clickToPlayButton:
                  type: string
            captions-v1:
              type: object
              description: Captions plugin configuration (response format)
              properties:
                'on':
                  type: string
                  description: >-
                    String representation of whether the captions plugin is enabled ("true" or "false").
                onByDefault:
                  type: string
                  description: >-
                    String representation of whether captions are turned on by default ("true" or "false").
        private:
          type: object
          properties:
            password_protect_on:
              type: string
            show_comments:
              type: string
        encrypted:
          type: object
          properties:
            password_protect_password:
              type: string
    ProjectSharingResponse:
      type: object
      description: The response includes a link for the user to access the project.
      properties:
        project:
          type: string
          format: uri
          example: http://myaccount.wistia.com/folders/13
        sharing:
          $ref: '#/components/schemas/ProjectSharingSchema'
    ProjectSharingSchema:
      type: object
      properties:
        id:
          type: integer
          example: 14
        isAdmin:
          type: boolean
          example: true
        canShare:
          type: boolean
          example: true
        canDownload:
          type: boolean
          example: true
        canUpload:
          type: boolean
          example: true
        share:
          type: object
          properties:
            id:
              type: integer
              example: 3
            name:
              type: string
              example: Jim
            type:
              type: string
              example: Contact
            email:
              type: string
              format: email
              example: jim@wistia.com
        project:
          type: object
          properties:
            id:
              type: integer
              example: 13
            name:
              type: string
              example: My Project
    LiveStreamEvent:
      type: object
      properties:
        id:
          type: string
          description: The hashed ID of the live stream event
          example: abc123def456
        title:
          type: string
          description: The title of the live stream event
          example: 'Wellness Session: Coping with Outie Memories'
        description:
          type: string
          nullable: true
          description: The description of the live stream event
          example: A comprehensive session on managing work-life balance
        scheduled_for:
          type: string
          format: date-time
          nullable: true
          description: The scheduled start time in W3C format with timezone
          example: '2024-03-20T15:30:00-05:00'
        event_duration:
          type: integer
          nullable: true
          description: Duration of the event in minutes
          example: 60
        lifecycle_status:
          type: string
          description: Current lifecycle status of the event
          example: scheduled
        registration_status:
          type: string
          description: Registration status of the event
          example: published
        created_at:
          type: string
          format: date-time
          description: When the event was created (UTC)
          example: '2024-03-15T10:30:00Z'
        updated_at:
          type: string
          format: date-time
          description: When the event was last updated (UTC)
          example: '2024-03-15T10:30:00Z'
        audience_link:
          type: string
          description: Link for the audience to join the event
          example: https://lumon-industries.wistia.com/live/events/abc123def456
        host_link:
          type: string
          description: Link for the host to manage the event
          example: https://lumon-industries.wistia.com/live/onair/abc123def456/
      required:
        - id
        - title
        - lifecycle_status
        - registration_status
        - created_at
        - updated_at
        - audience_link
        - host_link
    CreateLiveStreamEvent:
      type: object
      properties:
        title:
          type: string
          description: The title of the live stream event
          example: 'Wellness Session: Coping with Outie Memories'
        description:
          type: string
          description: The description of the live stream event
          example: A comprehensive session on managing work-life balance
        scheduled_for:
          type: string
          format: date-time
          description: The scheduled start time in W3C format with timezone
          example: '2024-03-20T15:30:00-05:00'
        event_duration:
          type: integer
          minimum: 15
          description: Duration of the event in minutes (minimum 15)
          example: 60
      required:
        - title
        - scheduled_for
        - event_duration
    UpdateLiveStreamEvent:
      type: object
      properties:
        live_stream_event:
          type: object
          properties:
            title:
              type: string
              description: The title of the live stream event
              example: Updated Event Title
            description:
              type: string
              description: The description of the live stream event
              example: Updated event description
            scheduled_for:
              type: string
              format: date-time
              description: The scheduled start time in W3C format with timezone
              example: '2024-03-20T15:30:00-05:00'
            event_duration:
              type: integer
              minimum: 15
              description: Duration of the event in minutes (minimum 15)
              example: 90
    CreateLiveStreamEventResponse:
      type: object
      properties:
        id:
          type: string
          description: The hashed ID of the created live stream event
          example: abc123def456
        audience_link:
          type: string
          description: Link for the audience to join the event
          example: https://lumon-industries.wistia.com/live/events/abc123def456
        host_link:
          type: string
          description: Link for the host to manage the event
          example: https://lumon-industries.wistia.com/live/onair/abc123def456/
      required:
        - id
        - audience_link
        - host_link
    Subfolder:
      type: object
      description: A subfolder within a project that contains media files.
      properties:
        hashed_id:
          type: string
          description: A unique alphanumeric identifier for this subfolder.
          example: abc123def4
        name:
          type: string
          nullable: true
          description: The display name of the subfolder.
          example: Marketing Videos
        description:
          type: string
          nullable: true
          description: A description for the subfolder.
          example: Collection of all marketing and promotional videos
        position:
          type: integer
          nullable: true
          description: >-
            The position of this subfolder within its project, used for ordering.
          example: 1
        created:
          type: string
          format: date-time
          description: The date when the subfolder was created.
          example: '2024-01-15T10:30:00+00:00'
          nullable: true
        updated:
          type: string
          format: date-time
          description: The date when the subfolder was last modified.
          example: '2024-01-20T14:45:00+00:00'
          nullable: true
      required:
        - hashed_id
        - position
        - created
        - updated
    SubfolderWithMedia:
      type: object
      description: A subfolder with its contained media files.
      allOf:
        - $ref: '#/components/schemas/Subfolder'
        - type: object
          properties:
            medias:
              type: array
              description: Array of media files contained in this subfolder.
              items:
                $ref: '#/components/schemas/Media'
    SubfolderInput:
      type: object
      description: Input data for creating or updating a subfolder.
      properties:
        name:
          type: string
          description: The display name of the subfolder.
          example: Marketing Videos
          maxLength: 255
        description:
          type: string
          nullable: true
          description: A description for the subfolder.
          example: Collection of all marketing and promotional videos
          maxLength: 1000
      required:
        - name
    CreateProject:
      type: object
      properties:
        name:
          type: string
          description: The name of the project you want to create.
          example: My New Project
        adminEmail:
          type: string
          description: >-
            The email address of the person you want to set as the owner of this project. Defaults to the Wistia Account Owner.
          example: admin@example.com
        public:
          oneOf:
            - type: string
              description: >-
                A flag indicating whether or not the project is enabled for public access. Set to “1” to enable and “0” to disable.
              enum:
                - '0'
                - '1'
            - type: boolean
              description: >-
                A flag indicating whether or not the project is enabled for public access. Set to `true` to enable and `false` to disable.
              example: false
    Thumbnail:
      type: object
      properties:
        url:
          type: string
        width:
          type: integer
        height:
          type: integer
    no_asset_media_schema_Media:
      type: object
      properties:
        id:
          type: integer
          description: A unique numeric identifier for the media within the system.
        name:
          type: string
          description: The display name of the media.
        type:
          type: string
          description: A string representing what type of media this is.
        archived:
          type: boolean
          description: Whether or not the media is archived, either true or false.
        created:
          type: string
          format: date-time
          description: The date when the media was originally uploaded.
        updated:
          type: string
          format: date-time
          description: The date when the media was last changed.
        duration:
          type: number
          description: >-
            Specifies the length (in seconds) for audio and video files. Specifies number of pages in the document. Omitted for other types of media.
        hashed_id:
          type: string
          description: A unique alphanumeric identifier for this media.
        description:
          type: string
          description: >-
            A description for the media which usually appears near the top of the sidebar on the media's page.
        progress:
          type: number
          description: >-
            A floating point value between 0 and 1 that indicates the progress of the processing for this file.
        status:
          type: string
          description: >
            Post upload processing status. - `queued`: the file is waiting in the queue to be processed. - `processing`: the file is actively being processed. - `ready`: the file has been fully processed and is ready for embedding and viewing. - `failed`: the file was unable to be processed (usually a format or size error).

        subfolder:
          $ref: '#/components/schemas/Subfolder'
          nullable: true
          description: >-
            The subfolder (media group) in which the media appears. Null if the media is not in a subfolder.
        thumbnail:
          $ref: '#/components/schemas/Thumbnail'
    UpdateProject:
      type: object
      properties:
        name:
          type: string
          description: The project’s new name.
          example: My New Project Name
        description:
          type: string
          description: The project’s new description.
          example: My New Project Description
        anonymousCanUpload:
          type: boolean
          description: Whether anonymous users can upload media to the project.
        anonymousCanDownload:
          type: boolean
          description: Whether anonymous users can download media from the project.
        public:
          oneOf:
            - type: string
              description: >-
                A flag indicating whether or not the project is enabled for public access. Set to “1” to enable and “0” to disable.
              enum:
                - '0'
                - '1'
            - type: boolean
              description: >-
                A flag indicating whether or not the project is enabled for public access. Set to `true` to enable and `false` to disable.
              example: false
    slim_project_schema_Project:
      type: object
      properties:
        id:
          type: integer
          description: A unique numeric identifier for the project within the system.
          example: 22570
        name:
          type: string
          description: The project’s display name.
          example: My Project Title
        hashedId:
          type: string
          description: >-
            A private hashed id, uniquely identifying the project within the system.
          example: 4d23503f70
    Asset:
      type: object
      properties:
        url:
          type: string
          description: A direct-access URL to the content of the asset.
        width:
          type: integer
          description: The width of this specific asset, if applicable.
        height:
          type: integer
          description: The height of this specific asset, if applicable.
        fileSize:
          type: integer
          description: >-
            The size of the asset file that’s referenced by url, measured in bytes.
        contentType:
          type: string
          description: The asset’s content type.
        type:
          type: string
          description: >
            The internal type of the asset, describing how the asset should be used. Values can include OriginalFile, FlashVideoFile, MdFlashVideoFile, HdFlashVideoFile, Mp4VideoFile, MdMp4VideoFile, HdMp4VideoFile, IPhoneVideoFile, StillImageFile, SwfFile, Mp3AudioFile, and LargeImageFile.

    ProjectSharingDetail:
      type: object
      properties:
        id:
          type: integer
          example: 14
        isAdmin:
          type: boolean
          example: true
        canShare:
          type: boolean
          example: true
        canDownload:
          type: boolean
          example: true
        canUpload:
          type: boolean
          example: true
        share:
          type: object
          properties:
            id:
              type: integer
              example: 3
            name:
              type: string
              example: Jim
            type:
              type: string
              example: Contact
            email:
              type: string
              format: email
              example: jim@wistia.com
        project:
          type: object
          properties:
            id:
              type: integer
              example: 13
            name:
              type: string
              example: My Project
    CreateProjectSharing:
      type: object
      properties:
        sharing:
          type: object
          properties:
            with:
              type: string
              description: >-
                The email address of the person with whom you want to share the project.
              format: email
            requirePassword:
              oneOf:
                - type: string
                  description: >-
                    Default is "1". Set to "0" to allow access without a password.
                  enum:
                    - '0'
                    - '1'
                - type: boolean
                  description: A flag indicating whether or not a password is required.
                  example: false
            canShare:
              oneOf:
                - type: string
                  description: >-
                    Default is "0". Set to "1" to allow the user to share the project with others.
                  enum:
                    - '0'
                    - '1'
                - type: boolean
                  description: >-
                    Whether the user is allowed to share the project with others.
                  example: false
            canDownload:
              oneOf:
                - type: string
                  description: >-
                    Default is "0". Set to "1" to allow the user to download files from the project.
                  enum:
                    - '0'
                    - '1'
                - type: boolean
                  description: >-
                    Whether the user is allowed to download files from the project.
                  example: false
            canUpload:
              oneOf:
                - type: string
                  description: >-
                    Default is "0". Set to "1" to allow the user to upload files to the project.
                  enum:
                    - '0'
                    - '1'
                - type: boolean
                  description: Whether the user is allowed to upload files to the project.
                  example: false
            sendEmailNotification:
              type: string
              deprecated: true
              description: Deprecated! Email notifications are always sent now.
              enum:
                - '0'
                - '1'
          required:
            - with
      required:
        - sharing
    UpdateSharingRequest:
      type: object
      properties:
        sharing:
          type: object
          properties:
            canShare:
              type: boolean
              description: Allow the user or group to share the project with others.
            canDownload:
              type: boolean
              description: Allow the user or group to download media from the project.
            canUpload:
              type: boolean
              description: Allow the user or group to upload media to the project.
            isAdmin:
              type: boolean
              description: Give this user admin rights to the project.
    MediaWithCursor:
      allOf:
        - $ref: '#/components/schemas/Media'
        - type: object
          properties:
            cursor:
              type: string
              description: >-
                A cursor for stable pagination based on current `sort_by` order. You can pass this to `cursor_before` or `cursor_after` as a parameter to fetch the records before or after this record in the same sort order. This is only populated if medias were fetched with `use_cursor`, or `cursor_before` or `cursor_after`.
              nullable: true
    MediaShow:
      type: object
      properties:
        id:
          type: integer
          description: A unique numeric identifier for the media within the system.
        name:
          type: string
          description: The display name of the media.
        type:
          type: string
          enum:
            - Video
            - Audio
            - Image
            - PdfDocument
            - MicrosoftOfficeDocument
            - Swf
            - UnknownType
          description: A string representing what type of media this is.
        archived:
          type: boolean
          description: Whether or not the media is archived, either true or false.
        created:
          type: string
          format: date-time
          description: The date when the media was originally uploaded.
        updated:
          type: string
          format: date-time
          description: The date when the media was last changed.
        duration:
          type: number
          description: >-
            Specifies the length (in seconds) for audio and video files. Specifies number of pages in the document. Omitted for other types of media.
        embedCode:
          type: string
          deprecated: true
          description: >
            DEPRECATED: If you want to programmatically embed videos, follow the construct an embed code guide.

        hashed_id:
          type: string
          description: A unique alphanumeric identifier for this media.
        description:
          type: string
          description: >-
            A description for the media which usually appears near the top of the sidebar on the media's page.
        progress:
          type: number
          minimum: 0
          maximum: 1
          description: >-
            A floating point value between 0 and 1 that indicates the progress of the processing for this file.
        status:
          type: string
          enum:
            - queued
            - processing
            - ready
            - failed
          description: >
            Post upload processing status. - `queued`: the file is waiting in the queue to be processed. - `processing`: the file is actively being processed. - `ready`: the file has been fully processed and is ready for embedding and viewing. - `failed`: the file was unable to be processed (usually a format or size error).

        section:
          type: string
          description: >-
            The title of the section in which the media appears. This attribute is omitted if the media is not in a section (default).
        subfolder:
          $ref: '#/components/schemas/Subfolder'
          nullable: true
          description: >-
            The subfolder (media group) in which the media appears. Null if the media is not in a subfolder.
        tags:
          type: array
          description: Tags associated with this media.
          items:
            type: object
            properties:
              name:
                type: string
                description: The display name of the tag.
        thumbnail:
          $ref: '#/components/schemas/Thumbnail'
        project:
          $ref: '#/components/schemas/slim_project_schema_Project'
        assets:
          type: array
          description: An array of the assets available for this media.
          items:
            $ref: '#/components/schemas/Asset'
    media_with_thumbnail_and_project_schema_Media:
      type: object
      properties:
        id:
          type: integer
          description: A unique numeric identifier for the media within the system.
        name:
          type: string
          description: The display name of the media.
        type:
          type: string
          enum:
            - Video
            - Audio
            - Image
            - PdfDocument
            - MicrosoftOfficeDocument
            - Swf
            - UnknownType
          description: A string representing what type of media this is.
        archived:
          type: boolean
          description: Whether or not the media is archived, either true or false.
        created:
          type: string
          format: date-time
          description: The date when the media was originally uploaded.
        updated:
          type: string
          format: date-time
          description: The date when the media was last changed.
        duration:
          type: number
          description: >-
            Specifies the length (in seconds) for audio and video files. Specifies number of pages in the document. Omitted for other types of media.
        embedCode:
          type: string
          deprecated: true
          description: >
            DEPRECATED: If you want to programmatically embed videos, follow the construct an embed code guide.

        hashed_id:
          type: string
          description: A unique alphanumeric identifier for this media.
        description:
          type: string
          description: >-
            A description for the media which usually appears near the top of the sidebar on the media’s page.
        progress:
          type: number
          minimum: 0
          maximum: 1
          description: >-
            A floating point value between 0 and 1 that indicates the progress of the processing for this file.
        status:
          type: string
          enum:
            - queued
            - processing
            - ready
            - failed
          description: >
            Post upload processing status. - `queued`: the file is waiting in the queue to be processed. - `processing`: the file is actively being processed. - `ready`: the file has been fully processed and is ready for embedding and viewing. - `failed`: the file was unable to be processed (usually a format or size error).

        section:
          type: string
          description: >-
            The title of the section in which the media appears. This attribute is omitted if the media is not in a section (default).
        subfolder:
          $ref: '#/components/schemas/Subfolder'
          nullable: true
          description: >-
            The subfolder (media group) in which the media appears. Null if the media is not in a subfolder.
        thumbnail:
          $ref: '#/components/schemas/Thumbnail'
        project:
          $ref: '#/components/schemas/slim_project_schema_Project'
    AllowedDomain:
      type: object
      properties:
        domain:
          type: string
          description: The allowed domain name.
          example: example.com
        created_at:
          type: string
          description: The date that the allowed domain was originally created.
          format: date-time
          example: '2010-08-13T18:47:39+00:00'
      required:
        - domain
        - created_at
    SourceMedia:
      type: object
      description: The media that the localization is associated with.
      properties:
        hashed_id:
          type: string
          description: A unique alphanumeric identifier for this media.
        name:
          type: string
          description: The name of the media.
        duration:
          type: number
          description: The duration of the media in seconds.
        created_at:
          type: string
          format: date-time
          description: The date when the media was created.
        updated_at:
          type: string
          format: date-time
          description: The date when the media was last updated.
      required:
        - hashed_id
        - name
        - duration
        - created_at
        - updated_at
    LocalizationTranscript:
      type: object
      description: >-
        The transcript for the localization. Selectively serialized in some endpoints. See properties for endpoint.
      nullable: true
      properties:
        hashed_id:
          type: string
          description: A unique alphanumeric identifier for this transcript.
        language_name:
          type: string
          description: The name of the language in English.
        native_language_name:
          type: string
          description: The name of the language in the language of the localization.
        text:
          type: string
          description: The text of the transcript.
        created_at:
          type: string
          format: date-time
          description: The date when the transcript was created.
        updated_at:
          type: string
          format: date-time
          description: The date when the transcript was last updated.
      required:
        - hashed_id
        - language_name
        - native_language_name
        - text
        - created_at
        - updated_at
    LocalizationWithPurchaseData:
      allOf:
        - $ref: '#/components/schemas/Localization'
        - type: object
          properties:
            auto_enable_dubbing:
              type: boolean
              description: >-
                Whether or not the dubbing will be automatically enabled when completed.
            expected_billed_minutes:
              type: number
              description: >-
                The expected number of minutes that will be billed for the dubbing.
              nullable: true
            expected_billed_price_per_minute:
              type: number
              description: >-
                The expected price per minute that will be billed for the dubbing.
              nullable: true
            expected_billed_price:
              type: number
              description: The expected total price that will be billed for the dubbing.
              nullable: true
            billed_at:
              type: string
              format: date-time
              description: The date when the dubbing was billed.
              nullable: true
          required:
            - auto_enable_dubbing
            - expected_billed_minutes
            - expected_billed_price_per_minute
            - expected_billed_price
            - billed_at
    SearchMedia:
      allOf:
        - $ref: '#/components/schemas/Media'
        - type: object
          properties:
            projectHashedId:
              type: string
              description: The hashed ID of the project this media belongs to
              example: 4d23503f70
          required:
            - projectHashedId
    SearchChannel:
      type: object
      properties:
        id:
          type: integer
          description: A unique numeric identifier for the channel within the system.
        hashedId:
          type: string
          description: A unique alphanumeric identifier for this channel.
        name:
          type: string
          description: The display name for the channel.
        description:
          type: string
          description: The channel's description.
        mediaCount:
          type: integer
          description: The number of medias in the channel.
        created:
          type: string
          format: date-time
          description: The date when the channel was originally created.
        updated:
          type: string
          format: date-time
          description: The date when the channel was last updated.
      required:
        - id
        - hashedId
        - name
        - description
        - mediaCount
        - created
        - updated
    SearchChannelEpisode:
      type: object
      properties:
        id:
          type: integer
          description: >-
            A unique numeric identifier for the channel episode within the system.
        hashedId:
          type: string
          description: A unique alphanumeric identifier for this channel episode.
        title:
          type: string
          nullable: true
          description: The title of the channel episode.
        description:
          type: string
          description: The episode notes for the channel episode.
        summary:
          type: string
          description: The description of the channel episode.
        channelHashedId:
          type: string
          description: The hashed ID of the channel this episode belongs to.
        mediaHashedId:
          type: string
          description: The hashed ID of the media associated with this channel episode.
        published:
          type: boolean
          description: Whether the channel episode is published.
        created:
          type: string
          format: date-time
          description: The date when the channel episode was originally created.
        updated:
          type: string
          format: date-time
          description: The date when the channel episode was last updated.
        publish_at:
          type: string
          format: date-time
          description: The scheduled publish date (only present if scheduled).
          nullable: true
      required:
        - id
        - hashedId
        - description
        - summary
        - channelHashedId
        - mediaHashedId
        - published
        - created
        - updated
    CreateChannelEpisode:
      type: object
      properties:
        media_id:
          type: string
          description: >-
            The alphanumeric hashed ID of the media to be added as a channel episode.
        title:
          type: string
          description: >-
            The episode's title.  If not provided, the channel episode uses the title of the media used to create it.
          example: My New Episode
        description:
          type: string
          description: The episode's description or episode notes.
          example: My Episode Description.
        summary:
          type: string
          description: >-
            A short summary of the episode that is displayed when space is limited.
          example: A short description.
        publish_status:
          type: string
          description: >-
            The status of whether or not the episode has been published to your channel.
          enum:
            - draft
            - published
            - scheduled
        publish_at:
          type: string
          format: date-time
          description: >-
            The date and time when the episode should be published in UTC timezone. Required when publish_status is 'scheduled'. Must be a valid ISO8601 timestamp in UTC (ending with 'Z').  Can only be provided when publish_status is 'scheduled.'
          example: '2024-12-31T23:59:59Z'
        episode_type:
          type: string
          description: >-
            The episode type for your podcast.  This parameter only takes effect if podcasting is enabled for the channel.
          enum:
            - full
            - trailer
            - bonus
        episode_number:
          type: integer
          description: >-
            The episode number for this episode in your podcast.  This parameter only takes effect if podcasting is enabled for the channel.
        explicit_content:
          type: boolean
          description: >-
            Whether this episode contains explicit content.  This parameter only takes effect if podcasting is enabled for the channel.
        hide_from_feed:
          type: boolean
          description: >-
            Whether or not to hide this episode from your podcast feed.  Set to true to hide the episode, false to show the episode.  This parameter only takes effect if podcasting is enabled for the channel.
    Visitor:
      type: object
      properties:
        visitor_key:
          type: string
          description: A unique identifier for the visitor.
        created_at:
          type: string
          format: date-time
          description: When the visitor was created.
        last_active_at:
          type: string
          format: date-time
          description: The last time the visitor played a video.
        last_event_key:
          type: string
          description: The event key for the last video play action.
        load_count:
          type: integer
          description: The total number of videos loaded by the visitor.
        play_count:
          type: integer
          description: The total number of videos played by the visitor.
        visitor_identity:
          type: object
          properties:
            name:
              type: string
            email:
              type: string
            org:
              type: object
              properties:
                name:
                  type: string
                title:
                  type: string
        user_agent_details:
          type: object
          properties:
            browser:
              type: string
            browser_version:
              type: string
            platform:
              type: string
            mobile:
              type: boolean
    Event:
      type: object
      properties:
        received_at:
          type: string
          format: date-time
          description: Date and time when the event occurred.
        event_key:
          type: string
          description: Unique identifier for the event.
        visitor_key:
          type: string
          description: Identifier for the visitor.
        embed_url:
          type: string
          description: URL of the page where the video was viewed.
        percent_viewed:
          type: number
          format: float
          description: Decimal number denoting how much of the video was watched.
        ip:
          type: string
          description: IP address of the viewer.
        org:
          type: string
          description: Organization associated with the IP address.
        country:
          type: string
          description: Country based on IP.
        region:
          type: string
          description: Region based on IP.
        city:
          type: string
          description: City based on IP.
        lat:
          type: number
          format: float
          description: Latitude based on IP.
        lon:
          type: number
          format: float
          description: Longitude based on IP.
        email:
          type: string
          description: Email of the viewer (if available).
        media_id:
          type: string
          description: Identifier for the video that was watched.
        media_name:
          type: string
          description: Name of the video.
        media_url:
          type: string
          description: URL of the video in Wistia.
        iframe_heatmap_url:
          type: string
          description: URL for the heatmap of the event.
        thumbnail:
          type: object
          properties:
            url:
              type: string
            width:
              type: integer
            height:
              type: integer
            fileSize:
              type: integer
            contentType:
              type: string
            type:
              type: string
        conversion_type:
          type: integer
          description: Type of conversion.
        conversion_data:
          type: object
          properties:
            email:
              type: string
            first_name:
              type: string
            is_new_lead:
              type: boolean
            last_name:
              type: string
          description: Additional data related to the conversion.
        user_agent_details:
          type: object
          properties:
            browser:
              type: string
            browser_version:
              type: string
            platform:
              type: string
            mobile:
              type: boolean
          description: Details about the user agent of the viewer.
    CommonUploadProperties:
      type: object
      properties:
        project_id:
          type: string
          description: The hashed id of the project to upload media into.
        name:
          type: string
          maxLength: 255
          description: A display name to use for the media in Wistia.
        description:
          type: string
          description: A description to use for the media in Wistia.
        contact_id:
          type: integer
          description: A Wistia contact id.
        access_token:
          type: string
          deprecated: true
          description: A 64 character hex string. This parameter can be found on your API access page OR can be the token you received from authenticating via Oauth2. Note this approach is legacy and discouraged. We recommend using Bearer Token authentication.
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
  responses:
    '400':
      description: Bad request
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                description: Error message detailing the reason for the bad request.
                example: Bad request
    '401':
      description: Unauthorized, invalid or missing token
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: Invalid credentials.
    '404':
      description: Resource not found
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: Project with ID 'fakeid' not found.
    '422':
      description: Unprocessible entity, parameters provided were invalid.
      content:
        application/json:
          schema:
            type: object
            properties:
              errors:
                type: object
                description: >-
                  Contains a summary of what fields had errors and the errors they had.
    '500':
      description: Internal server error
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: Internal server error
    resource_not_found_head_only_404:
      description: Resource not found
  parameters:
    sort_by:
      name: sort_by
      in: query
      description: Ordering. Default is ID ASC.
      required: false
      schema:
        type: string
        enum:
          - position
          - title
          - created
          - updated
          - id
    sort_direction:
      name: sort_direction
      in: query
      description: Ordering Sort Direction (0 = desc, 1 = asc; default is 1)
      required: false
      schema:
        type: integer
        enum:
          - 0
          - 1
    page:
      name: page
      in: query
      description: Page number to retrieve
      required: false
      schema:
        type: integer
    per_page:
      name: per_page
      in: query
      description: Number of channels per page
      required: false
      schema:
        type: integer
    media_id:
      name: media_id
      in: query
      description: Filter by media id
      required: false
      schema:
        type: array
        items:
          type: string
    hashed_id:
      name: hashed_id
      in: query
      description: Filter by hashed id
      required: false
      schema:
        oneOf:
          - type: string
          - type: array
            items:
              type: string
    published:
      name: published
      in: query
      description: Filter by published status.
      required: false
      schema:
        type: boolean
    title:
      name: title
      in: query
      description: Filter by channel episode name/title.
      required: false
      schema:
        type: string
x-tagGroups:
  - name: Data API
    tags:
      - Projects
      - Subfolders
      - Project Sharings
      - Media
      - Account
      - AllowedDomains
      - Background Job Status
      - Customizations
      - Captions
      - Trims
      - Localizations
      - Tags
      - Search
      - Channels
      - Channel Episodes
      - Expiring Access Tokens
      - Live Stream Events
  - name: Stats API
    tags:
      - Stats:Account
      - Stats:Projects
      - Stats:Media
      - Stats:Visitors
      - Stats:Events
security:
  - BearerAuth: []
servers:
  - url: https://api.wistia.com/v1
